syn keyword CTagsStructure cclass __anon0767ba880108 CryptContextTraits __anona48880470108 FileHandleTraits RegTraits CommonHandleTraits cname re_guts JobHandleTraits FindHandleTraits llvm_regex
syn keyword CTagsMember code Bogus x87DoubleExtended firststate IEEEhalf re_endp Invalid sets IEEEdouble iflags strip rm_eo multis mlen PPCDoubleDouble re_g laststate ID IEEEquad EnableDebugBuffering smultis re_nsub fixed_seed_override neol nplus must backrefs AllSubCommands csetsize nbol mask nstates GeneralCategory ptr chars Handle setbits re_magic nsub ncsets TopLevelSubCommand catspace rm_so categories IEEEsingle D cflags name ncategories npos
syn keyword CTagsGlobalVariable AArch64CPUNames DebugFlag EnableABIBreakingChecks gCRAnnotations AArch64ARCHNames basic_parser opt CPUNames ARCHNames
syn keyword CTagsConstant maxPowerOfFiveExponent huge_valf separators maxPrecision maxExponent maxPowerOfFiveParts preferred_separator
syn keyword CTagsFunction getFPUNeonSupportLevel consumeUnsignedInteger LockFileManager initSlowCase endSequence SpecialCaseList roundAwayFromZero copySignificand fouts StringPool PrintVersionMessage columnWidthUTF8 next moveRight write_double unregisterSubCommand root_path AttributeString ChildrenString ConvertUTF8toUTF16 getBitsNeeded
syn keyword CTagsFunction getWatchOSVersion rfind writebyte release startTimer incrementSignificand close LNExtendedString install_fatal_error_handler OrSlowCase Search end raw_fd_ostream tcExtractBit zextOrSelf root_directory registerCategory APFloat removeArgument fusedMultiplyAdd parse initFromQuadrupleAPInt line_iterator prune matchEnumFallback LLVMSearchForAddressOfSymbol getVirtuality initFromHalfAPInt toTimePoint createOrDie getSTDIN parseArchISA checkArchVersion freeSignificand
syn keyword CTagsFunction write_escaped distribute multiply getHiBits tcMSB roundSignificandWithExponent parseArch divide64 ConvertUTF16toUTF32 StrError getKey setInstance getHWDivFeatures RoundDoubleToAPInt toVector RunningOnValgrind PrintStatisticsJSON addTimer ferrs llvm_regfree udivrem addOrSubtractSpecials roundToIntegral getOSAndEnvironmentName setVendorName getOSTypeName flowKey significandMSB remove_filename toTimeVal output LNStandardString IO parseFormatString scanBlockChompingIndicator
syn keyword CTagsFunction tcIsZero anchor flush_nonempty ComputePosition printOptionValues MD5 getErrorMessage parseDirectives filename BranchProbability MoveFrom AttributeEncodingString IEEEFloat skip_b_break isPrintable home getARMCPUForArch getFPUVersion printOptionName getVendorTypeName skip_ns_char FindBucketFor join sadd_ov fdbgs printRegisteredTargetsForVersion multiplicativeInverse RegisterTarget AddPointer frexp getNewMemBuffer splitLiteralAndReplacement NamedRegionTimer TagString flipBit subtract
syn keyword CTagsFunction to_hexString DisplayGraph postflightDocument scanDirective outputting destroy setCurrentDebugType FoldingSetImpl FindBufferContainingLoc reverseColor remainder addArgument ushl_ov write_impl isDenormal llvm_is_multithreaded getLanguage UTF16ToUTF8 initFromAPInt Document getFileSlice usub_ov tcMultiply udiv getArchExtFeature ThreadLocalImpl XorSlowCase scanBlockScalarHeader convertFromAPInt logAllUnhandledErrors parent_path getVerbatimTag sextOrTrunc getMacOSXVersion RemoveNode
syn keyword CTagsFunction convertToHexString StringError RunSafelyOnThread AddString tcMultiplyPart createUniqueDirectory mod remove_dots getULEB128Size makeNaN getNext status getBranchProbability hash_value postflightKey beginEnumScalar rfind_lower columnWidth getPermanentLibrary clear RandomNumberGenerator ArrayOrderString tcShiftLeft consumeFieldLayout convertQuadrupleAPFloatToAPInt addOccurrence readLockFile has_colors urem srem getEnvironmentVersion magicu magic GetOrInsertNode multiplySignificand
syn keyword CTagsFunction resetColor log APInt InsertNode add extrahelp isLiteralERE AddNodeID printJSONValues AreStatisticsEnabled convert remove_leading_dotslash removeSimpleKeyCandidatesOnFlowLevel find_first_not_of endDocuments FoldingSetIteratorImpl tryacquire final significandParts Storage tcExtract RehashTable ThreadPool write_hex ConventionString LanguageString getUniqueID skip_while sub initFromF80LongDoubleAPInt findLeader HideUnrelatedOptions getEnvironmentTypeName getAsUnsignedInteger sdivrem
syn keyword CTagsFunction convertToDouble filename_pos tcCompare getNewUninitMemBuffer getArchTypeName tcFullMultiply zeroSignificand has_root_name getFileAsStream getArchTypePrefix str scanTag stem isSignificandAllOnes compareImpl createHNodes outputUpToEndOfLine Intern tcSet isLargest increment ApplePropertyString unsafeRemoveLockFile sextOrSelf StrInStrNoCase toNullTerminatedStringRef PrintIncludeStack Grow getToken Run setOSName canElideEmptySequence heavyweight_hardware_concurrency GrowHashTable
syn keyword CTagsFunction stopTimer waitForUnlock makeSmallest CompareAndSwap dumpTokens nulls dbgs swap skip_s_white consumeLineBreakIfPresent getLittleEndianArchVariant getHostCPUName ConvertUTF16toUTF8 moveLeft PrintQueuedTimers getSubArch setEnvironmentName tcClearBit printAllJSONValues erase_imp preflightElement GDBIndexEntryKindString is_relative convertFromString is_separator begin getExactInverse getArchName setTriple setError make_absolute mapTag getCStr initFromPPCDoubleDoubleAPInt
syn keyword CTagsFunction reader_release DoubleAPFloat split slt setBit AtomTypeString SetBuffered tcAnd setArchName lookupTarget compile beginBitSetScalar scanBlockScalarIndent getHWDivName parseArchExt Close ConvertUTF32toUTF16 llvm_regexec countPopulationSlowCase nextDocument removeStaleSimpleKeyCandidates trunc getPlugin AddLiteralOption scanStreamStart stringifyResult StringMapImpl Output c_str CopyFrom SMDiagnostic getCanonicalArchName LLVMResetFatalErrorHandler sdiv ssub_ov CopyHelper exists
syn keyword CTagsFunction toDuration getArchAttr FindInEnvPath printBumpPtrAllocatorStats Regex isPrefixedHexStyle EscapeString AreCoreFilesPrevented setArgStr scalarString native pwrite_impl has_relative_path EndianityString StatisticInfo copySign unrollIndent tcOr clearBit DiffFilesWithTolerance registerSubCommand root_name tcDecrement ilogb is_other getProcessTriple getArchFeatures bitwiseIsEqual set_fixed_execution_hash_seed removeTimer Scanner blockScalarString report_fatal_error find_first_component
syn keyword CTagsFunction ResetCommandLineParser skipComment relative_path semanticsSizeInBits byteSwap makeZero seek PrintHelpMessage findOption tcAdd getAttributeEncoding get_separator extension tcSubtract beginMapping GetCurrent endswith_lower LLVMEnablePrettyStackTrace printGenericOptionDiff intern SearchForAddressOfSpecialSymbol TimerGroup setOSAndEnvironmentName printOptionNoValue FileOutputBuffer PrintStatistics convertUTF16ToUTF8String convertToErrorCode tcSetLeastSignificantBits scanBlockEntry
syn keyword CTagsFunction convertFromZeroExtendedInteger multiply64 significandLSB ParseCommandLineOptions divideSpecials scanBlockScalar beginDocuments FindKey GetTestResult getAsInteger clearSign rollIndent UTF16ToCurCP scanFlowEntry getNumBytesForUTF8 changeColor has_root_path printOptionInfo CallFrameString ExecuteAndWait preflightKey AccessibilityString getMemBuffer initFromArray RunSafely handle advanceWhile makeInf print printRepr getMemBufferRef llvm_execute_on_thread createUniqueFile
syn keyword CTagsFunction convertHalfAPFloatToAPInt unregisterCleanup input error Triple setCurrentDocument tcNegate endFlowMapping isArch16Bit SearchForAddressOfSymbol scanBlockIndentationIndicator SplitString scanFlowScalar ExecuteNoWait fromString makeSmallestNormalized RunSignalHandlers convertF80LongDoubleAPFloatToAPInt GDBIndexEntryLinkageString tcAssign llvm_unreachable_internal failed replace_path_prefix getSLEB128Size VirtualityString Split compare_numeric isBlankOrBreak
syn keyword CTagsFunction convertFromUnsignedParts getEnvironmentName advance ValgrindDiscardTranslations has_stem countLeadingZerosSlowCase ConvertUTF32toUTF8 ashr SavedRegisterMask RunningWindows8OrGreater getSizeInBits getVendorName EnablePrettyStackTrace getU16 isSignaling indent getCurrentTime RWMutexImpl Enable endMapping reserve convertUTF8ToUTF16String identify_magic getDefaultCPU FormEncodingString getRightSibling VisibilityString rend semanticsMaxExponent GrowBucketCount compare
syn keyword CTagsFunction LookupSubCommand LLVMParseCommandLineOptions sqrt scanFlowCollectionEnd AttributeValueString scanFlowCollectionStart toTimeSpec setContext asyncImpl isInteger divide32 getCurrentNode isSmallest handleOverflow getMacinfo getOperationEncoding instance LLVMAddSymbol bitSetMatch divideSignificand scanToNextToken convertPPCDoubleDoubleAPFloatToAPInt crc32 lshr AddSymbol paddedKey getHostCPUFeatures printAll getState roundToDouble user_cache_directory EnableStatistics scanKey
syn keyword CTagsFunction registerCleanup setOS AddExtraVersionPrinter copy_to_buffer ConvertUTF8toUTF32Partial body parseArchVersion rotl divide isLegalUTF8String fetchMoreTokens compare_lower prepareToPrintList skip_nb_char isLegalUTF8Sequence countLeadingOnes write_integer parseHWDiv preferred_buffer_size scale getTag newLineCheck SetBufferAndMode beginFlowMapping has_root_directory preflightDocument shiftSignificandLeft semanticsPrecision root_dir_start update AndSlowCase expectToken MoveHelper
syn keyword CTagsFunction DAGDeltaAlgorithmImpl convertFromStringSpecials errs init UTF8ToUTF16 getFile AdjustToPrecision parseReplacementItem printBinaryImpl createGraphFilename scanPlainScalar LLVMInstallFatalErrorHandler mapWindowsError replace_filename tcShiftRight tcIncrement addOrSubtractSignificand pad parent_path_end setVendor Delta LookupOption isCurrentDebugType convertNormalToHexString skip replace_extension changeSign getLoBits getBigEndianArchVariant getDefaultExtensions convertWideToUTF8
syn keyword CTagsFunction matchEnumScalar hash writer_acquire convertFromDecimalString endBitSetScalar getOptionWidth PrettyStackTraceEntry has_filename getOpenFileSlice isLittleEndian toString CreateInfoOutputFile smul_ov RegisterStatistic parseTAGDirective getValue Profile PrintOptionValues getU64 commit getDefaultPrecision is_absolute get64BitArchVariant getFileOrSTDIN initFromFloatAPInt wait convertFromSignExtendedInteger escape addUncounted consumeSignedInteger llvm_strlcpy replaceRoot ComputeHash
syn keyword CTagsFunction getHostNumPhysicalCores dump current_pos save isValid getU32 zext isAvailable errorCodeToError CheckBitcodeOutputToConsole getRegisteredSubcommands saveSimpleKeyCandidate AddInteger ExpandResponseFiles is_displayed ConstructTimerLists addSignificand processStillExecuting llvm_shutdown unescapeDoubleQuoted getAsSignedInteger reset DiscriminantString getAllOnesValue RemoveKey isSplat consume AddIncludeFile outputNewLine countTrailingOnesSlowCase OperationEncodingString
syn keyword CTagsFunction inconvertibleErrorCode scanTokens RestorePrettyStackState getNumMatches remove_fatal_error_handler lower convertToSignExtendedInteger count beginFlowSequence initFromDoubleAPInt DecimalSignString zextOrTrunc scanDocumentIndicator MacinfoString hashBlock getRandomBytes tcXor convertToInteger PrintRecyclerStats Disable grow printOneChildRepr TokenizeWindowsCommandLine edit_distance getUnsigned peekNext create append llvm_regerror SetVersionPrinter getOpenFile shl addOption
syn keyword CTagsFunction has_parent_path endEnumScalar umul_ov sext llvm_regcomp initialize makeLargest reader_acquire multiplySpecials getLineAndColumn FoldingSetBucketIteratorImpl parseCPUArch getExtensionFeatures semanticsMinExponent setEnvironment hasUTF16ByteOrderMark rotr find_lower startswith_lower ult subtractSignificand getAddressOfSymbol getFPUFeatures convertDoubleAPFloatToAPInt createTemporaryFile uadd_ov is_directory parseArchProfile write APSInt ReverseStackTrace AttrTypeFromString
syn keyword CTagsFunction setObjectFormat writer_release partCount isSignificandAllZeros getArchTypeForLLVMName upper beginSequence compress ConvertUTF8toWide outs preflightFlowElement xxHash64 Node modSpecials isRecoveringFromCrash ParseEnvironmentOptions scan_ns_uri_char find_last_not_of getFPURestriction is_regular_file PrintMessage getCPUAttr AttrTypeAsString getInstance getOSVersion getSigned CaseString getU8 convertFloatAPFloatToAPInt isArch64Bit find_first_of getLeftSibling AssignSlowCase
syn keyword CTagsFunction getContext printJSONValue SmallPtrSetImplBase widenPath postflightElement insert_imp_big targets HandleCrash printOneChild assign EqualSlowCase compareAbsoluteValue status_known shrink_and_clear scanAliasOrAnchor getAllocator TokenizeGNUCommandLine InlineCodeString tool_output_file get32BitArchVariant printError isValidKey countTrailingZeros ConvertCodePointToUTF8 isArch32Bit findBlockScalarIndent flushBufferWithBanner PadToColumn normalize parseBlockNode CleanupInstaller
syn keyword CTagsFunction MakeErrMsg skip_s_space PRINT_OPT_DIFF getRegisteredOptions sshl_ov has_extension getDefaultFPU result isPrint MemoryFence shlSlowCase FindNodeOrInsertPos dumpRepr MutexImpl getULEB128 grow_pod postflightFlowElement getCallingConvention makeQuiet IsValid sort tcLSB create_directories ResetAllOptionOccurrences LookupBucketFor getColorString reverseBits GreatestCommonDivisor parseFPU tcComplement getOSName removeInstance SavePrettyStackState LLVMLoadLibraryPermanently tcSetBit
syn keyword CTagsFunction setArch errorToErrorCode find scalbn GetMessage shiftSignificandRight scaleByInverse Stream rbegin ConvertUTF8toUTF32 scanValue convertFromHexadecimalString copy_file scanStreamEnd take getiOSVersion inSection find_last_of getSLEB128 uncompress parseYAMLDirective tcDivide endFlowSequence acquire addOrSubtract GetInvalid parseArchEndian getNumPlugins sdiv_ov convertToFloat bitcastToAPInt Input getArchExtName match toFILETIME getMemBufferCopy getFPUName RegisterManagedStatic
syn keyword CTagsType ScopedCryptContext sop handle_type cat_t sopno llvm_regmatch_t llvm_regex_t ScopedCommonHandle uch ScopedRegHandle ScopedFileHandle ScopedFindHandle ScopedJobHandle cset llvm_regoff_t
syn keyword CTagsDefinedName LLVM_SUPPORT_REGCNAME_H NDEBUG OBACK_ OBOL LLVM_SUPPORT_REGEX2_H OPRMASK ORPAREN REG_ECTYPE REG_EXTENDED REG_NOSUB OANY MCsub REG_ECOLLATE OEND REG_NEWLINE LLVM_SUPPORT_WINDOWSSUPPORT_H LLVM_SUPPORT_REGCCLASS_H REG_BADPAT O_PLUS REG_INVARG REG_NOTBOL REG_EMPTY REG_LARGE MAGIC2 OANYOF O_BACK REG_ESPACE REG_EBRACK OUT REG_EBRACE MCadd USEEOL memmove
syn keyword CTagsDefinedName REG_ESUBREG OLPAREN REG_NOMATCH WIN32_LEAN_AND_MEAN O_QUEST OOR2 REG_ASSERT REG_EPAREN NC OPSHIFT REG_ERANGE REG_STARTEND REG_TRACE REG_ITOA SOP O_CH REGEX_BAD REG_ICASE _REGEX_H_ OCHAR LLVM_SUPPORT_REGUTILS_H OOR1 OPLUS_ OEOW REG_DUMP USEBOL MCin OEOL OPND REG_PEND REG_NOSPEC OPDMASK REG_NOTEOL NOMINMAX CHsub OBOW REG_BACKR REG_BADBR OCH_ REG_BADRPT REG_EESCAPE _WIN32_IE REG_BASIC REG_ATOI CHadd LLVM_LIB_SUPPORT_UNIX_UNIX_H _WIN32_WINNT CHIN ISWORD OQUEST_ OP MAGIC1
syn keyword CTagsClass ScopedHandle
syn keyword CTagsNamespace path windows llvm sys

" Matches for file MathExtras.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "MathExtras.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file regexec.c:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "regexec.c") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsDefinedName CLEAR ASSIGN ISSTATEIN ISSETBACK BACK SNAMES EQ GOODFLAGS states1 INIT SETUP ISSET LNAMES FWD onestate SET1 STATEVARS INC SET0 states STATETEARDOWN STATESETUP
	
endif
" Matches for file SourceMgr.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "SourceMgr.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure LineNoCacheTy
	syn keyword CTagsMember LastQueryBufferID LineNoOfQuery LastQuery
	syn keyword CTagsConstant TabStop
	syn keyword CTagsFunction buildFixItLine isNonASCII getCache printSourceLine
	syn keyword CTagsNamespace __anon842e844d0110
	
endif
" Matches for file Mutex.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Mutex.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file LockFileManager.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "LockFileManager.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsMember Filename RemoveImmediately
	syn keyword CTagsFunction lockAcquired getHostID
	syn keyword CTagsDefinedName USE_OSX_GETHOSTUUID
	syn keyword CTagsClass RemoveUniqueLockFileOnSignal
	syn keyword CTagsNamespace __anonb734c93a0110
	
endif
" Matches for file DataExtractor.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "DataExtractor.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction getU getUs
	
endif
" Matches for file Path.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Path.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsConstant preferred_separator_string
	syn keyword CTagsEnumeratorName FSEntity
	syn keyword CTagsEnumerationValue FS_Name FS_Dir FS_File
	syn keyword CTagsFunction createUniqueEntity remove_dots createTemporaryFile startswith make_absolute
	syn keyword CTagsNamespace fs path llvm sys __anon912220430110
	
endif
" Matches for file ARMBuildAttrs.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ARMBuildAttrs.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure __anond31545540208
	syn keyword CTagsMember TagName Attr
	syn keyword CTagsNamespace ARMBuildAttrs llvm __anond31545540110
	
endif
" Matches for file JamCRC.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "JamCRC.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsConstant CRCTable
	
endif
" Matches for file Process.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Process.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable coreFilesPrevented
	syn keyword CTagsConstant colorcodes
	syn keyword CTagsDefinedName COLOR ALLCOLORS
	
endif
" Matches for file FoldingSet.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "FoldingSet.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction GetBucketFor GetBucketPtr AllocateBuckets GetNextPtr
	
endif
" Matches for file ConvertUTFWrapper.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ConvertUTFWrapper.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction ConvertUTF8toWideInternal
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file GraphWriter.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "GraphWriter.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure GraphSession
	syn keyword CTagsMember LogBuffer
	syn keyword CTagsGlobalVariable ViewBackground
	syn keyword CTagsEnumeratorName ViewerKind
	syn keyword CTagsEnumerationValue VK_Ghostview VK_XDGOpen VK_CmdStart VK_None VK_OSXOpen
	syn keyword CTagsFunction getProgramName TryFindProgram ExecGraphViewer
	syn keyword CTagsNamespace __anoneadbbe250110
	
endif
" Matches for file ErrorHandling.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ErrorHandling.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable ErrorHandler ErrorHandlerMutex ErrorHandlerUserData
	syn keyword CTagsFunction bindingsErrorHandler
	syn keyword CTagsDefinedName MAP_ERR_TO_COND
	
endif
" Matches for file DynamicLibrary.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "DynamicLibrary.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable OpenedHandles ExplicitSymbols SymbolsMutex
	syn keyword CTagsFunction SearchForAddressOfSpecialSymbol
	syn keyword CTagsDefinedName EXPLICIT_SYMBOL
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file regerror.c:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "regerror.c") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure rerr
	syn keyword CTagsMember name explain code
	syn keyword CTagsFunction regatoi
	syn keyword CTagsDefinedName snprintf
	
endif
" Matches for file CachePruning.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "CachePruning.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction writeTimestampFile __anon1bae88cd0102
	syn keyword CTagsDefinedName DEBUG_TYPE
	
endif
" Matches for file Compression.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Compression.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction encodeZlibReturnValue encodeZlibCompressionLevel
	
endif
" Matches for file Threading.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Threading.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure ThreadInfo
	syn keyword CTagsMember UserFn UserData func param
	syn keyword CTagsFunction ExecuteOnThread_Dispatch ThreadCallback
	
endif
" Matches for file SearchForAddressOfSpecialSymbol.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "SearchForAddressOfSpecialSymbol.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction DoSearch
	syn keyword CTagsDefinedName EXPLICIT_SYMBOL
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file LineIterator.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "LineIterator.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction isAtLineEnd skipIfAtLineEnd
	
endif
" Matches for file TargetRegistry.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "TargetRegistry.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable FirstTarget
	syn keyword CTagsFunction TargetArraySortFn __anon63a527560202 __anon63a527560102
	
endif
" Matches for file Debug.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Debug.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure DebugOnlyOpt
	syn keyword CTagsMember strm
	syn keyword CTagsGlobalVariable Debug DebugBufferSize CurrentDebugType DebugOnlyOptLoc DebugOnly
	syn keyword CTagsFunction debug_user_sig_handler dbgstream
	syn keyword CTagsNamespace __anona93d287d0110 llvm
	
endif
" Matches for file Triple.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Triple.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction parseVersionFromName parseVendor EatNumber getDefaultFormat parseARMArch parseBPFArch parseSubArch parseArch getArchPointerBitWidth parseOS parseFormat getObjectFormatTypeName parseEnvironment
	
endif
" Matches for file Atomic.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Atomic.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsDefinedName GNU_ATOMICS
	
endif
" Matches for file BranchProbability.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "BranchProbability.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction scale
	
endif
" Matches for file Regex.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Regex.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsConstant RegexMetachars
	
endif
" Matches for file APFloat.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "APFloat.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure fltSemantics decimalInfo
	syn keyword CTagsMember minExponent sizeInBits lastSigDigit maxExponent normalizedExponent firstSigDigit precision exponent
	syn keyword CTagsConstant NaNL NaNU PPCDoubleDoubleImpl hexDigitsLower infinityL hexDigitsUpper infinityU
	syn keyword CTagsFunction trailingHexadecimalFraction interpretDecimal HUerrBound totalExponent writeSignedDecimal ulpsFromBoundary combineLostFractions shiftRight partAsHex writeUnsignedDecimal lostFractionThroughTruncation skipLeadingZeroesAndAnyDot partCountForBits powerOf5 decDigitValue readExponent
	syn keyword CTagsDefinedName PackCategoriesIntoKey
	syn keyword CTagsNamespace llvm detail __anondc20a17d0110
	
endif
" Matches for file ConvertUTF.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ConvertUTF.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsConstant halfBase halfMask halfShift trailingBytesForUTF8 firstByteMark offsetsFromUTF8
	syn keyword CTagsFunction findMaximalSubpartOfIllFormedUTF8Sequence isLegalUTF8 ConvertUTF8toUTF32Impl
	syn keyword CTagsDefinedName UNI_SUR_LOW_END UNI_SUR_HIGH_END UNI_SUR_LOW_START UNI_SUR_HIGH_START
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file raw_ostream.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "raw_ostream.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction getFD
	syn keyword CTagsDefinedName STDOUT_FILENO STDIN_FILENO STDERR_FILENO
	
endif
" Matches for file FileUtilities.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "FileUtilities.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction CompareNumbers isNumberChar EndOfNumber BackupNumber isSignedChar isExponentChar
	
endif
" Matches for file IntervalMap.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "IntervalMap.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace IntervalMapImpl llvm
	
endif
" Matches for file FormattedStream.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "FormattedStream.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction UpdatePosition
	
endif
" Matches for file CommandLine.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "CommandLine.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsMember CategorizedPrinter RegisteredOptionCategories ProgramOverview RegisteredSubCommands ProgramName UncategorizedPrinter MoreHelp ActiveSubCommand ShowHidden
	syn keyword CTagsGlobalVariable PrintAllOptions HLHOp GenericCategory VersionPrinterInstance GlobalParser PrintOptions HOp HLOp ExtraVersionPrinters HHOp OverrideVersionPrinter VersOp
	syn keyword CTagsConstant MaxOptWidth
	syn keyword CTagsEnumeratorName __anon2c11109d0403
	syn keyword CTagsEnumerationValue INIT QUOTED UNQUOTED
	syn keyword CTagsFunction ExpandResponseFile ProvideOption ProvidePositionalOption __anon2c11109d0302 print CategorizedNormalPrinter LookupSubCommand parseBackslash hasUTF8ByteOrderMark printOptionValues OptionCategoryCompare isPrefixedOrGrouping registerSubCommand sortOpts getValueStr RequiresValue EatsUnboundedNumberOfValues SubNameCompare LookupOption updateArgStr isQuote isWhitespace parseDouble UncategorizedHiddenPrinter reset
	syn keyword CTagsFunction WrappedNormalPrinter WrappedHiddenPrinter printSubCommands addLiteralOption ParseCommandLineOptions CategorizedHiddenPrinter CommaSeparateAndAddOccurrence getActiveSubCommand LookupNearestOption getOptionPred getRegisteredSubcommands sortSubCommands HandlePrefixedOrGroupedOption printHelpStr addOption removeOption UncategorizedNormalPrinter ResetAllOptionOccurrences __anon2c11109d0202 OptNameCompare printOptions hasOptions registerCategory unregisterSubCommand isGrouping
	syn keyword CTagsType StrOptionPairVector StrSubCommandPairVector
	syn keyword CTagsDefinedName PRINT_OPT_DIFF DEBUG_TYPE
	syn keyword CTagsClass CategorizedHelpPrinter HelpPrinterWrapper CommandLineParser VersionPrinter HelpPrinter
	syn keyword CTagsNamespace __anon2c11109d0110 __anon2c11109d0510 llvm __anon2c11109d0610 cl
	
endif
" Matches for file regcomp.c:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "regcomp.c") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure parse
	syn keyword CTagsMember end error ncsalloc slen pbegin ssize strip g pend next
	syn keyword CTagsGlobalVariable nuls
	syn keyword CTagsFunction findmust freezeset p_b_coll_elem p_b_symbol categorize doemit p_simp_re pluscount p_b_cclass seterr p_b_eclass nch mcinvert firstch othercase samesets dofwd stripsnug nonnewline dupl p_ere_exp allocset isinsets p_bre ordinary repeat p_bracket bothcases p_ere p_str p_b_term freeset p_count doinsert mccase mcadd enlarge
	syn keyword CTagsDefinedName SEE INF GETNEXT SETERROR PEEK2 MUSTEAT SIZE_MAX ASTERN NEXT2 THERE AHEAD MUSTNOTSEE GOODFLAGS PEEK DUPMAX EATTWO SEETWO MORE NEXTn INSERT EMIT REP THERETHERE MAP NPAREN NEXT never EAT BACKSL INFINITY HERE MORE2 N DROP REQUIRE MUSTSEE
	
endif
" Matches for file APInt.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "APInt.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsMember D I
	syn keyword CTagsUnion __anon56889252020a __anon56889252010a
	syn keyword CTagsFunction highHalf lshrNear mul add partLSB partMSB sub_1 getMemory add_1 KnuthDiv getDigit getClearedMemory mul_1 lowBitMask sub lowHalf
	syn keyword CTagsDefinedName DEBUG_TYPE
	syn keyword CTagsNamespace __anon568892520310
	
endif
" Matches for file Unicode.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Unicode.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction charWidth
	syn keyword CTagsNamespace unicode llvm sys
	
endif
" Matches for file ARMWinEH.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ARMWinEH.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace WinEH ARM llvm
	
endif
" Matches for file Signals.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Signals.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable CallBacksToRun
	syn keyword CTagsFunction findModulesAndOffsets printSymbolizedStackTrace format_ptr
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file SHA1.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "SHA1.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction blk r3 r2 r1 r0 r4 rol blk0
	syn keyword CTagsDefinedName SHA1_K60 SEED_0 SEED_1 SEED_2 SHA_BIG_ENDIAN SHA1_K20 SEED_3 SHA1_K40 SHA1_K0 SEED_4
	
endif
" Matches for file NativeFormatting.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "NativeFormatting.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction write_unsigned write_signed format_to_buffer writeWithCommas write_unsigned_impl
	syn keyword CTagsType UnsignedT
	
endif
" Matches for file SpecialCaseList.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "SpecialCaseList.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure Entry
	syn keyword CTagsMember Strings RegEx
	syn keyword CTagsFunction match
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file Host.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Host.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsMember c u
	syn keyword CTagsUnion __anon6346c934010a
	syn keyword CTagsEnumeratorName ProcessorSubtypes __anon6346c9340203 ProcessorFeatures ProcessorVendors ProcessorTypes VendorSignatures
	syn keyword CTagsEnumerationValue VENDOR_MAX INTEL_COREI7_WESTMERE SIG_AMD AMDPENTIUM_K63 AMDFAM14H FEATURE_SSSE3 AMDATHLON_MP CAP_AES INTEL_PENTIUM_PRO INTEL_COREI7_HASWELL INTEL_PENTIUM_IV INTEL_PENTIUM_II CAP_PMULL AMDFAM10H_ISTANBUL INTEL_NOCONA INTEL_i486 FEATURE_MOVBE AMDFAM15H_BDVER1 AMDFAM15H_BDVER4 FEATURE_CMOV INTEL_COREI7_SKYLAKE_AVX512
	syn keyword CTagsEnumerationValue AMD_BTVER1 AMDATHLON_FX FEATURE_SSE2 INTEL_KNIGHTS_LANDING AMDFAM15H INTEL_CORE2_65 INTEL_i386 AMDATHLON_OPTERON AMDATHLON_XP AMDPENTIUM_GEODE AMDFAM15H_BDVER2 INTEL_PENTIUM_MMX INTEL_ATOM_SILVERMONT INTEL_COREI7_NEHALEM AMD_BTVER2 FEATURE_SSE3 FEATURE_AVX512SAVE INTEL_COREI7_IVYBRIDGE AMDFAM10H_BARCELONA VENDOR_OTHER AMDFAM10H_SHANGHAI INTEL_COREI7_SKYLAKE CPU_SUBTYPE_MAX FEATURE_SSE4_2 FEATURE_MMX FEATURE_AVX2 CAP_SHA1 AMD_i486 INTEL_PENTIUM_M CAP_SHA2 FEATURE_ADX
	syn keyword CTagsEnumerationValue INTEL_PENTIUM_III AMDATHLON_TBIRD FEATURE_AVX AMDPENTIUM_K6 INTEL_CORE_DUO INTEL_COREI7_BROADWELL AMDPENTIUM_K62 AMDATHLON_K8SSE3 FEATURE_EM64T INTEL_CORE2_45 FEATURE_POPCNT AMDFAM16H INTEL_CORE2 INTEL_PENTIUM AMDATHLON VENDOR_AMD AMDFAM10H SIG_INTEL FEATURE_SSE CPU_TYPE_MAX AMDPENTIUM INTEL_PRESCOTT AMDATHLON_64 FEATURE_SSE4_1 INTEL_XEONPHI AMDFAM15H_BDVER3 INTEL_ATOM_BONNELL FEATURE_AVX512 INTEL_COREI7 INTEL_X86_64 INTEL_ATOM VENDOR_INTEL INTEL_COREI7_SANDYBRIDGE
	syn keyword CTagsFunction getX86XCR0 computeHostNumPhysicalCores getX86CpuIDAndInfo getAMDProcessorTypeAndSubtype getX86CpuIDAndInfoEx detectX86FamilyModel isCpuIdSupported getAvailableFeatures getIntelProcessorTypeAndSubtype readCpuInfo
	syn keyword CTagsDefinedName DEBUG_TYPE
	
endif
" Matches for file Valgrind.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Valgrind.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsConstant NotUnderValgrind
	syn keyword CTagsFunction InitNotUnderValgrind
	
endif
" Matches for file Locale.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Locale.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace locale llvm sys
	
endif
" Matches for file FileOutputBuffer.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "FileOutputBuffer.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file DAGDeltaAlgorithm.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "DAGDeltaAlgorithm.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsMember PredClosure DDA FailedTestsCache DDAI Roots Required Predecessors SuccClosure Successors
	syn keyword CTagsFunction succ_closure_begin pred_closure_end pred_end pred_closure_begin succ_end succ_begin succ_closure_end UpdatedSearchState ExecuteOneTest GetTestResult pred_begin Run
	syn keyword CTagsType changesetlist_ty pred_closure_iterator_ty change_ty pred_iterator_ty edge_ty succ_closure_iterator_ty succ_iterator_ty changeset_ty
	syn keyword CTagsDefinedName DEBUG_TYPE
	syn keyword CTagsClass DAGDeltaAlgorithmImpl DeltaActiveSetHelper
	syn keyword CTagsNamespace __anon664fcfb30110
	
endif
" Matches for file xxhash.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "xxhash.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsConstant PRIME64_2 PRIME64_3 PRIME64_1 PRIME64_4 PRIME64_5
	syn keyword CTagsFunction rotl64 round mergeRound
	
endif
" Matches for file ScaledNumber.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ScaledNumber.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction appendDigit getHalf __anonaafc574b0202 doesRoundUp toStringAPFloat __anonaafc574b0302 stripTrailingZeros appendNumber __anonaafc574b0102
	
endif
" Matches for file TargetParser.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "TargetParser.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure ArchNames CpuNames __anond11a194a0208 __anond11a194a0408 __anond11a194a0308
	syn keyword CTagsMember CPUAttrLength NameLength ArchBaseExtensions DefaultFPU SubArchCStr NameCStr FPUVersion Default DefaultExtensions CPUAttrCStr ID ArchAttr SubArchLength ArchID Restriction NegFeature Feature NeonSupport
	syn keyword CTagsFunction getCPUAttr getSubArch getFPUSynonym getArchSynonym getHWDivSynonym getName
	syn keyword CTagsDefinedName AARCH64_ARCH_EXT_NAME ARM_CPU_NAME AARCH64_CPU_NAME ARM_ARCH ARM_ARCH_EXT_NAME ARM_FPU AARCH64_ARCH ARM_HW_DIV_NAME
	syn keyword CTagsNamespace __anond11a194a0110
	
endif
" Matches for file ScopedPrinter.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ScopedPrinter.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file FormatVariadic.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "FormatVariadic.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction __anona502e1e20102 translateLocChar
	
endif
" Matches for file YAMLParser.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "YAMLParser.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure SimpleKey
	syn keyword CTagsMember End Current TokenQueue SM Tok Range Column IsStartOfStream Line IsRequired ShowColors EC Indents FlowLevel Failed Value IsSimpleKeyAllowed InputBuffer SimpleKeys Indent Kind
	syn keyword CTagsEnumeratorName UnicodeEncodingForm TokenKind
	syn keyword CTagsEnumerationValue TK_DocumentEnd UEF_Unknown TK_FlowMappingEnd TK_Error TK_BlockEntry TK_BlockMappingStart TK_VersionDirective TK_FlowEntry TK_TagDirective TK_Alias UEF_UTF32_LE TK_Anchor TK_Key UEF_UTF16_BE TK_DocumentStart TK_StreamStart TK_BlockSequenceStart UEF_UTF32_BE TK_FlowSequenceEnd UEF_UTF8 UEF_UTF16_LE TK_FlowSequenceStart TK_Tag TK_StreamEnd TK_BlockEnd TK_FlowMappingStart TK_BlockScalar TK_Scalar TK_Value
	syn keyword CTagsFunction skip_s_white printError consumeLineBreakIfPresent scanToNextToken removeSimpleKeyCandidatesOnFlowLevel findBlockScalarIndent is_ns_hex_digit skip_s_space fetchMoreTokens Token scanBlockIndentationIndicator skip_nb_char scanFlowScalar advanceWhile scanBlockChompingIndicator skip_b_break scanKey getUnicodeEncoding skipComment scanDirective setError skip_ns_char
	syn keyword CTagsFunction skip_while failed decodeUTF8 encodeUTF8 saveSimpleKeyCandidate getChompedLineBreaks init scanBlockScalarIndent scanTag scanValue scan_ns_uri_char isBlankOrBreak scanFlowCollectionEnd scanPlainScalar scanStreamEnd removeStaleSimpleKeyCandidates scanFlowCollectionStart scanDocumentIndicator scanBlockScalar consume scanStreamStart scanBlockEntry is_ns_word_char getNext currentInput scanBlockScalarHeader peekNext rollIndent scanFlowEntry scanAliasOrAnchor skip unrollIndent wasEscaped
	syn keyword CTagsType TokenQueueT UTF8Decoded EncodingInfo
	syn keyword CTagsClass Scanner
	syn keyword CTagsNamespace __anon418572f60110 yaml llvm
	
endif
" Matches for file Timer.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Timer.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsMember Map
	syn keyword CTagsGlobalVariable TimerGroupList NamedGroupedTimers LibSupportInfoOutputFilename TrackSpace DefaultTimerGroup TimerLock InfoOutputFilename
	syn keyword CTagsFunction printVal getLibSupportInfoOutputFilename getMemUsage getDefaultTimerGroup get
	syn keyword CTagsType Seconds Name2TimerMap
	syn keyword CTagsClass Name2PairMap
	syn keyword CTagsNamespace __anoncc40abd70210 __anoncc40abd70110
	
endif
" Matches for file ManagedStatic.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ManagedStatic.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable ManagedStaticMutex
	syn keyword CTagsConstant StaticList
	syn keyword CTagsFunction LLVM_DEFINE_ONCE_FLAG initializeMutex getManagedStaticMutex
	
endif
" Matches for file PrettyStackTrace.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "PrettyStackTrace.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable PrettyStackTraceHead
	syn keyword CTagsConstant __crashreporter_info__
	syn keyword CTagsFunction PrintCurStackTrace RegisterCrashPrinter CrashHandler PrintStack
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file Error.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Error.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable ErrorErrorCat
	syn keyword CTagsEnumeratorName ErrorErrorCode
	syn keyword CTagsEnumerationValue MultipleErrors InconvertibleError
	syn keyword CTagsFunction __anondf7d4ec00302 message name __anondf7d4ec00202
	syn keyword CTagsClass ErrorErrorCategory
	syn keyword CTagsNamespace __anondf7d4ec00110 llvm
	
endif
" Matches for file LEB128.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "LEB128.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file MD5.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "MD5.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsDefinedName F STEP I G GET H SET
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file Options.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Options.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable OR
	
endif
" Matches for file RandomNumberGenerator.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "RandomNumberGenerator.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable Seed
	syn keyword CTagsDefinedName DEBUG_TYPE
	
endif
" Matches for file PluginLoader.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "PluginLoader.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable Plugins PluginsLock
	syn keyword CTagsDefinedName DONT_GET_PLUGIN_LOADER_OPTION
	
endif
" Matches for file ThreadPool.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ThreadPool.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction __anon6e61b8680402 __anon6e61b8680102 __anon6e61b8680202 __anon6e61b8680302
	
endif
" Matches for file Dwarf.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Dwarf.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsDefinedName HANDLE_DW_AT HANDLE_DW_CC HANDLE_DW_FORM HANDLE_DW_VIRTUALITY HANDLE_DW_CFA HANDLE_DW_ATE HANDLE_DW_LNS HANDLE_DW_LANG HANDLE_DW_APPLE_PROPERTY HANDLE_DW_LNE HANDLE_DW_OP HANDLE_DW_TAG
	
endif
" Matches for file MemoryBuffer.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "MemoryBuffer.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsMember Name MFR
	syn keyword CTagsFunction getStart getBufferIdentifier getLegalMapOffset getMemoryBufferForStream getBufferKind shouldUseMmap getFileAux getOpenFileImpl CopyStringRef getLegalMapSize NamedBufferAlloc
	syn keyword CTagsClass MemoryBufferMem MemoryBufferMMapFile
	syn keyword CTagsNamespace __anon58000f290210 __anon58000f290310 __anon58000f290110
	
endif
" Matches for file Errno.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Errno.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm sys
	
endif
" Matches for file StringRef.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "StringRef.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction GetAutoSenseRadix ascii_tolower __anon19b65a8a0102 ascii_isdigit ascii_strncasecmp ascii_toupper
	
endif
" Matches for file Allocator.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Allocator.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm detail
	
endif
" Matches for file RWMutex.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "RWMutex.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file Statistic.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Statistic.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsGlobalVariable StatLock Enabled PrintOnExit Stats StatsAsJSON StatInfo
	syn keyword CTagsFunction PrintStatistics sort __anon7a04bdce0202 addStatistic PrintStatisticsJSON
	syn keyword CTagsClass StatisticInfo
	syn keyword CTagsNamespace __anon7a04bdce0110
	
endif
" Matches for file Program.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Program.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction Execute
	
endif
" Matches for file Chrono.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "Chrono.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction getStructTM
	syn keyword CTagsNamespace llvm
	
endif
" Matches for file CrashRecoveryContext.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "CrashRecoveryContext.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsStructure RunSafelyOnThreadInfo
	syn keyword CTagsMember Failed CRC Result Next Fn UseBackgroundPriority SwitchedThread
	syn keyword CTagsGlobalVariable gCrashRecoveryEnabled PrevActions tlIsRecoveringFromCrash gCrashRecoveryContextMutex
	syn keyword CTagsConstant NumSignals Signals sCurrentExceptionHandle CurrentContext
	syn keyword CTagsFunction ExceptionHandler setThreadBackgroundPriority RunSafelyOnThread_Dispatch setSwitchedThread HandleCrash CrashRecoverySignalHandler CrashRecoveryContextImpl hasThreadBackgroundPriority
	syn keyword CTagsNamespace __anon80fe52fb0110 __anon80fe52fb0210
	
endif
" Matches for file StringMap.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "StringMap.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsFunction getMinBucketToReserveForEntries
	
endif
" Matches for file ThreadLocal.cpp:
if (has_key(b:TagHighlightPrivate, "NormalisedPath") && b:TagHighlightPrivate["NormalisedPath"] == "ThreadLocal.cpp") || TagHighlight#Option#GetOption("IgnoreFileScope")
	syn keyword CTagsNamespace llvm
	
endif
