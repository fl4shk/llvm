!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/249c3c0/
AARCH64_ARCH	TargetParser.cpp	/^ #define AARCH64_ARCH(/;"	kind:d	file:	signature:(NAME,ID,CPU_ATTR,SUB_ARCH,ARCH_ATTR,ARCH_FPU,ARCH_BASE_EXT)
AARCH64_ARCH_EXT_NAME	TargetParser.cpp	/^#define AARCH64_ARCH_EXT_NAME(/;"	kind:d	file:	signature:(NAME,ID,FEATURE,NEGFEATURE)
AARCH64_CPU_NAME	TargetParser.cpp	/^ #define AARCH64_CPU_NAME(/;"	kind:d	file:	signature:(NAME,ID,DEFAULT_FPU,IS_DEFAULT,DEFAULT_EXT)
AARCH64_CPU_NAME	TargetParser.cpp	/^#define AARCH64_CPU_NAME(/;"	kind:d	file:	signature:(NAME,ID,DEFAULT_FPU,IS_DEFAULT,DEFAULT_EXT)
AArch64ARCHNames	TargetParser.cpp	/^ArchNames<AArch64::ArchKind> AArch64ARCHNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:ArchNames<AArch64::ArchKind>[]
AArch64CPUNames	TargetParser.cpp	/^CpuNames<AArch64::ArchKind> AArch64CPUNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:CpuNames<AArch64::ArchKind>[]
AHEAD	regcomp.c	/^#define	AHEAD(/;"	kind:d	file:	signature:(pos)
ALLCOLORS	Process.cpp	/^#define ALLCOLORS(/;"	kind:d	file:	signature:(FGBG,BOLD)
AMDATHLON	Host.cpp	/^  AMDATHLON,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
AMDATHLON_64	Host.cpp	/^  AMDATHLON_64,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDATHLON_FX	Host.cpp	/^  AMDATHLON_FX,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDATHLON_K8SSE3	Host.cpp	/^  AMDATHLON_K8SSE3,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDATHLON_MP	Host.cpp	/^  AMDATHLON_MP,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDATHLON_OPTERON	Host.cpp	/^  AMDATHLON_OPTERON,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDATHLON_TBIRD	Host.cpp	/^  AMDATHLON_TBIRD,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDATHLON_XP	Host.cpp	/^  AMDATHLON_XP,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM10H	Host.cpp	/^  AMDFAM10H,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
AMDFAM10H_BARCELONA	Host.cpp	/^  AMDFAM10H_BARCELONA,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM10H_ISTANBUL	Host.cpp	/^  AMDFAM10H_ISTANBUL,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM10H_SHANGHAI	Host.cpp	/^  AMDFAM10H_SHANGHAI,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM14H	Host.cpp	/^  AMDFAM14H,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
AMDFAM15H	Host.cpp	/^  AMDFAM15H,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
AMDFAM15H_BDVER1	Host.cpp	/^  AMDFAM15H_BDVER1,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM15H_BDVER2	Host.cpp	/^  AMDFAM15H_BDVER2,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM15H_BDVER3	Host.cpp	/^  AMDFAM15H_BDVER3,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM15H_BDVER4	Host.cpp	/^  AMDFAM15H_BDVER4,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDFAM16H	Host.cpp	/^  AMDFAM16H,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
AMDPENTIUM	Host.cpp	/^  AMDPENTIUM,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
AMDPENTIUM_GEODE	Host.cpp	/^  AMDPENTIUM_GEODE,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDPENTIUM_K6	Host.cpp	/^  AMDPENTIUM_K6,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDPENTIUM_K62	Host.cpp	/^  AMDPENTIUM_K62,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMDPENTIUM_K63	Host.cpp	/^  AMDPENTIUM_K63,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMD_BTVER1	Host.cpp	/^  AMD_BTVER1,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMD_BTVER2	Host.cpp	/^  AMD_BTVER2,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
AMD_i486	Host.cpp	/^  AMD_i486,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
APFloat	APFloat.cpp	/^APFloat::APFloat(const fltSemantics &Semantics, StringRef S)$/;"	kind:f	class:llvm::APFloat	signature:(const fltSemantics & Semantics,StringRef S)
APInt	APInt.cpp	/^APInt::APInt(unsigned numBits, ArrayRef<uint64_t> bigVal)$/;"	kind:f	class:APInt	signature:(unsigned numBits,ArrayRef<uint64_t> bigVal)
APInt	APInt.cpp	/^APInt::APInt(unsigned numBits, unsigned numWords, const uint64_t bigVal[])$/;"	kind:f	class:APInt	signature:(unsigned numBits,unsigned numWords,const uint64_t bigVal[])
APInt	APInt.cpp	/^APInt::APInt(unsigned numbits, StringRef Str, uint8_t radix)$/;"	kind:f	class:APInt	signature:(unsigned numbits,StringRef Str,uint8_t radix)
APInt::APInt	APInt.cpp	/^APInt::APInt(unsigned numBits, ArrayRef<uint64_t> bigVal)$/;"	kind:f	class:APInt	signature:(unsigned numBits,ArrayRef<uint64_t> bigVal)
APInt::APInt	APInt.cpp	/^APInt::APInt(unsigned numBits, unsigned numWords, const uint64_t bigVal[])$/;"	kind:f	class:APInt	signature:(unsigned numBits,unsigned numWords,const uint64_t bigVal[])
APInt::APInt	APInt.cpp	/^APInt::APInt(unsigned numbits, StringRef Str, uint8_t radix)$/;"	kind:f	class:APInt	signature:(unsigned numbits,StringRef Str,uint8_t radix)
APInt::AndSlowCase	APInt.cpp	/^APInt APInt::AndSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::AssignSlowCase	APInt.cpp	/^APInt& APInt::AssignSlowCase(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
APInt::EqualSlowCase	APInt.cpp	/^bool APInt::EqualSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const APInt & RHS) const
APInt::EqualSlowCase	APInt.cpp	/^bool APInt::EqualSlowCase(uint64_t Val) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(uint64_t Val) const
APInt::OrSlowCase	APInt.cpp	/^APInt APInt::OrSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::Profile	APInt.cpp	/^void APInt::Profile(FoldingSetNodeID& ID) const {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(FoldingSetNodeID & ID) const
APInt::XorSlowCase	APInt.cpp	/^APInt APInt::XorSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::ashr	APInt.cpp	/^APInt APInt::ashr(const APInt &shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & shiftAmt) const
APInt::ashr	APInt.cpp	/^APInt APInt::ashr(unsigned shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned shiftAmt) const
APInt::byteSwap	APInt.cpp	/^APInt APInt::byteSwap() const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:() const
APInt::clearBit	APInt.cpp	/^void APInt::clearBit(unsigned bitPosition) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned bitPosition)
APInt::countLeadingOnes	APInt.cpp	/^unsigned APInt::countLeadingOnes() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
APInt::countLeadingZerosSlowCase	APInt.cpp	/^unsigned APInt::countLeadingZerosSlowCase() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
APInt::countPopulationSlowCase	APInt.cpp	/^unsigned APInt::countPopulationSlowCase() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
APInt::countTrailingOnesSlowCase	APInt.cpp	/^unsigned APInt::countTrailingOnesSlowCase() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
APInt::countTrailingZeros	APInt.cpp	/^unsigned APInt::countTrailingZeros() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
APInt::divide	APInt.cpp	/^void APInt::divide(const APInt &LHS, unsigned lhsWords, const APInt &RHS,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & LHS,unsigned lhsWords,const APInt & RHS,unsigned rhsWords,APInt * Quotient,APInt * Remainder)
APInt::dump	APInt.cpp	/^LLVM_DUMP_METHOD void APInt::dump() const {$/;"	kind:f	class:APInt	typeref:typename:LLVM_DUMP_METHOD void	signature:() const
APInt::flipBit	APInt.cpp	/^void APInt::flipBit(unsigned bitPosition) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned bitPosition)
APInt::fromString	APInt.cpp	/^void APInt::fromString(unsigned numbits, StringRef str, uint8_t radix) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned numbits,StringRef str,uint8_t radix)
APInt::getBitsNeeded	APInt.cpp	/^unsigned APInt::getBitsNeeded(StringRef str, uint8_t radix) {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:(StringRef str,uint8_t radix)
APInt::getHiBits	APInt.cpp	/^APInt APInt::getHiBits(unsigned numBits) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned numBits) const
APInt::getLoBits	APInt.cpp	/^APInt APInt::getLoBits(unsigned numBits) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned numBits) const
APInt::initFromArray	APInt.cpp	/^void APInt::initFromArray(ArrayRef<uint64_t> bigVal) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(ArrayRef<uint64_t> bigVal)
APInt::initSlowCase	APInt.cpp	/^void APInt::initSlowCase(const APInt& that) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & that)
APInt::initSlowCase	APInt.cpp	/^void APInt::initSlowCase(uint64_t val, bool isSigned) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(uint64_t val,bool isSigned)
APInt::isSplat	APInt.cpp	/^bool APInt::isSplat(unsigned SplatSizeInBits) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(unsigned SplatSizeInBits) const
APInt::lshr	APInt.cpp	/^APInt APInt::lshr(const APInt &shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & shiftAmt) const
APInt::lshr	APInt.cpp	/^APInt APInt::lshr(unsigned shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned shiftAmt) const
APInt::magic	APInt.cpp	/^APInt::ms APInt::magic() const {$/;"	kind:f	class:APInt	typeref:typename:APInt::ms	signature:() const
APInt::magicu	APInt.cpp	/^APInt::mu APInt::magicu(unsigned LeadingZeros) const {$/;"	kind:f	class:APInt	typeref:typename:APInt::mu	signature:(unsigned LeadingZeros) const
APInt::multiplicativeInverse	APInt.cpp	/^APInt APInt::multiplicativeInverse(const APInt& modulo) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & modulo) const
APInt::operator &=	APInt.cpp	/^APInt& APInt::operator&=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
APInt::operator *	APInt.cpp	/^APInt APInt::operator*(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::operator *=	APInt.cpp	/^APInt& APInt::operator*=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
APInt::operator ++	APInt.cpp	/^APInt& APInt::operator++() {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:()
APInt::operator +=	APInt.cpp	/^APInt& APInt::operator+=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
APInt::operator +=	APInt.cpp	/^APInt& APInt::operator+=(uint64_t RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(uint64_t RHS)
APInt::operator --	APInt.cpp	/^APInt& APInt::operator--() {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:()
APInt::operator -=	APInt.cpp	/^APInt& APInt::operator-=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
APInt::operator -=	APInt.cpp	/^APInt& APInt::operator-=(uint64_t RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(uint64_t RHS)
APInt::operator =	APInt.cpp	/^APInt& APInt::operator=(uint64_t RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(uint64_t RHS)
APInt::operator ^=	APInt.cpp	/^APInt& APInt::operator^=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
APInt::operator |=	APInt.cpp	/^APInt& APInt::operator|=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
APInt::print	APInt.cpp	/^void APInt::print(raw_ostream &OS, bool isSigned) const {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(raw_ostream & OS,bool isSigned) const
APInt::reverseBits	APInt.cpp	/^APInt APInt::reverseBits() const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:() const
APInt::rotl	APInt.cpp	/^APInt APInt::rotl(const APInt &rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & rotateAmt) const
APInt::rotl	APInt.cpp	/^APInt APInt::rotl(unsigned rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned rotateAmt) const
APInt::rotr	APInt.cpp	/^APInt APInt::rotr(const APInt &rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & rotateAmt) const
APInt::rotr	APInt.cpp	/^APInt APInt::rotr(unsigned rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned rotateAmt) const
APInt::roundToDouble	APInt.cpp	/^double APInt::roundToDouble(bool isSigned) const {$/;"	kind:f	class:APInt	typeref:typename:double	signature:(bool isSigned) const
APInt::roundToDouble::__anon56889252020a::D	APInt.cpp	/^    double D;$/;"	kind:m	union:APInt::roundToDouble::__anon56889252020a	typeref:typename:double	file:	access:public
APInt::roundToDouble::__anon56889252020a::I	APInt.cpp	/^    uint64_t I;$/;"	kind:m	union:APInt::roundToDouble::__anon56889252020a	typeref:typename:uint64_t	file:	access:public
APInt::sadd_ov	APInt.cpp	/^APInt APInt::sadd_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
APInt::sdiv	APInt.cpp	/^APInt APInt::sdiv(const APInt &RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::sdiv_ov	APInt.cpp	/^APInt APInt::sdiv_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
APInt::sdivrem	APInt.cpp	/^void APInt::sdivrem(const APInt &LHS, const APInt &RHS,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & LHS,const APInt & RHS,APInt & Quotient,APInt & Remainder)
APInt::setBit	APInt.cpp	/^void APInt::setBit(unsigned bitPosition) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned bitPosition)
APInt::sext	APInt.cpp	/^APInt APInt::sext(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
APInt::sextOrSelf	APInt.cpp	/^APInt APInt::sextOrSelf(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
APInt::sextOrTrunc	APInt.cpp	/^APInt APInt::sextOrTrunc(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
APInt::shl	APInt.cpp	/^APInt APInt::shl(const APInt &shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & shiftAmt) const
APInt::shlSlowCase	APInt.cpp	/^APInt APInt::shlSlowCase(unsigned shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned shiftAmt) const
APInt::slt	APInt.cpp	/^bool APInt::slt(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const APInt & RHS) const
APInt::smul_ov	APInt.cpp	/^APInt APInt::smul_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
APInt::sqrt	APInt.cpp	/^APInt APInt::sqrt() const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:() const
APInt::srem	APInt.cpp	/^APInt APInt::srem(const APInt &RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::sshl_ov	APInt.cpp	/^APInt APInt::sshl_ov(const APInt &ShAmt, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & ShAmt,bool & Overflow) const
APInt::ssub_ov	APInt.cpp	/^APInt APInt::ssub_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
APInt::tcAdd	APInt.cpp	/^APInt::tcAdd(integerPart *dst, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,const integerPart * rhs,integerPart c,unsigned int parts)
APInt::tcAnd	APInt.cpp	/^APInt::tcAnd(integerPart *dst, const integerPart *rhs, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * rhs,unsigned int parts)
APInt::tcAssign	APInt.cpp	/^APInt::tcAssign(integerPart *dst, const integerPart *src, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * src,unsigned int parts)
APInt::tcClearBit	APInt.cpp	/^APInt::tcClearBit(integerPart *parts, unsigned int bit)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * parts,unsigned int bit)
APInt::tcCompare	APInt.cpp	/^APInt::tcCompare(const integerPart *lhs, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(const integerPart * lhs,const integerPart * rhs,unsigned int parts)
APInt::tcComplement	APInt.cpp	/^APInt::tcComplement(integerPart *dst, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts)
APInt::tcDecrement	APInt.cpp	/^APInt::tcDecrement(integerPart *dst, unsigned int parts) {$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,unsigned int parts)
APInt::tcDivide	APInt.cpp	/^APInt::tcDivide(integerPart *lhs, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(integerPart * lhs,const integerPart * rhs,integerPart * remainder,integerPart * srhs,unsigned int parts)
APInt::tcExtract	APInt.cpp	/^APInt::tcExtract(integerPart *dst, unsigned int dstCount,const integerPart *src,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int dstCount,const integerPart * src,unsigned int srcBits,unsigned int srcLSB)
APInt::tcExtractBit	APInt.cpp	/^APInt::tcExtractBit(const integerPart *parts, unsigned int bit)$/;"	kind:f	class:APInt	typeref:typename:int	signature:(const integerPart * parts,unsigned int bit)
APInt::tcFullMultiply	APInt.cpp	/^APInt::tcFullMultiply(integerPart *dst, const integerPart *lhs,$/;"	kind:f	class:APInt	typeref:typename:unsigned int	signature:(integerPart * dst,const integerPart * lhs,const integerPart * rhs,unsigned int lhsParts,unsigned int rhsParts)
APInt::tcIncrement	APInt.cpp	/^APInt::tcIncrement(integerPart *dst, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,unsigned int parts)
APInt::tcIsZero	APInt.cpp	/^APInt::tcIsZero(const integerPart *src, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const integerPart * src,unsigned int parts)
APInt::tcLSB	APInt.cpp	/^APInt::tcLSB(const integerPart *parts, unsigned int n)$/;"	kind:f	class:APInt	typeref:typename:unsigned int	signature:(const integerPart * parts,unsigned int n)
APInt::tcMSB	APInt.cpp	/^APInt::tcMSB(const integerPart *parts, unsigned int n)$/;"	kind:f	class:APInt	typeref:typename:unsigned int	signature:(const integerPart * parts,unsigned int n)
APInt::tcMultiply	APInt.cpp	/^APInt::tcMultiply(integerPart *dst, const integerPart *lhs,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(integerPart * dst,const integerPart * lhs,const integerPart * rhs,unsigned int parts)
APInt::tcMultiplyPart	APInt.cpp	/^APInt::tcMultiplyPart(integerPart *dst, const integerPart *src,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(integerPart * dst,const integerPart * src,integerPart multiplier,integerPart carry,unsigned int srcParts,unsigned int dstParts,bool add)
APInt::tcNegate	APInt.cpp	/^APInt::tcNegate(integerPart *dst, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts)
APInt::tcOr	APInt.cpp	/^APInt::tcOr(integerPart *dst, const integerPart *rhs, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * rhs,unsigned int parts)
APInt::tcSet	APInt.cpp	/^APInt::tcSet(integerPart *dst, integerPart part, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,integerPart part,unsigned int parts)
APInt::tcSetBit	APInt.cpp	/^APInt::tcSetBit(integerPart *parts, unsigned int bit)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * parts,unsigned int bit)
APInt::tcSetLeastSignificantBits	APInt.cpp	/^APInt::tcSetLeastSignificantBits(integerPart *dst, unsigned int parts,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts,unsigned int bits)
APInt::tcShiftLeft	APInt.cpp	/^APInt::tcShiftLeft(integerPart *dst, unsigned int parts, unsigned int count)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts,unsigned int count)
APInt::tcShiftRight	APInt.cpp	/^APInt::tcShiftRight(integerPart *dst, unsigned int parts, unsigned int count)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts,unsigned int count)
APInt::tcSubtract	APInt.cpp	/^APInt::tcSubtract(integerPart *dst, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,const integerPart * rhs,integerPart c,unsigned int parts)
APInt::tcXor	APInt.cpp	/^APInt::tcXor(integerPart *dst, const integerPart *rhs, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * rhs,unsigned int parts)
APInt::toString	APInt.cpp	/^std::string APInt::toString(unsigned Radix = 10, bool Signed = true) const {$/;"	kind:f	class:APInt	typeref:typename:std::string	signature:(unsigned Radix=10,bool Signed=true) const
APInt::toString	APInt.cpp	/^void APInt::toString(SmallVectorImpl<char> &Str, unsigned Radix,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(SmallVectorImpl<char> & Str,unsigned Radix,bool Signed,bool formatAsCLiteral) const
APInt::trunc	APInt.cpp	/^APInt APInt::trunc(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
APInt::uadd_ov	APInt.cpp	/^APInt APInt::uadd_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
APInt::udiv	APInt.cpp	/^APInt APInt::udiv(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::udivrem	APInt.cpp	/^void APInt::udivrem(const APInt &LHS, const APInt &RHS,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & LHS,const APInt & RHS,APInt & Quotient,APInt & Remainder)
APInt::ult	APInt.cpp	/^bool APInt::ult(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const APInt & RHS) const
APInt::umul_ov	APInt.cpp	/^APInt APInt::umul_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
APInt::urem	APInt.cpp	/^APInt APInt::urem(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
APInt::ushl_ov	APInt.cpp	/^APInt APInt::ushl_ov(const APInt &ShAmt, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & ShAmt,bool & Overflow) const
APInt::usub_ov	APInt.cpp	/^APInt APInt::usub_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
APInt::zext	APInt.cpp	/^APInt APInt::zext(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
APInt::zextOrSelf	APInt.cpp	/^APInt APInt::zextOrSelf(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
APInt::zextOrTrunc	APInt.cpp	/^APInt APInt::zextOrTrunc(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
APSInt	APSInt.cpp	/^APSInt::APSInt(StringRef Str) {$/;"	kind:f	class:APSInt	signature:(StringRef Str)
APSInt::APSInt	APSInt.cpp	/^APSInt::APSInt(StringRef Str) {$/;"	kind:f	class:APSInt	signature:(StringRef Str)
APSInt::Profile	APSInt.cpp	/^void APSInt::Profile(FoldingSetNodeID& ID) const {$/;"	kind:f	class:APSInt	typeref:typename:void	signature:(FoldingSetNodeID & ID) const
ARCHNames	TargetParser.cpp	/^ArchNames<ARM::ArchKind> ARCHNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:ArchNames<ARM::ArchKind>[]
ARM	ARMWinEH.cpp	/^namespace ARM {$/;"	kind:n	namespace:llvm	file:
ARMBuildAttrs	ARMBuildAttrs.cpp	/^namespace ARMBuildAttrs {$/;"	kind:n	namespace:llvm	file:
ARM_ARCH	TargetParser.cpp	/^#define ARM_ARCH(/;"	kind:d	file:	signature:(NAME,ID,CPU_ATTR,SUB_ARCH,ARCH_ATTR,ARCH_FPU,ARCH_BASE_EXT)
ARM_ARCH_EXT_NAME	TargetParser.cpp	/^#define ARM_ARCH_EXT_NAME(/;"	kind:d	file:	signature:(NAME,ID,FEATURE,NEGFEATURE)
ARM_CPU_NAME	TargetParser.cpp	/^#define ARM_CPU_NAME(/;"	kind:d	file:	signature:(NAME,ID,DEFAULT_FPU,IS_DEFAULT,DEFAULT_EXT)
ARM_FPU	TargetParser.cpp	/^#define ARM_FPU(/;"	kind:d	file:	signature:(NAME,KIND,VERSION,NEON_SUPPORT,RESTRICTION)
ARM_HW_DIV_NAME	TargetParser.cpp	/^#define ARM_HW_DIV_NAME(/;"	kind:d	file:	signature:(NAME,ID)
ASSIGN	regexec.c	/^#define	ASSIGN(/;"	kind:d	file:	signature:(d,s)
ASTERN	regcomp.c	/^#define	ASTERN(/;"	kind:d	file:	signature:(sop,pos)
AccessibilityString	Dwarf.cpp	/^StringRef llvm::dwarf::AccessibilityString(unsigned Access) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Access)
ActiveSubCommand	CommandLine.cpp	/^  SubCommand *ActiveSubCommand;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SubCommand *	file:	access:private
AddExtraVersionPrinter	CommandLine.cpp	/^void cl::AddExtraVersionPrinter(void (*func)()) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(void (* func)())
AddIncludeFile	SourceMgr.cpp	/^unsigned SourceMgr::AddIncludeFile(const std::string &Filename,$/;"	kind:f	class:SourceMgr	typeref:typename:unsigned	signature:(const std::string & Filename,SMLoc IncludeLoc,std::string & IncludedFile)
AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(long I)
AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(long long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(long long I)
AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(signed I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(signed I)
AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(unsigned I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(unsigned I)
AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(unsigned long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(unsigned long I)
AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(unsigned long long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(unsigned long long I)
AddLiteralOption	CommandLine.cpp	/^void cl::AddLiteralOption(Option &O, StringRef Name) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(Option & O,StringRef Name)
AddNodeID	FoldingSet.cpp	/^void FoldingSetNodeID::AddNodeID(const FoldingSetNodeID &ID) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(const FoldingSetNodeID & ID)
AddPointer	FoldingSet.cpp	/^void FoldingSetNodeID::AddPointer(const void *Ptr) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(const void * Ptr)
AddString	FoldingSet.cpp	/^void FoldingSetNodeID::AddString(StringRef String) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(StringRef String)
AddSymbol	DynamicLibrary.cpp	/^void llvm::sys::DynamicLibrary::AddSymbol(StringRef symbolName,$/;"	kind:f	class:llvm::sys::DynamicLibrary	typeref:typename:void	signature:(StringRef symbolName,void * symbolValue)
AdjustToPrecision	APFloat.cpp	/^  void AdjustToPrecision(APInt &significand,$/;"	kind:f	namespace:llvm::detail::__anondc20a17d0110	typeref:typename:void	signature:(APInt & significand,int & exp,unsigned FormatPrecision)
AdjustToPrecision	APFloat.cpp	/^  void AdjustToPrecision(SmallVectorImpl<char> &buffer,$/;"	kind:f	namespace:llvm::detail::__anondc20a17d0110	typeref:typename:void	signature:(SmallVectorImpl<char> & buffer,int & exp,unsigned FormatPrecision)
AllSubCommands	CommandLine.cpp	/^ManagedStatic<SubCommand> llvm::cl::AllSubCommands;$/;"	kind:m	class:llvm::cl	typeref:typename:ManagedStatic<SubCommand>
AllocateBuckets	FoldingSet.cpp	/^static void **AllocateBuckets(unsigned NumBuckets) {$/;"	kind:f	typeref:typename:void **	file:	signature:(unsigned NumBuckets)
AndSlowCase	APInt.cpp	/^APInt APInt::AndSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
ApplePropertyString	Dwarf.cpp	/^StringRef llvm::dwarf::ApplePropertyString(unsigned Prop) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Prop)
ArchAttr	TargetParser.cpp	/^  ARMBuildAttrs::CPUArch ArchAttr; \/\/ Arch ID in build attributes.$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:ARMBuildAttrs::CPUArch	file:	access:public
ArchBaseExtensions	TargetParser.cpp	/^  unsigned ArchBaseExtensions;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:unsigned	file:	access:public
ArchID	TargetParser.cpp	/^  T ArchID;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:T	file:	access:public
ArchNames	TargetParser.cpp	/^template <typename T> struct ArchNames {$/;"	kind:s	namespace:__anond11a194a0110	file:
AreCoreFilesPrevented	Process.cpp	/^bool Process::AreCoreFilesPrevented() {$/;"	kind:f	class:Process	typeref:typename:bool	signature:()
AreStatisticsEnabled	Statistic.cpp	/^bool llvm::AreStatisticsEnabled() {$/;"	kind:f	class:llvm	typeref:typename:bool	signature:()
ArrayOrderString	Dwarf.cpp	/^StringRef llvm::dwarf::ArrayOrderString(unsigned Order) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Order)
AssignSlowCase	APInt.cpp	/^APInt& APInt::AssignSlowCase(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
AtomTypeString	Dwarf.cpp	/^StringRef llvm::dwarf::AtomTypeString(unsigned AT) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned AT)
Attr	ARMBuildAttrs.cpp	/^  ARMBuildAttrs::AttrType Attr;$/;"	kind:m	struct:__anond31545540110::__anond31545540208	typeref:typename:ARMBuildAttrs::AttrType	file:	access:public
AttrTypeAsString	ARMBuildAttrs.cpp	/^StringRef AttrTypeAsString(AttrType Attr, bool HasTagPrefix) {$/;"	kind:f	namespace:llvm::ARMBuildAttrs	typeref:typename:StringRef	signature:(AttrType Attr,bool HasTagPrefix)
AttrTypeAsString	ARMBuildAttrs.cpp	/^StringRef AttrTypeAsString(unsigned Attr, bool HasTagPrefix) {$/;"	kind:f	namespace:llvm::ARMBuildAttrs	typeref:typename:StringRef	signature:(unsigned Attr,bool HasTagPrefix)
AttrTypeFromString	ARMBuildAttrs.cpp	/^int AttrTypeFromString(StringRef Tag) {$/;"	kind:f	namespace:llvm::ARMBuildAttrs	typeref:typename:int	signature:(StringRef Tag)
AttributeEncodingString	Dwarf.cpp	/^StringRef llvm::dwarf::AttributeEncodingString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
AttributeString	Dwarf.cpp	/^StringRef llvm::dwarf::AttributeString(unsigned Attribute) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Attribute)
AttributeValueString	Dwarf.cpp	/^StringRef llvm::dwarf::AttributeValueString(uint16_t Attr, unsigned Val) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(uint16_t Attr,unsigned Val)
BACK	regexec.c	/^#define	BACK(/;"	kind:d	file:	signature:(dst,src,n)
BACKSL	regcomp.c	/^#	define	BACKSL	/;"	kind:d	file:
BackupNumber	FileUtilities.cpp	/^static const char *BackupNumber(const char *Pos, const char *FirstChar) {$/;"	kind:f	typeref:typename:const char *	file:	signature:(const char * Pos,const char * FirstChar)
BlockFrequency::operator *	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator*(BranchProbability Prob) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BranchProbability Prob) const
BlockFrequency::operator *=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator*=(BranchProbability Prob) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BranchProbability Prob)
BlockFrequency::operator +	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator+(BlockFrequency Freq) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BlockFrequency Freq) const
BlockFrequency::operator +=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator+=(BlockFrequency Freq) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BlockFrequency Freq)
BlockFrequency::operator -	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator-(BlockFrequency Freq) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BlockFrequency Freq) const
BlockFrequency::operator -=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator-=(BlockFrequency Freq) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BlockFrequency Freq)
BlockFrequency::operator /	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator\/(BranchProbability Prob) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BranchProbability Prob) const
BlockFrequency::operator /=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator\/=(BranchProbability Prob) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BranchProbability Prob)
BlockFrequency::operator >>=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator>>=(const unsigned count) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(const unsigned count)
Bogus	APFloat.cpp	/^  const fltSemantics APFloatBase::Bogus = {0, 0, 0, 0};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
BranchProbability	BranchProbability.cpp	/^BranchProbability::BranchProbability(uint32_t Numerator, uint32_t Denominator) {$/;"	kind:f	class:BranchProbability	signature:(uint32_t Numerator,uint32_t Denominator)
BranchProbability::BranchProbability	BranchProbability.cpp	/^BranchProbability::BranchProbability(uint32_t Numerator, uint32_t Denominator) {$/;"	kind:f	class:BranchProbability	signature:(uint32_t Numerator,uint32_t Denominator)
BranchProbability::D	BranchProbability.cpp	/^const uint32_t BranchProbability::D;$/;"	kind:m	class:BranchProbability	typeref:typename:const uint32_t
BranchProbability::dump	BranchProbability.cpp	/^LLVM_DUMP_METHOD void BranchProbability::dump() const { print(dbgs()) << '\\n'; }$/;"	kind:f	class:BranchProbability	typeref:typename:LLVM_DUMP_METHOD void	signature:() const
BranchProbability::getBranchProbability	BranchProbability.cpp	/^BranchProbability::getBranchProbability(uint64_t Numerator,$/;"	kind:f	class:BranchProbability	typeref:typename:BranchProbability	signature:(uint64_t Numerator,uint64_t Denominator)
BranchProbability::print	BranchProbability.cpp	/^raw_ostream &BranchProbability::print(raw_ostream &OS) const {$/;"	kind:f	class:BranchProbability	typeref:typename:raw_ostream &	signature:(raw_ostream & OS) const
BranchProbability::scale	BranchProbability.cpp	/^uint64_t BranchProbability::scale(uint64_t Num) const {$/;"	kind:f	class:BranchProbability	typeref:typename:uint64_t	signature:(uint64_t Num) const
BranchProbability::scaleByInverse	BranchProbability.cpp	/^uint64_t BranchProbability::scaleByInverse(uint64_t Num) const {$/;"	kind:f	class:BranchProbability	typeref:typename:uint64_t	signature:(uint64_t Num) const
CAP_AES	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
CAP_PMULL	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
CAP_SHA1	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
CAP_SHA2	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
CHIN	regex2.h	/^#define	CHIN(/;"	kind:d	signature:(cs,c)
CHadd	regex2.h	/^#define	CHadd(/;"	kind:d	signature:(cs,c)
CHsub	regex2.h	/^#define	CHsub(/;"	kind:d	signature:(cs,c)
CLEAR	regexec.c	/^#define	CLEAR(/;"	kind:d	file:	signature:(v)
COLOR	Process.cpp	/^#define COLOR(/;"	kind:d	file:	signature:(FGBG,CODE,BOLD)
CPUAttrCStr	TargetParser.cpp	/^  const char *CPUAttrCStr;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:const char *	file:	access:public
CPUAttrLength	TargetParser.cpp	/^  size_t CPUAttrLength;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:size_t	file:	access:public
CPUNames	TargetParser.cpp	/^CpuNames<ARM::ArchKind> CPUNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:CpuNames<ARM::ArchKind>[]
CPU_SUBTYPE_MAX	Host.cpp	/^  CPU_SUBTYPE_MAX$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
CPU_TYPE_MAX	Host.cpp	/^  CPU_TYPE_MAX$/;"	kind:e	enum:ProcessorTypes	file:	access:public
CRC	CrashRecoveryContext.cpp	/^  CrashRecoveryContext *CRC;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:CrashRecoveryContext *	file:	access:public
CRC	CrashRecoveryContext.cpp	/^  CrashRecoveryContext *CRC;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:CrashRecoveryContext *	file:	access:public
CRCTable	JamCRC.cpp	/^static const uint32_t CRCTable[256] = {$/;"	kind:v	typeref:typename:const uint32_t[256]	file:
CachePruning::prune	CachePruning.cpp	/^bool CachePruning::prune() {$/;"	kind:f	class:CachePruning	typeref:typename:bool	signature:()
CallBacksToRun	Signals.cpp	/^    CallBacksToRun;$/;"	kind:v	namespace:llvm	typeref:typename:ManagedStatic<std::vector<std::pair<void (*)(void *),void * >>>	file:
CallFrameString	Dwarf.cpp	/^StringRef llvm::dwarf::CallFrameString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
CaseString	Dwarf.cpp	/^StringRef llvm::dwarf::CaseString(unsigned Case) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Case)
CategorizedHelpPrinter	CommandLine.cpp	/^  explicit CategorizedHelpPrinter(bool showHidden) : HelpPrinter(showHidden) {}$/;"	kind:f	class:__anon2c11109d0510::CategorizedHelpPrinter	file:	access:public	signature:(bool showHidden)
CategorizedHelpPrinter	CommandLine.cpp	/^class CategorizedHelpPrinter : public HelpPrinter {$/;"	kind:c	namespace:__anon2c11109d0510	file:	inherits:HelpPrinter
CategorizedHiddenPrinter	CommandLine.cpp	/^static CategorizedHelpPrinter CategorizedHiddenPrinter(true);$/;"	kind:p	typeref:typename:CategorizedHelpPrinter	file:	signature:(true)
CategorizedNormalPrinter	CommandLine.cpp	/^static CategorizedHelpPrinter CategorizedNormalPrinter(false);$/;"	kind:p	typeref:typename:CategorizedHelpPrinter	file:	signature:(false)
CategorizedPrinter	CommandLine.cpp	/^  CategorizedHelpPrinter &CategorizedPrinter;$/;"	kind:m	class:__anon2c11109d0510::HelpPrinterWrapper	typeref:typename:CategorizedHelpPrinter &	file:	access:private
CheckBitcodeOutputToConsole	SystemUtils.cpp	/^bool llvm::CheckBitcodeOutputToConsole(raw_ostream &stream_to_check,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(raw_ostream & stream_to_check,bool print_warning)
ChildrenString	Dwarf.cpp	/^StringRef llvm::dwarf::ChildrenString(unsigned Children) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Children)
CleanupInstaller	ToolOutputFile.cpp	/^tool_output_file::CleanupInstaller::CleanupInstaller(StringRef Filename)$/;"	kind:f	class:tool_output_file::CleanupInstaller	signature:(StringRef Filename)
Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:CommonHandleTraits	typeref:typename:void	access:public	signature:(handle_type h)
Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:CryptContextTraits	typeref:typename:void	access:public	signature:(handle_type h)
Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:FindHandleTraits	typeref:typename:void	access:public	signature:(handle_type h)
Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:RegTraits	typeref:typename:void	access:public	signature:(handle_type h)
Column	YAMLParser.cpp	/^  unsigned Column;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private
Column	YAMLParser.cpp	/^  unsigned Column;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:unsigned	file:	access:public
CommaSeparateAndAddOccurrence	CommandLine.cpp	/^static bool CommaSeparateAndAddOccurrence(Option *Handler, unsigned pos,$/;"	kind:f	typeref:typename:bool	file:	signature:(Option * Handler,unsigned pos,StringRef ArgName,StringRef Value,bool MultiArg=false)
CommandLineParser	CommandLine.cpp	/^  CommandLineParser() : ActiveSubCommand(nullptr) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	file:	access:public	signature:()
CommandLineParser	CommandLine.cpp	/^class CommandLineParser {$/;"	kind:c	namespace:__anon2c11109d0110	file:
CommandLineParser::LookupOption	CommandLine.cpp	/^Option *CommandLineParser::LookupOption(SubCommand &Sub, StringRef &Arg,$/;"	kind:f	class:CommandLineParser	typeref:typename:Option *	signature:(SubCommand & Sub,StringRef & Arg,StringRef & Value)
CommandLineParser::LookupSubCommand	CommandLine.cpp	/^SubCommand *CommandLineParser::LookupSubCommand(StringRef Name) {$/;"	kind:f	class:CommandLineParser	typeref:typename:SubCommand *	signature:(StringRef Name)
CommandLineParser::ParseCommandLineOptions	CommandLine.cpp	/^bool CommandLineParser::ParseCommandLineOptions(int argc,$/;"	kind:f	class:CommandLineParser	typeref:typename:bool	signature:(int argc,const char * const * argv,StringRef Overview,bool IgnoreErrors)
CommandLineParser::ResetAllOptionOccurrences	CommandLine.cpp	/^void CommandLineParser::ResetAllOptionOccurrences() {$/;"	kind:f	class:CommandLineParser	typeref:typename:void	signature:()
CommandLineParser::printOptionValues	CommandLine.cpp	/^void CommandLineParser::printOptionValues() {$/;"	kind:f	class:CommandLineParser	typeref:typename:void	signature:()
CommonHandleTraits	Windows/WindowsSupport.h	/^struct CommonHandleTraits {$/;"	kind:s
CommonHandleTraits::Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:CommonHandleTraits	typeref:typename:void	access:public	signature:(handle_type h)
CommonHandleTraits::GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:CommonHandleTraits	typeref:typename:handle_type	access:public	signature:()
CommonHandleTraits::IsValid	Windows/WindowsSupport.h	/^  static bool IsValid(handle_type h) {$/;"	kind:f	struct:CommonHandleTraits	typeref:typename:bool	access:public	signature:(handle_type h)
CommonHandleTraits::handle_type	Windows/WindowsSupport.h	/^  typedef HANDLE handle_type;$/;"	kind:t	struct:CommonHandleTraits	typeref:typename:HANDLE	access:public
CompareAndSwap	Atomic.cpp	/^sys::cas_flag sys::CompareAndSwap(volatile sys::cas_flag* ptr,$/;"	kind:f	class:sys	typeref:typename:sys::cas_flag	signature:(volatile sys::cas_flag * ptr,sys::cas_flag new_value,sys::cas_flag old_value)
CompareNumbers	FileUtilities.cpp	/^static bool CompareNumbers(const char *&F1P, const char *&F2P,$/;"	kind:f	typeref:typename:bool	file:	signature:(const char * & F1P,const char * & F2P,const char * F1End,const char * F2End,double AbsTolerance,double RelTolerance,std::string * ErrorMsg)
ComputeHash	FoldingSet.cpp	/^unsigned FoldingSetNodeID::ComputeHash() const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:unsigned	signature:() const
ComputeHash	FoldingSet.cpp	/^unsigned FoldingSetNodeIDRef::ComputeHash() const {$/;"	kind:f	class:FoldingSetNodeIDRef	typeref:typename:unsigned	signature:() const
ComputePosition	FormattedStream.cpp	/^void formatted_raw_ostream::ComputePosition(const char *Ptr, size_t Size) {$/;"	kind:f	class:formatted_raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
ConstructTimerLists	Timer.cpp	/^void TimerGroup::ConstructTimerLists() {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:()
ConventionString	Dwarf.cpp	/^StringRef llvm::dwarf::ConventionString(unsigned CC) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned CC)
ConvertCodePointToUTF8	ConvertUTFWrapper.cpp	/^bool ConvertCodePointToUTF8(unsigned Source, char *&ResultPtr) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(unsigned Source,char * & ResultPtr)
ConvertUTF16toUTF32	ConvertUTF.cpp	/^ConversionResult ConvertUTF16toUTF32 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF16 ** sourceStart,const UTF16 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags)
ConvertUTF16toUTF8	ConvertUTF.cpp	/^ConversionResult ConvertUTF16toUTF8 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF16 ** sourceStart,const UTF16 * sourceEnd,UTF8 ** targetStart,UTF8 * targetEnd,ConversionFlags flags)
ConvertUTF32toUTF16	ConvertUTF.cpp	/^ConversionResult ConvertUTF32toUTF16 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF32 ** sourceStart,const UTF32 * sourceEnd,UTF16 ** targetStart,UTF16 * targetEnd,ConversionFlags flags)
ConvertUTF32toUTF8	ConvertUTF.cpp	/^ConversionResult ConvertUTF32toUTF8 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF32 ** sourceStart,const UTF32 * sourceEnd,UTF8 ** targetStart,UTF8 * targetEnd,ConversionFlags flags)
ConvertUTF8toUTF16	ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF16 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF16 ** targetStart,UTF16 * targetEnd,ConversionFlags flags)
ConvertUTF8toUTF32	ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF32(const UTF8 **sourceStart,$/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags)
ConvertUTF8toUTF32Impl	ConvertUTF.cpp	/^static ConversionResult ConvertUTF8toUTF32Impl($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	file:	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags,Boolean InputIsPartial)
ConvertUTF8toUTF32Partial	ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF32Partial(const UTF8 **sourceStart,$/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags)
ConvertUTF8toWide	ConvertUTFWrapper.cpp	/^bool ConvertUTF8toWide(const char *Source, std::wstring &Result) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(const char * Source,std::wstring & Result)
ConvertUTF8toWide	ConvertUTFWrapper.cpp	/^bool ConvertUTF8toWide(llvm::StringRef Source, std::wstring &Result) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(llvm::StringRef Source,std::wstring & Result)
ConvertUTF8toWide	ConvertUTFWrapper.cpp	/^bool ConvertUTF8toWide(unsigned WideCharWidth, llvm::StringRef Source,$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(unsigned WideCharWidth,llvm::StringRef Source,char * & ResultPtr,const UTF8 * & ErrorPtr)
ConvertUTF8toWideInternal	ConvertUTFWrapper.cpp	/^static inline bool ConvertUTF8toWideInternal(llvm::StringRef Source,$/;"	kind:f	namespace:llvm	typeref:typename:bool	file:	signature:(llvm::StringRef Source,TResult & Result)
CopyFrom	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::CopyFrom(const SmallPtrSetImplBase &RHS) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(const SmallPtrSetImplBase & RHS)
CopyHelper	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::CopyHelper(const SmallPtrSetImplBase &RHS) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(const SmallPtrSetImplBase & RHS)
CopyStringRef	MemoryBuffer.cpp	/^static void CopyStringRef(char *Memory, StringRef Data) {$/;"	kind:f	typeref:typename:void	file:	signature:(char * Memory,StringRef Data)
CpuNames	TargetParser.cpp	/^template <typename T> struct CpuNames {$/;"	kind:s	namespace:__anond11a194a0110	file:
CrashHandler	PrettyStackTrace.cpp	/^static void CrashHandler(void *) {$/;"	kind:f	typeref:typename:void	file:	signature:(void *)
CrashRecoveryContext::Disable	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::Disable() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:()
CrashRecoveryContext::Enable	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::Enable() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:()
CrashRecoveryContext::GetCurrent	CrashRecoveryContext.cpp	/^CrashRecoveryContext *CrashRecoveryContext::GetCurrent() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:CrashRecoveryContext *	signature:()
CrashRecoveryContext::HandleCrash	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::HandleCrash() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:()
CrashRecoveryContext::RunSafely	CrashRecoveryContext.cpp	/^bool CrashRecoveryContext::RunSafely(function_ref<void()> Fn) {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:bool	signature:(function_ref<void ()> Fn)
CrashRecoveryContext::RunSafelyOnThread	CrashRecoveryContext.cpp	/^bool CrashRecoveryContext::RunSafelyOnThread(function_ref<void()> Fn,$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:bool	signature:(function_ref<void ()> Fn,unsigned RequestedStackSize)
CrashRecoveryContext::isRecoveringFromCrash	CrashRecoveryContext.cpp	/^bool CrashRecoveryContext::isRecoveringFromCrash() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:bool	signature:()
CrashRecoveryContext::registerCleanup	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::registerCleanup(CrashRecoveryContextCleanup *cleanup)$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:(CrashRecoveryContextCleanup * cleanup)
CrashRecoveryContext::unregisterCleanup	CrashRecoveryContext.cpp	/^CrashRecoveryContext::unregisterCleanup(CrashRecoveryContextCleanup *cleanup) {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:(CrashRecoveryContextCleanup * cleanup)
CrashRecoveryContext::~CrashRecoveryContext	CrashRecoveryContext.cpp	/^CrashRecoveryContext::~CrashRecoveryContext() {$/;"	kind:f	class:CrashRecoveryContext	signature:()
CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup	CrashRecoveryContext.cpp	/^CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup() {}$/;"	kind:f	class:CrashRecoveryContextCleanup	signature:()
CrashRecoveryContextImpl	CrashRecoveryContext.cpp	/^  CrashRecoveryContextImpl(CrashRecoveryContext *CRC) : CRC(CRC),$/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	file:	access:public	signature:(CrashRecoveryContext * CRC)
CrashRecoveryContextImpl	CrashRecoveryContext.cpp	/^struct CrashRecoveryContextImpl {$/;"	kind:s	namespace:__anon80fe52fb0110	file:
CrashRecoverySignalHandler	CrashRecoveryContext.cpp	/^static void CrashRecoverySignalHandler(int Signal) {$/;"	kind:f	typeref:typename:void	file:	signature:(int Signal)
CreateInfoOutputFile	Timer.cpp	/^std::unique_ptr<raw_fd_ostream> llvm::CreateInfoOutputFile() {$/;"	kind:f	class:llvm	typeref:typename:std::unique_ptr<raw_fd_ostream>	signature:()
CryptContextTraits	Windows/WindowsSupport.h	/^struct CryptContextTraits : CommonHandleTraits {$/;"	kind:s	inherits:CommonHandleTraits
CryptContextTraits::Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:CryptContextTraits	typeref:typename:void	access:public	signature:(handle_type h)
CryptContextTraits::GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:CryptContextTraits	typeref:typename:handle_type	access:public	signature:()
CryptContextTraits::IsValid	Windows/WindowsSupport.h	/^  static bool IsValid(handle_type h) {$/;"	kind:f	struct:CryptContextTraits	typeref:typename:bool	access:public	signature:(handle_type h)
CryptContextTraits::handle_type	Windows/WindowsSupport.h	/^  typedef HCRYPTPROV handle_type;$/;"	kind:t	struct:CryptContextTraits	typeref:typename:HCRYPTPROV	access:public
Current	YAMLParser.cpp	/^  StringRef::iterator Current;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private
CurrentContext	CrashRecoveryContext.cpp	/^    sys::ThreadLocal<const CrashRecoveryContextImpl> > CurrentContext;$/;"	kind:v	namespace:__anon80fe52fb0110	typeref:typename:ManagedStatic<sys::ThreadLocal<const CrashRecoveryContextImpl>>	file:
CurrentDebugType	Debug.cpp	/^static ManagedStatic<std::vector<std::string>> CurrentDebugType;$/;"	kind:v	namespace:llvm	typeref:typename:ManagedStatic<std::vector<std::string>>	file:
D	APInt.cpp	/^    double D;$/;"	kind:m	union:APInt::roundToDouble::__anon56889252020a	typeref:typename:double	file:	access:public
D	APInt.cpp	/^    double D;$/;"	kind:m	union:llvm::APIntOps::RoundDoubleToAPInt::__anon56889252010a	typeref:typename:double	file:	access:public
D	BranchProbability.cpp	/^const uint32_t BranchProbability::D;$/;"	kind:m	class:BranchProbability	typeref:typename:const uint32_t
DAGDeltaAlgorithm::Run	DAGDeltaAlgorithm.cpp	/^DAGDeltaAlgorithm::Run(const changeset_ty &Changes,$/;"	kind:f	class:DAGDeltaAlgorithm	typeref:typename:DAGDeltaAlgorithm::changeset_ty	signature:(const changeset_ty & Changes,const std::vector<edge_ty> & Dependencies)
DAGDeltaAlgorithm::anchor	DAGDeltaAlgorithm.cpp	/^void DAGDeltaAlgorithm::anchor() {$/;"	kind:f	class:DAGDeltaAlgorithm	typeref:typename:void	signature:()
DAGDeltaAlgorithmImpl	DAGDeltaAlgorithm.cpp	/^  DAGDeltaAlgorithmImpl(DAGDeltaAlgorithm &DDA, const changeset_ty &Changes,$/;"	kind:p	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	file:	access:public	signature:(DAGDeltaAlgorithm & DDA,const changeset_ty & Changes,const std::vector<edge_ty> & Dependencies)
DAGDeltaAlgorithmImpl	DAGDeltaAlgorithm.cpp	/^DAGDeltaAlgorithmImpl::DAGDeltaAlgorithmImpl($/;"	kind:f	class:DAGDeltaAlgorithmImpl	signature:(DAGDeltaAlgorithm & DDA,const changeset_ty & Changes,const std::vector<edge_ty> & Dependencies)
DAGDeltaAlgorithmImpl	DAGDeltaAlgorithm.cpp	/^class DAGDeltaAlgorithmImpl {$/;"	kind:c	namespace:__anon664fcfb30110	file:
DAGDeltaAlgorithmImpl::DAGDeltaAlgorithmImpl	DAGDeltaAlgorithm.cpp	/^DAGDeltaAlgorithmImpl::DAGDeltaAlgorithmImpl($/;"	kind:f	class:DAGDeltaAlgorithmImpl	signature:(DAGDeltaAlgorithm & DDA,const changeset_ty & Changes,const std::vector<edge_ty> & Dependencies)
DAGDeltaAlgorithmImpl::GetTestResult	DAGDeltaAlgorithm.cpp	/^bool DAGDeltaAlgorithmImpl::GetTestResult(const changeset_ty &Changes,$/;"	kind:f	class:DAGDeltaAlgorithmImpl	typeref:typename:bool	signature:(const changeset_ty & Changes,const changeset_ty & Required)
DAGDeltaAlgorithmImpl::Run	DAGDeltaAlgorithm.cpp	/^DAGDeltaAlgorithmImpl::Run() {$/;"	kind:f	class:DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::changeset_ty	signature:()
DDA	DAGDeltaAlgorithm.cpp	/^  DAGDeltaAlgorithm &DDA;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm &	file:	access:private
DDAI	DAGDeltaAlgorithm.cpp	/^  DAGDeltaAlgorithmImpl &DDAI;$/;"	kind:m	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:DAGDeltaAlgorithmImpl &	file:	access:private
DEBUG_TYPE	APInt.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	CachePruning.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	CommandLine.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	DAGDeltaAlgorithm.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	Host.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	RandomNumberGenerator.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DONT_GET_PLUGIN_LOADER_OPTION	PluginLoader.cpp	/^#define DONT_GET_PLUGIN_LOADER_OPTION$/;"	kind:d	file:
DROP	regcomp.c	/^#define	DROP(/;"	kind:d	file:	signature:(n)
DUPMAX	regcomp.c	/^#define	DUPMAX	/;"	kind:d	file:
DataExtractor::getCStr	DataExtractor.cpp	/^const char *DataExtractor::getCStr(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:const char *	signature:(uint32_t * offset_ptr) const
DataExtractor::getSLEB128	DataExtractor.cpp	/^int64_t DataExtractor::getSLEB128(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:int64_t	signature:(uint32_t * offset_ptr) const
DataExtractor::getSigned	DataExtractor.cpp	/^DataExtractor::getSigned(uint32_t *offset_ptr, uint32_t byte_size) const {$/;"	kind:f	class:DataExtractor	typeref:typename:int64_t	signature:(uint32_t * offset_ptr,uint32_t byte_size) const
DataExtractor::getU16	DataExtractor.cpp	/^uint16_t *DataExtractor::getU16(uint32_t *offset_ptr, uint16_t *dst,$/;"	kind:f	class:DataExtractor	typeref:typename:uint16_t *	signature:(uint32_t * offset_ptr,uint16_t * dst,uint32_t count) const
DataExtractor::getU16	DataExtractor.cpp	/^uint16_t DataExtractor::getU16(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint16_t	signature:(uint32_t * offset_ptr) const
DataExtractor::getU32	DataExtractor.cpp	/^uint32_t *DataExtractor::getU32(uint32_t *offset_ptr, uint32_t *dst,$/;"	kind:f	class:DataExtractor	typeref:typename:uint32_t *	signature:(uint32_t * offset_ptr,uint32_t * dst,uint32_t count) const
DataExtractor::getU32	DataExtractor.cpp	/^uint32_t DataExtractor::getU32(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint32_t	signature:(uint32_t * offset_ptr) const
DataExtractor::getU64	DataExtractor.cpp	/^uint64_t *DataExtractor::getU64(uint32_t *offset_ptr, uint64_t *dst,$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t *	signature:(uint32_t * offset_ptr,uint64_t * dst,uint32_t count) const
DataExtractor::getU64	DataExtractor.cpp	/^uint64_t DataExtractor::getU64(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t	signature:(uint32_t * offset_ptr) const
DataExtractor::getU8	DataExtractor.cpp	/^DataExtractor::getU8(uint32_t *offset_ptr, uint8_t *dst, uint32_t count) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint8_t *	signature:(uint32_t * offset_ptr,uint8_t * dst,uint32_t count) const
DataExtractor::getU8	DataExtractor.cpp	/^uint8_t DataExtractor::getU8(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint8_t	signature:(uint32_t * offset_ptr) const
DataExtractor::getULEB128	DataExtractor.cpp	/^uint64_t DataExtractor::getULEB128(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t	signature:(uint32_t * offset_ptr) const
DataExtractor::getUnsigned	DataExtractor.cpp	/^DataExtractor::getUnsigned(uint32_t *offset_ptr, uint32_t byte_size) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t	signature:(uint32_t * offset_ptr,uint32_t byte_size) const
Debug	Debug.cpp	/^Debug("debug", cl::desc("Enable debug output"), cl::Hidden,$/;"	kind:v	typeref:typename:cl::opt<bool,true>	file:
DebugBufferSize	Debug.cpp	/^DebugBufferSize("debug-buffer-size",$/;"	kind:v	typeref:typename:cl::opt<unsigned>	file:
DebugFlag	Debug.cpp	/^bool DebugFlag = false;$/;"	kind:v	namespace:llvm	typeref:typename:bool
DebugOnly	Debug.cpp	/^DebugOnly("debug-only", cl::desc("Enable a specific type of debug output (comma separated list o/;"	kind:v	typeref:typename:cl::opt<DebugOnlyOpt,true,cl::parser<std::string>>	file:
DebugOnlyOpt	Debug.cpp	/^struct DebugOnlyOpt {$/;"	kind:s	namespace:__anona93d287d0110	file:
DebugOnlyOptLoc	Debug.cpp	/^static DebugOnlyOpt DebugOnlyOptLoc;$/;"	kind:v	typeref:typename:DebugOnlyOpt	file:
DecimalSignString	Dwarf.cpp	/^StringRef llvm::dwarf::DecimalSignString(unsigned Sign) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Sign)
Default	TargetParser.cpp	/^  bool Default; \/\/ is $Name the default CPU for $ArchID ?$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:bool	file:	access:public
DefaultExtensions	TargetParser.cpp	/^  unsigned DefaultExtensions;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:unsigned	file:	access:public
DefaultFPU	TargetParser.cpp	/^  unsigned DefaultFPU;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:unsigned	file:	access:public
DefaultTimerGroup	Timer.cpp	/^static TimerGroup *DefaultTimerGroup = nullptr;$/;"	kind:v	typeref:typename:TimerGroup *	file:
Delta	DeltaAlgorithm.cpp	/^DeltaAlgorithm::Delta(const changeset_ty &Changes,$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:DeltaAlgorithm::changeset_ty	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets)
DeltaActiveSetHelper	DAGDeltaAlgorithm.cpp	/^  DeltaActiveSetHelper(DAGDeltaAlgorithmImpl &DDAI,$/;"	kind:f	class:__anon664fcfb30110::DeltaActiveSetHelper	file:	access:public	signature:(DAGDeltaAlgorithmImpl & DDAI,const changeset_ty & Required)
DeltaActiveSetHelper	DAGDeltaAlgorithm.cpp	/^class DeltaActiveSetHelper : public DeltaAlgorithm {$/;"	kind:c	namespace:__anon664fcfb30110	file:	inherits:DeltaAlgorithm
DeltaAlgorithm::Delta	DeltaAlgorithm.cpp	/^DeltaAlgorithm::Delta(const changeset_ty &Changes,$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:DeltaAlgorithm::changeset_ty	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets)
DeltaAlgorithm::GetTestResult	DeltaAlgorithm.cpp	/^bool DeltaAlgorithm::GetTestResult(const changeset_ty &Changes) {$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:bool	signature:(const changeset_ty & Changes)
DeltaAlgorithm::Run	DeltaAlgorithm.cpp	/^DeltaAlgorithm::changeset_ty DeltaAlgorithm::Run(const changeset_ty &Changes) {$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:DeltaAlgorithm::changeset_ty	signature:(const changeset_ty & Changes)
DeltaAlgorithm::Search	DeltaAlgorithm.cpp	/^bool DeltaAlgorithm::Search(const changeset_ty &Changes,$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:bool	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets,changeset_ty & Res)
DeltaAlgorithm::Split	DeltaAlgorithm.cpp	/^void DeltaAlgorithm::Split(const changeset_ty &S, changesetlist_ty &Res) {$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:void	signature:(const changeset_ty & S,changesetlist_ty & Res)
DeltaAlgorithm::~DeltaAlgorithm	DeltaAlgorithm.cpp	/^DeltaAlgorithm::~DeltaAlgorithm() {$/;"	kind:f	class:DeltaAlgorithm	signature:()
DiffFilesWithTolerance	FileUtilities.cpp	/^int llvm::DiffFilesWithTolerance(StringRef NameA,$/;"	kind:f	class:llvm	typeref:typename:int	signature:(StringRef NameA,StringRef NameB,double AbsTol,double RelTol,std::string * Error)
Disable	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::Disable() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:()
DiscriminantString	Dwarf.cpp	/^StringRef llvm::dwarf::DiscriminantString(unsigned Discriminant) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Discriminant)
DisplayGraph	GraphWriter.cpp	/^bool llvm::DisplayGraph(StringRef FilenameRef, bool wait,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef FilenameRef,bool wait,GraphProgram::Name program)
DoSearch	SearchForAddressOfSpecialSymbol.cpp	/^static void *DoSearch(const char* symbolName) {$/;"	kind:f	typeref:typename:void *	file:	signature:(const char * symbolName)
Document	YAMLParser.cpp	/^Document::Document(Stream &S) : stream(S), Root(nullptr) {$/;"	kind:f	class:Document	signature:(Stream & S)
Document::Document	YAMLParser.cpp	/^Document::Document(Stream &S) : stream(S), Root(nullptr) {$/;"	kind:f	class:Document	signature:(Stream & S)
Document::expectToken	YAMLParser.cpp	/^bool Document::expectToken(int TK) {$/;"	kind:f	class:Document	typeref:typename:bool	signature:(int TK)
Document::failed	YAMLParser.cpp	/^bool Document::failed() const {$/;"	kind:f	class:Document	typeref:typename:bool	signature:() const
Document::getNext	YAMLParser.cpp	/^Token Document::getNext() {$/;"	kind:f	class:Document	typeref:typename:Token	signature:()
Document::parseBlockNode	YAMLParser.cpp	/^Node *Document::parseBlockNode() {$/;"	kind:f	class:Document	typeref:typename:Node *	signature:()
Document::parseDirectives	YAMLParser.cpp	/^bool Document::parseDirectives() {$/;"	kind:f	class:Document	typeref:typename:bool	signature:()
Document::parseTAGDirective	YAMLParser.cpp	/^void Document::parseTAGDirective() {$/;"	kind:f	class:Document	typeref:typename:void	signature:()
Document::parseYAMLDirective	YAMLParser.cpp	/^void Document::parseYAMLDirective() {$/;"	kind:f	class:Document	typeref:typename:void	signature:()
Document::peekNext	YAMLParser.cpp	/^Token &Document::peekNext() {$/;"	kind:f	class:Document	typeref:typename:Token &	signature:()
Document::setError	YAMLParser.cpp	/^void Document::setError(const Twine &Message, Token &Location) const {$/;"	kind:f	class:Document	typeref:typename:void	signature:(const Twine & Message,Token & Location) const
Document::skip	YAMLParser.cpp	/^bool Document::skip()  {$/;"	kind:f	class:Document	typeref:typename:bool	signature:()
DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(DoubleAPFloat &&RHS)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(DoubleAPFloat && RHS)
DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const DoubleAPFloat &RHS)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const DoubleAPFloat & RHS)
DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S)
DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, APFloat &&First,$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,APFloat && First,APFloat && Second)
DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, const APInt &I)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,const APInt & I)
DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, integerPart I)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,integerPart I)
DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, uninitializedTag)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,uninitializedTag)
DynamicLibrary::SearchForAddressOfSymbol	DynamicLibrary.cpp	/^void* DynamicLibrary::SearchForAddressOfSymbol(const char *symbolName) {$/;"	kind:f	class:DynamicLibrary	typeref:typename:void *	signature:(const char * symbolName)
DynamicLibrary::getAddressOfSymbol	DynamicLibrary.cpp	/^void *DynamicLibrary::getAddressOfSymbol(const char *symbolName) {$/;"	kind:f	class:DynamicLibrary	typeref:typename:void *	signature:(const char * symbolName)
DynamicLibrary::getPermanentLibrary	DynamicLibrary.cpp	/^DynamicLibrary DynamicLibrary::getPermanentLibrary(const char *filename,$/;"	kind:f	class:DynamicLibrary	typeref:typename:DynamicLibrary	signature:(const char * filename,std::string * errMsg)
EAT	regcomp.c	/^#define	EAT(/;"	kind:d	file:	signature:(c)
EATTWO	regcomp.c	/^#define	EATTWO(/;"	kind:d	file:	signature:(a,b)
EC	YAMLParser.cpp	/^  std::error_code *EC;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:std::error_code *	file:	access:private
EMIT	regcomp.c	/^#define	EMIT(/;"	kind:d	file:	signature:(op,sopnd)
EQ	regexec.c	/^#define	EQ(/;"	kind:d	file:	signature:(a,b)
EXPLICIT_SYMBOL	DynamicLibrary.cpp	/^#define EXPLICIT_SYMBOL(/;"	kind:d	file:	signature:(SYM)
EXPLICIT_SYMBOL	SearchForAddressOfSpecialSymbol.cpp	/^#define EXPLICIT_SYMBOL(/;"	kind:d	file:	signature:(SYM)
EatNumber	Triple.cpp	/^static unsigned EatNumber(StringRef &Str) {$/;"	kind:f	typeref:typename:unsigned	file:	signature:(StringRef & Str)
EatsUnboundedNumberOfValues	CommandLine.cpp	/^static bool EatsUnboundedNumberOfValues(const Option *O) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const Option * O)
Enable	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::Enable() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:()
EnableABIBreakingChecks	Error.cpp	/^int EnableABIBreakingChecks;$/;"	kind:v	namespace:llvm	typeref:typename:int
EnableDebugBuffering	Debug.cpp	/^bool llvm::EnableDebugBuffering = false;$/;"	kind:m	class:llvm	typeref:typename:bool
EnablePrettyStackTrace	PrettyStackTrace.cpp	/^void llvm::EnablePrettyStackTrace() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
EnableStatistics	Statistic.cpp	/^void llvm::EnableStatistics(bool PrintOnExit) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(bool PrintOnExit)
Enabled	Statistic.cpp	/^static bool Enabled;$/;"	kind:v	typeref:typename:bool	file:
EncodingInfo	YAMLParser.cpp	/^typedef std::pair<UnicodeEncodingForm, unsigned> EncodingInfo;$/;"	kind:t	typeref:typename:std::pair<UnicodeEncodingForm,unsigned>	file:
End	YAMLParser.cpp	/^  StringRef::iterator End;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private
EndOfNumber	FileUtilities.cpp	/^static const char *EndOfNumber(const char *Pos) {$/;"	kind:f	typeref:typename:const char *	file:	signature:(const char * Pos)
EndianityString	Dwarf.cpp	/^StringRef llvm::dwarf::EndianityString(unsigned Endian) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Endian)
Entry	SpecialCaseList.cpp	/^struct SpecialCaseList::Entry {$/;"	kind:s	class:llvm::SpecialCaseList	file:
EqualSlowCase	APInt.cpp	/^bool APInt::EqualSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const APInt & RHS) const
EqualSlowCase	APInt.cpp	/^bool APInt::EqualSlowCase(uint64_t Val) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(uint64_t Val) const
ErrorErrorCat	Error.cpp	/^static ManagedStatic<ErrorErrorCategory> ErrorErrorCat;$/;"	kind:v	typeref:typename:ManagedStatic<ErrorErrorCategory>	file:
ErrorErrorCategory	Error.cpp	/^  class ErrorErrorCategory : public std::error_category {$/;"	kind:c	namespace:__anondf7d4ec00110	file:	inherits:std::error_category
ErrorErrorCode	Error.cpp	/^  enum class ErrorErrorCode : int {$/;"	kind:g	namespace:__anondf7d4ec00110	typeref:typename:int	file:
ErrorHandler	ErrorHandling.cpp	/^static fatal_error_handler_t ErrorHandler = nullptr;$/;"	kind:v	typeref:typename:fatal_error_handler_t	file:
ErrorHandlerMutex	ErrorHandling.cpp	/^static ManagedStatic<sys::Mutex> ErrorHandlerMutex;$/;"	kind:v	typeref:typename:ManagedStatic<sys::Mutex>	file:
ErrorHandlerUserData	ErrorHandling.cpp	/^static void *ErrorHandlerUserData = nullptr;$/;"	kind:v	typeref:typename:void *	file:
EscapeString	GraphWriter.cpp	/^std::string llvm::DOT::EscapeString(const std::string &Label) {$/;"	kind:f	class:llvm::DOT	typeref:typename:std::string	signature:(const std::string & Label)
ExceptionHandler	CrashRecoveryContext.cpp	/^static LONG CALLBACK ExceptionHandler(PEXCEPTION_POINTERS ExceptionInfo)$/;"	kind:f	typeref:typename:LONG CALLBACK	file:	signature:(PEXCEPTION_POINTERS ExceptionInfo)
ExecGraphViewer	GraphWriter.cpp	/^static bool ExecGraphViewer(StringRef ExecPath, std::vector<const char *> &args,$/;"	kind:f	typeref:typename:bool	file:	signature:(StringRef ExecPath,std::vector<const char * > & args,StringRef Filename,bool wait,std::string & ErrMsg)
Execute	Program.cpp	/^static bool Execute(ProcessInfo &PI, StringRef Program, const char **args,$/;"	kind:p	typeref:typename:bool	file:	signature:(ProcessInfo & PI,StringRef Program,const char ** args,const char ** env,const StringRef ** Redirects,unsigned memoryLimit,std::string * ErrMsg)
ExecuteAndWait	Program.cpp	/^int sys::ExecuteAndWait(StringRef Program, const char **args, const char **envp,$/;"	kind:f	class:sys	typeref:typename:int	signature:(StringRef Program,const char ** args,const char ** envp,const StringRef ** redirects,unsigned secondsToWait,unsigned memoryLimit,std::string * ErrMsg,bool * ExecutionFailed)
ExecuteNoWait	Program.cpp	/^ProcessInfo sys::ExecuteNoWait(StringRef Program, const char **args,$/;"	kind:f	class:sys	typeref:typename:ProcessInfo	signature:(StringRef Program,const char ** args,const char ** envp,const StringRef ** redirects,unsigned memoryLimit,std::string * ErrMsg,bool * ExecutionFailed)
ExecuteOnThread_Dispatch	Threading.cpp	/^static void *ExecuteOnThread_Dispatch(void *Arg) {$/;"	kind:f	typeref:typename:void *	file:	signature:(void * Arg)
ExecuteOneTest	DAGDeltaAlgorithm.cpp	/^  bool ExecuteOneTest(const changeset_ty &S) override {$/;"	kind:f	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:bool	file:	access:protected	signature:(const changeset_ty & S)
ExecuteOneTest	DAGDeltaAlgorithm.cpp	/^  bool ExecuteOneTest(const changeset_ty &S) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:bool	file:	access:private	signature:(const changeset_ty & S)
ExpandResponseFile	CommandLine.cpp	/^static bool ExpandResponseFile(StringRef FName, StringSaver &Saver,$/;"	kind:f	typeref:typename:bool	file:	signature:(StringRef FName,StringSaver & Saver,TokenizerCallback Tokenizer,SmallVectorImpl<const char * > & NewArgv,bool MarkEOLs,bool RelativeNames)
ExpandResponseFiles	CommandLine.cpp	/^bool cl::ExpandResponseFiles(StringSaver &Saver, TokenizerCallback Tokenizer,$/;"	kind:f	class:cl	typeref:typename:bool	signature:(StringSaver & Saver,TokenizerCallback Tokenizer,SmallVectorImpl<const char * > & Argv,bool MarkEOLs,bool RelativeNames)
ExplicitSymbols	DynamicLibrary.cpp	/^static llvm::ManagedStatic<llvm::StringMap<void *> > ExplicitSymbols;$/;"	kind:v	typeref:typename:llvm::ManagedStatic<llvm::StringMap<void * >>	file:
ExtraVersionPrinters	CommandLine.cpp	/^static std::vector<void (*)()> *ExtraVersionPrinters = nullptr;$/;"	kind:v	typeref:typename:std::vector<void (*)()> *	file:
F	MD5.cpp	/^#define F(/;"	kind:d	file:	signature:(x,y,z)
FEATURE_ADX	Host.cpp	/^  FEATURE_ADX,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_AVX	Host.cpp	/^  FEATURE_AVX,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_AVX2	Host.cpp	/^  FEATURE_AVX2,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_AVX512	Host.cpp	/^  FEATURE_AVX512,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_AVX512SAVE	Host.cpp	/^  FEATURE_AVX512SAVE,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_CMOV	Host.cpp	/^  FEATURE_CMOV = 0,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_EM64T	Host.cpp	/^  FEATURE_EM64T$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_MMX	Host.cpp	/^  FEATURE_MMX,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_MOVBE	Host.cpp	/^  FEATURE_MOVBE,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_POPCNT	Host.cpp	/^  FEATURE_POPCNT,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_SSE	Host.cpp	/^  FEATURE_SSE,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_SSE2	Host.cpp	/^  FEATURE_SSE2,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_SSE3	Host.cpp	/^  FEATURE_SSE3,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_SSE4_1	Host.cpp	/^  FEATURE_SSE4_1,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_SSE4_2	Host.cpp	/^  FEATURE_SSE4_2,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FEATURE_SSSE3	Host.cpp	/^  FEATURE_SSSE3,$/;"	kind:e	enum:ProcessorFeatures	file:	access:public
FPUVersion	TargetParser.cpp	/^  ARM::FPUVersion FPUVersion;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::FPUVersion	file:	access:public
FSEntity	Path.cpp	/^enum FSEntity {$/;"	kind:g	file:
FS_Dir	Path.cpp	/^  FS_Dir,$/;"	kind:e	enum:FSEntity	file:	access:public
FS_File	Path.cpp	/^  FS_File,$/;"	kind:e	enum:FSEntity	file:	access:public
FS_Name	Path.cpp	/^  FS_Name$/;"	kind:e	enum:FSEntity	file:	access:public
FWD	regexec.c	/^#define	FWD(/;"	kind:d	file:	signature:(dst,src,n)
Failed	CrashRecoveryContext.cpp	/^  volatile unsigned Failed : 1;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:volatile unsigned:1	file:	access:public
Failed	YAMLParser.cpp	/^  bool Failed;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
FailedTestsCache	DAGDeltaAlgorithm.cpp	/^  mutable std::set<changeset_ty> FailedTestsCache;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::set<changeset_ty>	file:	access:private
Feature	TargetParser.cpp	/^  const char *Feature;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:const char *	file:	access:public
FileHandleTraits	Windows/WindowsSupport.h	/^struct FileHandleTraits : CommonHandleTraits {};$/;"	kind:s	inherits:CommonHandleTraits
FileOutputBuffer	FileOutputBuffer.cpp	/^FileOutputBuffer::FileOutputBuffer(std::unique_ptr<mapped_file_region> R,$/;"	kind:f	class:llvm::FileOutputBuffer	signature:(std::unique_ptr<mapped_file_region> R,StringRef Path,StringRef TmpPath)
Filename	LockFileManager.cpp	/^  StringRef Filename;$/;"	kind:m	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	typeref:typename:StringRef	file:	access:private
FindBucketFor	SmallPtrSet.cpp	/^const void * const *SmallPtrSetImplBase::FindBucketFor(const void *Ptr) const {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:const void * const *	signature:(const void * Ptr) const
FindBufferContainingLoc	SourceMgr.cpp	/^unsigned SourceMgr::FindBufferContainingLoc(SMLoc Loc) const {$/;"	kind:f	class:SourceMgr	typeref:typename:unsigned	signature:(SMLoc Loc) const
FindHandleTraits	Windows/WindowsSupport.h	/^struct FindHandleTraits : CommonHandleTraits {$/;"	kind:s	inherits:CommonHandleTraits
FindHandleTraits::Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:FindHandleTraits	typeref:typename:void	access:public	signature:(handle_type h)
FindInEnvPath	Process.cpp	/^Optional<std::string> Process::FindInEnvPath(const std::string& EnvName,$/;"	kind:f	class:Process	typeref:typename:Optional<std::string>	signature:(const std::string & EnvName,const std::string & FileName)
FindKey	StringMap.cpp	/^int StringMapImpl::FindKey(StringRef Key) const {$/;"	kind:f	class:StringMapImpl	typeref:typename:int	signature:(StringRef Key) const
FindNodeOrInsertPos	FoldingSet.cpp	/^*FoldingSetImpl::FindNodeOrInsertPos(const FoldingSetNodeID &ID,$/;"	kind:f	class:FoldingSetImpl	typeref:typename:FoldingSetImpl::Node *	signature:(const FoldingSetNodeID & ID,void * & InsertPos)
FirstTarget	TargetRegistry.cpp	/^static Target *FirstTarget = nullptr;$/;"	kind:v	typeref:typename:Target *	file:
FlowLevel	YAMLParser.cpp	/^  unsigned FlowLevel;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private
FlowLevel	YAMLParser.cpp	/^  unsigned FlowLevel;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:unsigned	file:	access:public
Fn	CrashRecoveryContext.cpp	/^  function_ref<void()> Fn;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:function_ref<void ()>	file:	access:public
FoldingSetBucketIteratorImpl	FoldingSet.cpp	/^FoldingSetBucketIteratorImpl::FoldingSetBucketIteratorImpl(void **Bucket) {$/;"	kind:f	class:FoldingSetBucketIteratorImpl	signature:(void ** Bucket)
FoldingSetBucketIteratorImpl::FoldingSetBucketIteratorImpl	FoldingSet.cpp	/^FoldingSetBucketIteratorImpl::FoldingSetBucketIteratorImpl(void **Bucket) {$/;"	kind:f	class:FoldingSetBucketIteratorImpl	signature:(void ** Bucket)
FoldingSetImpl	FoldingSet.cpp	/^FoldingSetImpl::FoldingSetImpl(FoldingSetImpl &&Arg)$/;"	kind:f	class:FoldingSetImpl	signature:(FoldingSetImpl && Arg)
FoldingSetImpl	FoldingSet.cpp	/^FoldingSetImpl::FoldingSetImpl(unsigned Log2InitSize) {$/;"	kind:f	class:FoldingSetImpl	signature:(unsigned Log2InitSize)
FoldingSetImpl::FindNodeOrInsertPos	FoldingSet.cpp	/^*FoldingSetImpl::FindNodeOrInsertPos(const FoldingSetNodeID &ID,$/;"	kind:f	class:FoldingSetImpl	typeref:typename:FoldingSetImpl::Node *	signature:(const FoldingSetNodeID & ID,void * & InsertPos)
FoldingSetImpl::FoldingSetImpl	FoldingSet.cpp	/^FoldingSetImpl::FoldingSetImpl(FoldingSetImpl &&Arg)$/;"	kind:f	class:FoldingSetImpl	signature:(FoldingSetImpl && Arg)
FoldingSetImpl::FoldingSetImpl	FoldingSet.cpp	/^FoldingSetImpl::FoldingSetImpl(unsigned Log2InitSize) {$/;"	kind:f	class:FoldingSetImpl	signature:(unsigned Log2InitSize)
FoldingSetImpl::GetOrInsertNode	FoldingSet.cpp	/^FoldingSetImpl::Node *FoldingSetImpl::GetOrInsertNode(FoldingSetImpl::Node *N) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:FoldingSetImpl::Node *	signature:(FoldingSetImpl::Node * N)
FoldingSetImpl::GrowBucketCount	FoldingSet.cpp	/^void FoldingSetImpl::GrowBucketCount(unsigned NewBucketCount) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:(unsigned NewBucketCount)
FoldingSetImpl::GrowHashTable	FoldingSet.cpp	/^void FoldingSetImpl::GrowHashTable() {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:()
FoldingSetImpl::InsertNode	FoldingSet.cpp	/^void FoldingSetImpl::InsertNode(Node *N, void *InsertPos) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:(Node * N,void * InsertPos)
FoldingSetImpl::RemoveNode	FoldingSet.cpp	/^bool FoldingSetImpl::RemoveNode(Node *N) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:bool	signature:(Node * N)
FoldingSetImpl::anchor	FoldingSet.cpp	/^void FoldingSetImpl::anchor() {}$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:()
FoldingSetImpl::clear	FoldingSet.cpp	/^void FoldingSetImpl::clear() {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:()
FoldingSetImpl::operator =	FoldingSet.cpp	/^FoldingSetImpl &FoldingSetImpl::operator=(FoldingSetImpl &&RHS) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:FoldingSetImpl &	signature:(FoldingSetImpl && RHS)
FoldingSetImpl::reserve	FoldingSet.cpp	/^void FoldingSetImpl::reserve(unsigned EltCount) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:(unsigned EltCount)
FoldingSetImpl::~FoldingSetImpl	FoldingSet.cpp	/^FoldingSetImpl::~FoldingSetImpl() {$/;"	kind:f	class:FoldingSetImpl	signature:()
FoldingSetIteratorImpl	FoldingSet.cpp	/^FoldingSetIteratorImpl::FoldingSetIteratorImpl(void **Bucket) {$/;"	kind:f	class:FoldingSetIteratorImpl	signature:(void ** Bucket)
FoldingSetIteratorImpl::FoldingSetIteratorImpl	FoldingSet.cpp	/^FoldingSetIteratorImpl::FoldingSetIteratorImpl(void **Bucket) {$/;"	kind:f	class:FoldingSetIteratorImpl	signature:(void ** Bucket)
FoldingSetIteratorImpl::advance	FoldingSet.cpp	/^void FoldingSetIteratorImpl::advance() {$/;"	kind:f	class:FoldingSetIteratorImpl	typeref:typename:void	signature:()
FoldingSetNodeID::AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(long I)
FoldingSetNodeID::AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(long long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(long long I)
FoldingSetNodeID::AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(signed I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(signed I)
FoldingSetNodeID::AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(unsigned I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(unsigned I)
FoldingSetNodeID::AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(unsigned long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(unsigned long I)
FoldingSetNodeID::AddInteger	FoldingSet.cpp	/^void FoldingSetNodeID::AddInteger(unsigned long long I) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(unsigned long long I)
FoldingSetNodeID::AddNodeID	FoldingSet.cpp	/^void FoldingSetNodeID::AddNodeID(const FoldingSetNodeID &ID) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(const FoldingSetNodeID & ID)
FoldingSetNodeID::AddPointer	FoldingSet.cpp	/^void FoldingSetNodeID::AddPointer(const void *Ptr) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(const void * Ptr)
FoldingSetNodeID::AddString	FoldingSet.cpp	/^void FoldingSetNodeID::AddString(StringRef String) {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:void	signature:(StringRef String)
FoldingSetNodeID::ComputeHash	FoldingSet.cpp	/^unsigned FoldingSetNodeID::ComputeHash() const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:unsigned	signature:() const
FoldingSetNodeID::Intern	FoldingSet.cpp	/^FoldingSetNodeID::Intern(BumpPtrAllocator &Allocator) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:FoldingSetNodeIDRef	signature:(BumpPtrAllocator & Allocator) const
FoldingSetNodeID::operator <	FoldingSet.cpp	/^bool FoldingSetNodeID::operator<(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
FoldingSetNodeID::operator <	FoldingSet.cpp	/^bool FoldingSetNodeID::operator<(const FoldingSetNodeID &RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(const FoldingSetNodeID & RHS) const
FoldingSetNodeID::operator ==	FoldingSet.cpp	/^bool FoldingSetNodeID::operator==(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
FoldingSetNodeID::operator ==	FoldingSet.cpp	/^bool FoldingSetNodeID::operator==(const FoldingSetNodeID &RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(const FoldingSetNodeID & RHS) const
FoldingSetNodeIDRef::ComputeHash	FoldingSet.cpp	/^unsigned FoldingSetNodeIDRef::ComputeHash() const {$/;"	kind:f	class:FoldingSetNodeIDRef	typeref:typename:unsigned	signature:() const
FoldingSetNodeIDRef::operator <	FoldingSet.cpp	/^bool FoldingSetNodeIDRef::operator<(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeIDRef	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
FoldingSetNodeIDRef::operator ==	FoldingSet.cpp	/^bool FoldingSetNodeIDRef::operator==(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeIDRef	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
FormEncodingString	Dwarf.cpp	/^StringRef llvm::dwarf::FormEncodingString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
G	MD5.cpp	/^#define G(/;"	kind:d	file:	signature:(x,y,z)
GDBIndexEntryKindString	Dwarf.cpp	/^StringRef llvm::dwarf::GDBIndexEntryKindString(GDBIndexEntryKind Kind) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(GDBIndexEntryKind Kind)
GDBIndexEntryLinkageString	Dwarf.cpp	/^llvm::dwarf::GDBIndexEntryLinkageString(GDBIndexEntryLinkage Linkage) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(GDBIndexEntryLinkage Linkage)
GET	MD5.cpp	/^#define GET(/;"	kind:d	file:	signature:(n)
GETNEXT	regcomp.c	/^#define	GETNEXT(/;"	kind:d	file:	signature:()
GNU_ATOMICS	Atomic.cpp	/^#define GNU_ATOMICS$/;"	kind:d	file:
GOODFLAGS	regcomp.c	/^#	define	GOODFLAGS(/;"	kind:d	file:	signature:(f)
GOODFLAGS	regexec.c	/^#	define	GOODFLAGS(/;"	kind:d	file:	signature:(f)
GeneralCategory	CommandLine.cpp	/^OptionCategory llvm::cl::GeneralCategory("General options");$/;"	kind:m	class:llvm::cl	typeref:typename:OptionCategory
GenericCategory	CommandLine.cpp	/^static cl::OptionCategory GenericCategory("Generic Options");$/;"	kind:v	typeref:typename:cl::OptionCategory	file:
GenericOptionValue::anchor	CommandLine.cpp	/^void GenericOptionValue::anchor() {}$/;"	kind:f	class:GenericOptionValue	typeref:typename:void	signature:()
GetAutoSenseRadix	StringRef.cpp	/^static unsigned GetAutoSenseRadix(StringRef &Str) {$/;"	kind:f	typeref:typename:unsigned	file:	signature:(StringRef & Str)
GetBucketFor	FoldingSet.cpp	/^static void **GetBucketFor(unsigned Hash, void **Buckets, unsigned NumBuckets) {$/;"	kind:f	typeref:typename:void **	file:	signature:(unsigned Hash,void ** Buckets,unsigned NumBuckets)
GetBucketPtr	FoldingSet.cpp	/^static void **GetBucketPtr(void *NextInBucketPtr) {$/;"	kind:f	typeref:typename:void **	file:	signature:(void * NextInBucketPtr)
GetCurrent	CrashRecoveryContext.cpp	/^CrashRecoveryContext *CrashRecoveryContext::GetCurrent() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:CrashRecoveryContext *	signature:()
GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:CommonHandleTraits	typeref:typename:handle_type	access:public	signature:()
GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:CryptContextTraits	typeref:typename:handle_type	access:public	signature:()
GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:JobHandleTraits	typeref:typename:handle_type	access:public	signature:()
GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:RegTraits	typeref:typename:handle_type	access:public	signature:()
GetMessage	SourceMgr.cpp	/^SMDiagnostic SourceMgr::GetMessage(SMLoc Loc, SourceMgr::DiagKind Kind,$/;"	kind:f	class:SourceMgr	typeref:typename:SMDiagnostic	signature:(SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Msg,ArrayRef<SMRange> Ranges,ArrayRef<SMFixIt> FixIts) const
GetNextPtr	FoldingSet.cpp	/^static FoldingSetImpl::Node *GetNextPtr(void *NextInBucketPtr) {$/;"	kind:f	typeref:typename:FoldingSetImpl::Node *	file:	signature:(void * NextInBucketPtr)
GetOrInsertNode	FoldingSet.cpp	/^FoldingSetImpl::Node *FoldingSetImpl::GetOrInsertNode(FoldingSetImpl::Node *N) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:FoldingSetImpl::Node *	signature:(FoldingSetImpl::Node * N)
GetTestResult	DAGDeltaAlgorithm.cpp	/^  bool GetTestResult(const changeset_ty &Changes, const changeset_ty &Required);$/;"	kind:p	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:bool	file:	access:public	signature:(const changeset_ty & Changes,const changeset_ty & Required)
GetTestResult	DAGDeltaAlgorithm.cpp	/^bool DAGDeltaAlgorithmImpl::GetTestResult(const changeset_ty &Changes,$/;"	kind:f	class:DAGDeltaAlgorithmImpl	typeref:typename:bool	signature:(const changeset_ty & Changes,const changeset_ty & Required)
GetTestResult	DeltaAlgorithm.cpp	/^bool DeltaAlgorithm::GetTestResult(const changeset_ty &Changes) {$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:bool	signature:(const changeset_ty & Changes)
GlobalParser	CommandLine.cpp	/^static ManagedStatic<CommandLineParser> GlobalParser;$/;"	kind:v	typeref:typename:ManagedStatic<CommandLineParser>	file:
GraphSession	GraphWriter.cpp	/^struct GraphSession {$/;"	kind:s	namespace:__anoneadbbe250110	file:
GreatestCommonDivisor	APInt.cpp	/^APInt llvm::APIntOps::GreatestCommonDivisor(const APInt& API1,$/;"	kind:f	class:llvm::APIntOps	typeref:typename:APInt	signature:(const APInt & API1,const APInt & API2)
Grow	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::Grow(unsigned NewSize) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(unsigned NewSize)
GrowBucketCount	FoldingSet.cpp	/^void FoldingSetImpl::GrowBucketCount(unsigned NewBucketCount) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:(unsigned NewBucketCount)
GrowHashTable	FoldingSet.cpp	/^void FoldingSetImpl::GrowHashTable() {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:()
H	MD5.cpp	/^#define H(/;"	kind:d	file:	signature:(x,y,z)
HANDLE_DW_APPLE_PROPERTY	Dwarf.cpp	/^#define HANDLE_DW_APPLE_PROPERTY(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_AT	Dwarf.cpp	/^#define HANDLE_DW_AT(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_ATE	Dwarf.cpp	/^#define HANDLE_DW_ATE(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_CC	Dwarf.cpp	/^#define HANDLE_DW_CC(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_CFA	Dwarf.cpp	/^#define HANDLE_DW_CFA(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_FORM	Dwarf.cpp	/^#define HANDLE_DW_FORM(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_LANG	Dwarf.cpp	/^#define HANDLE_DW_LANG(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_LNE	Dwarf.cpp	/^#define HANDLE_DW_LNE(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_LNS	Dwarf.cpp	/^#define HANDLE_DW_LNS(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_OP	Dwarf.cpp	/^#define HANDLE_DW_OP(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_TAG	Dwarf.cpp	/^#define HANDLE_DW_TAG(/;"	kind:d	file:	signature:(ID,NAME)
HANDLE_DW_VIRTUALITY	Dwarf.cpp	/^#define HANDLE_DW_VIRTUALITY(/;"	kind:d	file:	signature:(ID,NAME)
HERE	regcomp.c	/^#define	HERE(/;"	kind:d	file:	signature:()
HHOp	CommandLine.cpp	/^    HHOp("help-hidden", cl::desc("Display all available options"),$/;"	kind:v	typeref:typename:cl::opt<HelpPrinterWrapper,true,parser<bool>>	file:
HLHOp	CommandLine.cpp	/^    HLHOp("help-list-hidden", cl::desc("Display list of all available options"),$/;"	kind:v	typeref:typename:cl::opt<HelpPrinter,true,parser<bool>>	file:
HLOp	CommandLine.cpp	/^static cl::opt<HelpPrinter, true, parser<bool>> HLOp($/;"	kind:v	typeref:typename:cl::opt<HelpPrinter,true,parser<bool>>	file:
HOp	CommandLine.cpp	/^    HOp("help", cl::desc("Display available options (-help-hidden for more)"),$/;"	kind:v	typeref:typename:cl::opt<HelpPrinterWrapper,true,parser<bool>>	file:
HUerrBound	APFloat.cpp	/^HUerrBound(bool inexactMultiply, unsigned int HUerr1, unsigned int HUerr2)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(bool inexactMultiply,unsigned int HUerr1,unsigned int HUerr2)
Handle	Windows/WindowsSupport.h	/^  handle_type Handle;$/;"	kind:m	class:ScopedHandle	typeref:typename:handle_type	access:private
HandleCrash	CrashRecoveryContext.cpp	/^  void HandleCrash() {$/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:void	file:	access:public	signature:()
HandleCrash	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::HandleCrash() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:()
HandlePrefixedOrGroupedOption	CommandLine.cpp	/^HandlePrefixedOrGroupedOption(StringRef &Arg, StringRef &Value,$/;"	kind:f	typeref:typename:Option *	file:	signature:(StringRef & Arg,StringRef & Value,bool & ErrorParsing,const StringMap<Option * > & OptionsMap)
HelpPrinter	CommandLine.cpp	/^  explicit HelpPrinter(bool showHidden) : ShowHidden(showHidden) {}$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	file:	access:public	signature:(bool showHidden)
HelpPrinter	CommandLine.cpp	/^class HelpPrinter {$/;"	kind:c	namespace:__anon2c11109d0510	file:
HelpPrinterWrapper	CommandLine.cpp	/^  explicit HelpPrinterWrapper(HelpPrinter &UncategorizedPrinter,$/;"	kind:f	class:__anon2c11109d0510::HelpPrinterWrapper	file:	access:public	signature:(HelpPrinter & UncategorizedPrinter,CategorizedHelpPrinter & CategorizedPrinter)
HelpPrinterWrapper	CommandLine.cpp	/^class HelpPrinterWrapper {$/;"	kind:c	namespace:__anon2c11109d0510	file:
HelpPrinterWrapper::operator =	CommandLine.cpp	/^void HelpPrinterWrapper::operator=(bool Value) {$/;"	kind:f	class:HelpPrinterWrapper	typeref:typename:void	signature:(bool Value)
HideUnrelatedOptions	CommandLine.cpp	/^void cl::HideUnrelatedOptions(ArrayRef<const cl::OptionCategory *> Categories,$/;"	kind:f	class:cl	typeref:typename:void	signature:(ArrayRef<const cl::OptionCategory * > Categories,SubCommand & Sub)
HideUnrelatedOptions	CommandLine.cpp	/^void cl::HideUnrelatedOptions(cl::OptionCategory &Category, SubCommand &Sub) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(cl::OptionCategory & Category,SubCommand & Sub)
I	APInt.cpp	/^    uint64_t I;$/;"	kind:m	union:APInt::roundToDouble::__anon56889252020a	typeref:typename:uint64_t	file:	access:public
I	APInt.cpp	/^    uint64_t I;$/;"	kind:m	union:llvm::APIntOps::RoundDoubleToAPInt::__anon56889252010a	typeref:typename:uint64_t	file:	access:public
I	MD5.cpp	/^#define I(/;"	kind:d	file:	signature:(x,y,z)
ID	Error.cpp	/^char ECError::ID = 0;$/;"	kind:m	class:llvm::ECError	typeref:typename:char
ID	Error.cpp	/^char ErrorInfoBase::ID = 0;$/;"	kind:m	class:llvm::ErrorInfoBase	typeref:typename:char
ID	Error.cpp	/^char ErrorList::ID = 0;$/;"	kind:m	class:llvm::ErrorList	typeref:typename:char
ID	Error.cpp	/^char StringError::ID = 0;$/;"	kind:m	class:llvm::StringError	typeref:typename:char
ID	TargetParser.cpp	/^  ARM::FPUKind ID;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::FPUKind	file:	access:public
ID	TargetParser.cpp	/^  T ID;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:T	file:	access:public
ID	TargetParser.cpp	/^  unsigned ID;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:unsigned	file:	access:public
ID	TargetParser.cpp	/^  unsigned ID;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:unsigned	file:	access:public
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(IEEEFloat &&rhs) : semantics(&Bogus) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(IEEEFloat && rhs)
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const IEEEFloat & rhs)
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &Sem, const APInt &API) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & Sem,const APInt & API)
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & ourSemantics)
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, integerPart value) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & ourSemantics,integerPart value)
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, uninitializedTag tag)$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & ourSemantics,uninitializedTag tag)
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(double d) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(double d)
IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(float f) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(float f)
IEEEdouble	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEdouble = {1023, -1022, 53, 64};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
IEEEhalf	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEhalf = {15, -14, 11, 16};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
IEEEquad	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEquad = {16383, -16382, 113, 128};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
IEEEsingle	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEsingle = {127, -126, 24, 32};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
INC	regexec.c	/^#define	INC(/;"	kind:d	file:	signature:(o)
INF	regcomp.c	/^#	define	INF	/;"	kind:d	file:
INFINITY	regcomp.c	/^#define	INFINITY	/;"	kind:d	file:
INIT	CommandLine.cpp	/^  enum { INIT, UNQUOTED, QUOTED } State = INIT;$/;"	kind:e	enum:cl::TokenizeWindowsCommandLine::__anon2c11109d0403	file:	access:public
INIT	regexec.c	/^#define	INIT(/;"	kind:d	file:	signature:(o,n)
INSERT	regcomp.c	/^#define	INSERT(/;"	kind:d	file:	signature:(op,pos)
INTEL_ATOM	Host.cpp	/^  INTEL_ATOM = 1,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_ATOM_BONNELL	Host.cpp	/^  INTEL_ATOM_BONNELL,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_ATOM_SILVERMONT	Host.cpp	/^  INTEL_ATOM_SILVERMONT,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_CORE2	Host.cpp	/^  INTEL_CORE2,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_CORE2_45	Host.cpp	/^  INTEL_CORE2_45,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_CORE2_65	Host.cpp	/^  INTEL_CORE2_65,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7	Host.cpp	/^  INTEL_COREI7,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_COREI7_BROADWELL	Host.cpp	/^  INTEL_COREI7_BROADWELL,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7_HASWELL	Host.cpp	/^  INTEL_COREI7_HASWELL,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7_IVYBRIDGE	Host.cpp	/^  INTEL_COREI7_IVYBRIDGE,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7_NEHALEM	Host.cpp	/^  INTEL_COREI7_NEHALEM = 1,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7_SANDYBRIDGE	Host.cpp	/^  INTEL_COREI7_SANDYBRIDGE,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7_SKYLAKE	Host.cpp	/^  INTEL_COREI7_SKYLAKE,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7_SKYLAKE_AVX512	Host.cpp	/^  INTEL_COREI7_SKYLAKE_AVX512,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_COREI7_WESTMERE	Host.cpp	/^  INTEL_COREI7_WESTMERE,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_CORE_DUO	Host.cpp	/^  INTEL_CORE_DUO,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_KNIGHTS_LANDING	Host.cpp	/^  INTEL_KNIGHTS_LANDING,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_NOCONA	Host.cpp	/^  INTEL_NOCONA,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_PENTIUM	Host.cpp	/^  INTEL_PENTIUM,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_PENTIUM_II	Host.cpp	/^  INTEL_PENTIUM_II,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_PENTIUM_III	Host.cpp	/^  INTEL_PENTIUM_III,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_PENTIUM_IV	Host.cpp	/^  INTEL_PENTIUM_IV,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_PENTIUM_M	Host.cpp	/^  INTEL_PENTIUM_M,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_PENTIUM_MMX	Host.cpp	/^  INTEL_PENTIUM_MMX,$/;"	kind:e	enum:ProcessorSubtypes	file:	access:public
INTEL_PENTIUM_PRO	Host.cpp	/^  INTEL_PENTIUM_PRO,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_PRESCOTT	Host.cpp	/^  INTEL_PRESCOTT,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_X86_64	Host.cpp	/^  INTEL_X86_64,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_XEONPHI	Host.cpp	/^  INTEL_XEONPHI,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_i386	Host.cpp	/^  INTEL_i386,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
INTEL_i486	Host.cpp	/^  INTEL_i486,$/;"	kind:e	enum:ProcessorTypes	file:	access:public
IO	YAMLTraits.cpp	/^IO::IO(void *Context) : Ctxt(Context) {$/;"	kind:f	class:IO	signature:(void * Context)
IO::IO	YAMLTraits.cpp	/^IO::IO(void *Context) : Ctxt(Context) {$/;"	kind:f	class:IO	signature:(void * Context)
IO::getContext	YAMLTraits.cpp	/^void *IO::getContext() {$/;"	kind:f	class:IO	typeref:typename:void *	signature:()
IO::setContext	YAMLTraits.cpp	/^void IO::setContext(void *Context) {$/;"	kind:f	class:IO	typeref:typename:void	signature:(void * Context)
IO::~IO	YAMLTraits.cpp	/^IO::~IO() {$/;"	kind:f	class:IO	signature:()
ISSET	regexec.c	/^#define	ISSET(/;"	kind:d	file:	signature:(v,n)
ISSETBACK	regexec.c	/^#define	ISSETBACK(/;"	kind:d	file:	signature:(v,n)
ISSTATEIN	regexec.c	/^#define	ISSTATEIN(/;"	kind:d	file:	signature:(v,o)
ISWORD	regex2.h	/^#define	ISWORD(/;"	kind:d	signature:(c)
InconvertibleError	Error.cpp	/^    InconvertibleError$/;"	kind:e	enum:__anondf7d4ec00110::ErrorErrorCode	file:	access:public
Indent	YAMLParser.cpp	/^  int Indent;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:int	file:	access:private
Indents	YAMLParser.cpp	/^  SmallVector<int, 4> Indents;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:SmallVector<int,4>	file:	access:private
InfoOutputFilename	Timer.cpp	/^  InfoOutputFilename("info-output-file", cl::value_desc("filename"),$/;"	kind:v	namespace:__anoncc40abd70110	typeref:typename:cl::opt<std::string,true>	file:
InitNotUnderValgrind	Valgrind.cpp	/^static bool InitNotUnderValgrind() {$/;"	kind:f	typeref:typename:bool	file:	signature:()
InlineCodeString	Dwarf.cpp	/^StringRef llvm::dwarf::InlineCodeString(unsigned Code) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Code)
Input	YAMLTraits.cpp	/^Input::Input(StringRef InputContent, void *Ctxt,$/;"	kind:f	class:Input	signature:(StringRef InputContent,void * Ctxt,SourceMgr::DiagHandlerTy DiagHandler,void * DiagHandlerCtxt)
Input::EmptyHNode::anchor	YAMLTraits.cpp	/^void Input::EmptyHNode::anchor() {}$/;"	kind:f	class:Input::EmptyHNode	typeref:typename:void	signature:()
Input::HNode::anchor	YAMLTraits.cpp	/^void Input::HNode::anchor() {}$/;"	kind:f	class:Input::HNode	typeref:typename:void	signature:()
Input::Input	YAMLTraits.cpp	/^Input::Input(StringRef InputContent, void *Ctxt,$/;"	kind:f	class:Input	signature:(StringRef InputContent,void * Ctxt,SourceMgr::DiagHandlerTy DiagHandler,void * DiagHandlerCtxt)
Input::MapHNode::anchor	YAMLTraits.cpp	/^void Input::MapHNode::anchor() {}$/;"	kind:f	class:Input::MapHNode	typeref:typename:void	signature:()
Input::MapHNode::isValidKey	YAMLTraits.cpp	/^bool Input::MapHNode::isValidKey(StringRef Key) {$/;"	kind:f	class:Input::MapHNode	typeref:typename:bool	signature:(StringRef Key)
Input::ScalarHNode::anchor	YAMLTraits.cpp	/^void Input::ScalarHNode::anchor() {}$/;"	kind:f	class:Input::ScalarHNode	typeref:typename:void	signature:()
Input::SequenceHNode::anchor	YAMLTraits.cpp	/^void Input::SequenceHNode::anchor() {}$/;"	kind:f	class:Input::SequenceHNode	typeref:typename:void	signature:()
Input::beginBitSetScalar	YAMLTraits.cpp	/^bool Input::beginBitSetScalar(bool &DoClear) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(bool & DoClear)
Input::beginEnumScalar	YAMLTraits.cpp	/^void Input::beginEnumScalar() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::beginFlowMapping	YAMLTraits.cpp	/^void Input::beginFlowMapping() { beginMapping(); }$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::beginFlowSequence	YAMLTraits.cpp	/^unsigned Input::beginFlowSequence() { return beginSequence(); }$/;"	kind:f	class:Input	typeref:typename:unsigned	signature:()
Input::beginMapping	YAMLTraits.cpp	/^void Input::beginMapping() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::beginSequence	YAMLTraits.cpp	/^unsigned Input::beginSequence() {$/;"	kind:f	class:Input	typeref:typename:unsigned	signature:()
Input::bitSetMatch	YAMLTraits.cpp	/^bool Input::bitSetMatch(const char *Str, bool) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(const char * Str,bool)
Input::blockScalarString	YAMLTraits.cpp	/^void Input::blockScalarString(StringRef &S) { scalarString(S, false); }$/;"	kind:f	class:Input	typeref:typename:void	signature:(StringRef & S)
Input::canElideEmptySequence	YAMLTraits.cpp	/^bool Input::canElideEmptySequence() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
Input::createHNodes	YAMLTraits.cpp	/^std::unique_ptr<Input::HNode> Input::createHNodes(Node *N) {$/;"	kind:f	class:Input	typeref:typename:std::unique_ptr<Input::HNode>	signature:(Node * N)
Input::endBitSetScalar	YAMLTraits.cpp	/^void Input::endBitSetScalar() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::endEnumScalar	YAMLTraits.cpp	/^void Input::endEnumScalar() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::endFlowMapping	YAMLTraits.cpp	/^void Input::endFlowMapping() { endMapping(); }$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::endFlowSequence	YAMLTraits.cpp	/^void Input::endFlowSequence() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::endMapping	YAMLTraits.cpp	/^void Input::endMapping() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::endSequence	YAMLTraits.cpp	/^void Input::endSequence() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
Input::error	YAMLTraits.cpp	/^std::error_code Input::error() { return EC; }$/;"	kind:f	class:Input	typeref:typename:std::error_code	signature:()
Input::getCurrentNode	YAMLTraits.cpp	/^const Node *Input::getCurrentNode() const {$/;"	kind:f	class:Input	typeref:typename:const Node *	signature:() const
Input::mapTag	YAMLTraits.cpp	/^bool Input::mapTag(StringRef Tag, bool Default) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(StringRef Tag,bool Default)
Input::matchEnumFallback	YAMLTraits.cpp	/^bool Input::matchEnumFallback() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
Input::matchEnumScalar	YAMLTraits.cpp	/^bool Input::matchEnumScalar(const char *Str, bool) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(const char * Str,bool)
Input::nextDocument	YAMLTraits.cpp	/^bool Input::nextDocument() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
Input::outputting	YAMLTraits.cpp	/^bool Input::outputting() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
Input::postflightElement	YAMLTraits.cpp	/^void Input::postflightElement(void *SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(void * SaveInfo)
Input::postflightFlowElement	YAMLTraits.cpp	/^void Input::postflightFlowElement(void *SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(void * SaveInfo)
Input::postflightKey	YAMLTraits.cpp	/^void Input::postflightKey(void *saveInfo) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(void * saveInfo)
Input::preflightElement	YAMLTraits.cpp	/^bool Input::preflightElement(unsigned Index, void *&SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(unsigned Index,void * & SaveInfo)
Input::preflightFlowElement	YAMLTraits.cpp	/^bool Input::preflightFlowElement(unsigned index, void *&SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(unsigned index,void * & SaveInfo)
Input::preflightKey	YAMLTraits.cpp	/^bool Input::preflightKey(const char *Key, bool Required, bool, bool &UseDefault,$/;"	kind:f	class:Input	typeref:typename:bool	signature:(const char * Key,bool Required,bool,bool & UseDefault,void * & SaveInfo)
Input::scalarString	YAMLTraits.cpp	/^void Input::scalarString(StringRef &S, bool) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(StringRef & S,bool)
Input::setCurrentDocument	YAMLTraits.cpp	/^bool Input::setCurrentDocument() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
Input::setError	YAMLTraits.cpp	/^void Input::setError(HNode *hnode, const Twine &message) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(HNode * hnode,const Twine & message)
Input::setError	YAMLTraits.cpp	/^void Input::setError(Node *node, const Twine &message) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(Node * node,const Twine & message)
Input::setError	YAMLTraits.cpp	/^void Input::setError(const Twine &Message) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(const Twine & Message)
Input::~Input	YAMLTraits.cpp	/^Input::~Input() {$/;"	kind:f	class:Input	signature:()
InputBuffer	YAMLParser.cpp	/^  MemoryBufferRef InputBuffer;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:MemoryBufferRef	file:	access:private
InsertNode	FoldingSet.cpp	/^void FoldingSetImpl::InsertNode(Node *N, void *InsertPos) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:(Node * N,void * InsertPos)
IntEqClasses::compress	IntEqClasses.cpp	/^void IntEqClasses::compress() {$/;"	kind:f	class:IntEqClasses	typeref:typename:void	signature:()
IntEqClasses::findLeader	IntEqClasses.cpp	/^unsigned IntEqClasses::findLeader(unsigned a) const {$/;"	kind:f	class:IntEqClasses	typeref:typename:unsigned	signature:(unsigned a) const
IntEqClasses::grow	IntEqClasses.cpp	/^void IntEqClasses::grow(unsigned N) {$/;"	kind:f	class:IntEqClasses	typeref:typename:void	signature:(unsigned N)
IntEqClasses::join	IntEqClasses.cpp	/^unsigned IntEqClasses::join(unsigned a, unsigned b) {$/;"	kind:f	class:IntEqClasses	typeref:typename:unsigned	signature:(unsigned a,unsigned b)
IntEqClasses::uncompress	IntEqClasses.cpp	/^void IntEqClasses::uncompress() {$/;"	kind:f	class:IntEqClasses	typeref:typename:void	signature:()
Intern	FoldingSet.cpp	/^FoldingSetNodeID::Intern(BumpPtrAllocator &Allocator) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:FoldingSetNodeIDRef	signature:(BumpPtrAllocator & Allocator) const
IntervalMapImpl	IntervalMap.cpp	/^namespace IntervalMapImpl {$/;"	kind:n	namespace:llvm	file:
Invalid	DynamicLibrary.cpp	/^char llvm::sys::DynamicLibrary::Invalid = 0;$/;"	kind:m	class:llvm::sys::DynamicLibrary	typeref:typename:char
IsRequired	YAMLParser.cpp	/^  bool IsRequired;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:bool	file:	access:public
IsSimpleKeyAllowed	YAMLParser.cpp	/^  bool IsSimpleKeyAllowed;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
IsStartOfStream	YAMLParser.cpp	/^  bool IsStartOfStream;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
IsValid	Windows/WindowsSupport.h	/^  static bool IsValid(handle_type h) {$/;"	kind:f	struct:CommonHandleTraits	typeref:typename:bool	access:public	signature:(handle_type h)
IsValid	Windows/WindowsSupport.h	/^  static bool IsValid(handle_type h) {$/;"	kind:f	struct:CryptContextTraits	typeref:typename:bool	access:public	signature:(handle_type h)
IsValid	Windows/WindowsSupport.h	/^  static bool IsValid(handle_type h) {$/;"	kind:f	struct:RegTraits	typeref:typename:bool	access:public	signature:(handle_type h)
JamCRC::update	JamCRC.cpp	/^void JamCRC::update(ArrayRef<char> Data) {$/;"	kind:f	class:JamCRC	typeref:typename:void	signature:(ArrayRef<char> Data)
JobHandleTraits	Windows/WindowsSupport.h	/^struct JobHandleTraits : CommonHandleTraits {$/;"	kind:s	inherits:CommonHandleTraits
JobHandleTraits::GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:JobHandleTraits	typeref:typename:handle_type	access:public	signature:()
KeyValueNode::getKey	YAMLParser.cpp	/^Node *KeyValueNode::getKey() {$/;"	kind:f	class:KeyValueNode	typeref:typename:Node *	signature:()
KeyValueNode::getValue	YAMLParser.cpp	/^Node *KeyValueNode::getValue() {$/;"	kind:f	class:KeyValueNode	typeref:typename:Node *	signature:()
Kind	YAMLParser.cpp	/^  } Kind;$/;"	kind:m	struct:llvm::yaml::Token	typeref:enum:llvm::yaml::Token::TokenKind	file:	access:public
KnuthDiv	APInt.cpp	/^static void KnuthDiv(unsigned *u, unsigned *v, unsigned *q, unsigned* r,$/;"	kind:f	typeref:typename:void	file:	signature:(unsigned * u,unsigned * v,unsigned * q,unsigned * r,unsigned m,unsigned n)
LLVMAddSymbol	DynamicLibrary.cpp	/^void LLVMAddSymbol(const char *symbolName, void *symbolValue) {$/;"	kind:f	typeref:typename:void	signature:(const char * symbolName,void * symbolValue)
LLVMEnablePrettyStackTrace	PrettyStackTrace.cpp	/^void LLVMEnablePrettyStackTrace() {$/;"	kind:f	typeref:typename:void	signature:()
LLVMInstallFatalErrorHandler	ErrorHandling.cpp	/^void LLVMInstallFatalErrorHandler(LLVMFatalErrorHandler Handler) {$/;"	kind:f	typeref:typename:void	signature:(LLVMFatalErrorHandler Handler)
LLVMLoadLibraryPermanently	DynamicLibrary.cpp	/^LLVMBool LLVMLoadLibraryPermanently(const char* Filename) {$/;"	kind:f	typeref:typename:LLVMBool	signature:(const char * Filename)
LLVMParseCommandLineOptions	CommandLine.cpp	/^void LLVMParseCommandLineOptions(int argc, const char *const *argv,$/;"	kind:f	typeref:typename:void	signature:(int argc,const char * const * argv,const char * Overview)
LLVMResetFatalErrorHandler	ErrorHandling.cpp	/^void LLVMResetFatalErrorHandler() {$/;"	kind:f	typeref:typename:void	signature:()
LLVMSearchForAddressOfSymbol	DynamicLibrary.cpp	/^void *LLVMSearchForAddressOfSymbol(const char *symbolName) {$/;"	kind:f	typeref:typename:void *	signature:(const char * symbolName)
LLVM_DEFINE_ONCE_FLAG	ManagedStatic.cpp	/^LLVM_DEFINE_ONCE_FLAG(mutex_init_flag);$/;"	kind:p	file:	signature:(mutex_init_flag)
LLVM_LIB_SUPPORT_UNIX_UNIX_H	Unix/Unix.h	/^#define LLVM_LIB_SUPPORT_UNIX_UNIX_H$/;"	kind:d
LLVM_SUPPORT_REGCCLASS_H	regcclass.h	/^#define LLVM_SUPPORT_REGCCLASS_H$/;"	kind:d
LLVM_SUPPORT_REGCNAME_H	regcname.h	/^#define LLVM_SUPPORT_REGCNAME_H$/;"	kind:d
LLVM_SUPPORT_REGEX2_H	regex2.h	/^#define LLVM_SUPPORT_REGEX2_H$/;"	kind:d
LLVM_SUPPORT_REGUTILS_H	regutils.h	/^#define LLVM_SUPPORT_REGUTILS_H$/;"	kind:d
LLVM_SUPPORT_WINDOWSSUPPORT_H	Windows/WindowsSupport.h	/^#define LLVM_SUPPORT_WINDOWSSUPPORT_H$/;"	kind:d
LNAMES	regexec.c	/^#define	LNAMES	/;"	kind:d	file:
LNExtendedString	Dwarf.cpp	/^StringRef llvm::dwarf::LNExtendedString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
LNStandardString	Dwarf.cpp	/^StringRef llvm::dwarf::LNStandardString(unsigned Standard) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Standard)
LanguageString	Dwarf.cpp	/^StringRef llvm::dwarf::LanguageString(unsigned Language) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Language)
LastQuery	SourceMgr.cpp	/^    const char *LastQuery;$/;"	kind:m	struct:__anon842e844d0110::LineNoCacheTy	typeref:typename:const char *	file:	access:public
LastQueryBufferID	SourceMgr.cpp	/^    unsigned LastQueryBufferID;$/;"	kind:m	struct:__anon842e844d0110::LineNoCacheTy	typeref:typename:unsigned	file:	access:public
LibSupportInfoOutputFilename	Timer.cpp	/^static ManagedStatic<std::string> LibSupportInfoOutputFilename;$/;"	kind:v	typeref:typename:ManagedStatic<std::string>	file:
Line	YAMLParser.cpp	/^  unsigned Line;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private
Line	YAMLParser.cpp	/^  unsigned Line;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:unsigned	file:	access:public
LineNoCacheTy	SourceMgr.cpp	/^  struct LineNoCacheTy {$/;"	kind:s	namespace:__anon842e844d0110	file:
LineNoOfQuery	SourceMgr.cpp	/^    unsigned LineNoOfQuery;$/;"	kind:m	struct:__anon842e844d0110::LineNoCacheTy	typeref:typename:unsigned	file:	access:public
LockFileManager	LockFileManager.cpp	/^LockFileManager::LockFileManager(StringRef FileName)$/;"	kind:f	class:LockFileManager	signature:(StringRef FileName)
LockFileManager::LockFileManager	LockFileManager.cpp	/^LockFileManager::LockFileManager(StringRef FileName)$/;"	kind:f	class:LockFileManager	signature:(StringRef FileName)
LockFileManager::getErrorMessage	LockFileManager.cpp	/^std::string LockFileManager::getErrorMessage() const {$/;"	kind:f	class:LockFileManager	typeref:typename:std::string	signature:() const
LockFileManager::getState	LockFileManager.cpp	/^LockFileManager::LockFileState LockFileManager::getState() const {$/;"	kind:f	class:LockFileManager	typeref:typename:LockFileManager::LockFileState	signature:() const
LockFileManager::processStillExecuting	LockFileManager.cpp	/^bool LockFileManager::processStillExecuting(StringRef HostID, int PID) {$/;"	kind:f	class:LockFileManager	typeref:typename:bool	signature:(StringRef HostID,int PID)
LockFileManager::readLockFile	LockFileManager.cpp	/^LockFileManager::readLockFile(StringRef LockFileName) {$/;"	kind:f	class:LockFileManager	typeref:typename:Optional<std::pair<std::string,int>>	signature:(StringRef LockFileName)
LockFileManager::unsafeRemoveLockFile	LockFileManager.cpp	/^std::error_code LockFileManager::unsafeRemoveLockFile() {$/;"	kind:f	class:LockFileManager	typeref:typename:std::error_code	signature:()
LockFileManager::waitForUnlock	LockFileManager.cpp	/^LockFileManager::WaitForUnlockResult LockFileManager::waitForUnlock() {$/;"	kind:f	class:LockFileManager	typeref:typename:LockFileManager::WaitForUnlockResult	signature:()
LockFileManager::~LockFileManager	LockFileManager.cpp	/^LockFileManager::~LockFileManager() {$/;"	kind:f	class:LockFileManager	signature:()
LogBuffer	GraphWriter.cpp	/^  std::string LogBuffer;$/;"	kind:m	struct:__anoneadbbe250110::GraphSession	typeref:typename:std::string	file:	access:public
LookupBucketFor	StringMap.cpp	/^unsigned StringMapImpl::LookupBucketFor(StringRef Name) {$/;"	kind:f	class:StringMapImpl	typeref:typename:unsigned	signature:(StringRef Name)
LookupNearestOption	CommandLine.cpp	/^static Option *LookupNearestOption(StringRef Arg,$/;"	kind:f	typeref:typename:Option *	file:	signature:(StringRef Arg,const StringMap<Option * > & OptionsMap,std::string & NearestString)
LookupOption	CommandLine.cpp	/^  Option *LookupOption(SubCommand &Sub, StringRef &Arg, StringRef &Value);$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:Option *	file:	access:private	signature:(SubCommand & Sub,StringRef & Arg,StringRef & Value)
LookupOption	CommandLine.cpp	/^Option *CommandLineParser::LookupOption(SubCommand &Sub, StringRef &Arg,$/;"	kind:f	class:CommandLineParser	typeref:typename:Option *	signature:(SubCommand & Sub,StringRef & Arg,StringRef & Value)
LookupSubCommand	CommandLine.cpp	/^  SubCommand *LookupSubCommand(StringRef Name);$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SubCommand *	file:	access:private	signature:(StringRef Name)
LookupSubCommand	CommandLine.cpp	/^SubCommand *CommandLineParser::LookupSubCommand(StringRef Name) {$/;"	kind:f	class:CommandLineParser	typeref:typename:SubCommand *	signature:(StringRef Name)
MAGIC1	regex2.h	/^#define	MAGIC1	/;"	kind:d
MAGIC2	regex2.h	/^#		define	MAGIC2	/;"	kind:d
MAP	regcomp.c	/^#	define	MAP(/;"	kind:d	file:	signature:(n)
MAP_ERR_TO_COND	ErrorHandling.cpp	/^#define MAP_ERR_TO_COND(/;"	kind:d	file:	signature:(x,y)
MCadd	regex2.h	/^#define	MCadd(/;"	kind:d	signature:(p,cs,cp)
MCin	regex2.h	/^#define	MCin(/;"	kind:d	signature:(p,cs,cp)
MCsub	regex2.h	/^#define	MCsub(/;"	kind:d	signature:(p,cs,cp)
MD5	MD5.cpp	/^MD5::MD5()$/;"	kind:f	class:llvm::MD5	signature:()
MFR	MemoryBuffer.cpp	/^  sys::fs::mapped_file_region MFR;$/;"	kind:m	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:sys::fs::mapped_file_region	file:	access:private
MORE	regcomp.c	/^#define	MORE(/;"	kind:d	file:	signature:()
MORE2	regcomp.c	/^#define	MORE2(/;"	kind:d	file:	signature:()
MUSTEAT	regcomp.c	/^#define	MUSTEAT(/;"	kind:d	file:	signature:(c,e)
MUSTNOTSEE	regcomp.c	/^#define	MUSTNOTSEE(/;"	kind:d	file:	signature:(c,e)
MUSTSEE	regcomp.c	/^#define	MUSTSEE(/;"	kind:d	file:	signature:(c,e)
MacinfoString	Dwarf.cpp	/^StringRef llvm::dwarf::MacinfoString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
MakeErrMsg	Unix/Unix.h	/^static inline bool MakeErrMsg($/;"	kind:f	typeref:typename:bool	signature:(std::string * ErrMsg,const std::string & prefix,int errnum=-1)
MakeErrMsg	Windows/WindowsSupport.h	/^inline bool MakeErrMsg(std::string *ErrMsg, const std::string &prefix) {$/;"	kind:f	typeref:typename:bool	signature:(std::string * ErrMsg,const std::string & prefix)
ManagedStaticBase::RegisterManagedStatic	ManagedStatic.cpp	/^void ManagedStaticBase::RegisterManagedStatic(void *(*Creator)(),$/;"	kind:f	class:ManagedStaticBase	typeref:typename:void	signature:(void * (* Creator)(),void (* Deleter)(void *)) const
ManagedStaticBase::destroy	ManagedStatic.cpp	/^void ManagedStaticBase::destroy() const {$/;"	kind:f	class:ManagedStaticBase	typeref:typename:void	signature:() const
ManagedStaticMutex	ManagedStatic.cpp	/^static sys::Mutex *ManagedStaticMutex = nullptr;$/;"	kind:v	typeref:typename:sys::Mutex *	file:
Map	Timer.cpp	/^  StringMap<std::pair<TimerGroup*, Name2TimerMap> > Map;$/;"	kind:m	class:__anoncc40abd70210::Name2PairMap	typeref:typename:StringMap<std::pair<TimerGroup *,Name2TimerMap>>	file:	access:private
MappingNode::increment	YAMLParser.cpp	/^void MappingNode::increment() {$/;"	kind:f	class:MappingNode	typeref:typename:void	signature:()
MaxOptWidth	CommandLine.cpp	/^static const size_t MaxOptWidth = 8; \/\/ arbitrary spacing for printOptionDiff$/;"	kind:v	typeref:typename:const size_t	file:
MemoryBuffer::getFile	MemoryBuffer.cpp	/^MemoryBuffer::getFile(const Twine &Filename, int64_t FileSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & Filename,int64_t FileSize,bool RequiresNullTerminator,bool IsVolatileSize)
MemoryBuffer::getFileAsStream	MemoryBuffer.cpp	/^MemoryBuffer::getFileAsStream(const Twine &Filename) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & Filename)
MemoryBuffer::getFileOrSTDIN	MemoryBuffer.cpp	/^MemoryBuffer::getFileOrSTDIN(const Twine &Filename, int64_t FileSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & Filename,int64_t FileSize,bool RequiresNullTerminator)
MemoryBuffer::getFileSlice	MemoryBuffer.cpp	/^MemoryBuffer::getFileSlice(const Twine &FilePath, uint64_t MapSize, $/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & FilePath,uint64_t MapSize,uint64_t Offset)
MemoryBuffer::getMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getMemBuffer(MemoryBufferRef Ref, bool RequiresNullTerminator) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(MemoryBufferRef Ref,bool RequiresNullTerminator)
MemoryBuffer::getMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getMemBuffer(StringRef InputData, StringRef BufferName,$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(StringRef InputData,StringRef BufferName,bool RequiresNullTerminator)
MemoryBuffer::getMemBufferCopy	MemoryBuffer.cpp	/^MemoryBuffer::getMemBufferCopy(StringRef InputData, const Twine &BufferName) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(StringRef InputData,const Twine & BufferName)
MemoryBuffer::getMemBufferRef	MemoryBuffer.cpp	/^MemoryBufferRef MemoryBuffer::getMemBufferRef() const {$/;"	kind:f	class:MemoryBuffer	typeref:typename:MemoryBufferRef	signature:() const
MemoryBuffer::getNewMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getNewMemBuffer(size_t Size, StringRef BufferName) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(size_t Size,StringRef BufferName)
MemoryBuffer::getNewUninitMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getNewUninitMemBuffer(size_t Size, const Twine &BufferName) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(size_t Size,const Twine & BufferName)
MemoryBuffer::getOpenFile	MemoryBuffer.cpp	/^MemoryBuffer::getOpenFile(int FD, const Twine &Filename, uint64_t FileSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(int FD,const Twine & Filename,uint64_t FileSize,bool RequiresNullTerminator,bool IsVolatileSize)
MemoryBuffer::getOpenFileSlice	MemoryBuffer.cpp	/^MemoryBuffer::getOpenFileSlice(int FD, const Twine &Filename, uint64_t MapSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(int FD,const Twine & Filename,uint64_t MapSize,int64_t Offset)
MemoryBuffer::getSTDIN	MemoryBuffer.cpp	/^ErrorOr<std::unique_ptr<MemoryBuffer>> MemoryBuffer::getSTDIN() {$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:()
MemoryBuffer::init	MemoryBuffer.cpp	/^void MemoryBuffer::init(const char *BufStart, const char *BufEnd,$/;"	kind:f	class:MemoryBuffer	typeref:typename:void	signature:(const char * BufStart,const char * BufEnd,bool RequiresNullTerminator)
MemoryBuffer::~MemoryBuffer	MemoryBuffer.cpp	/^MemoryBuffer::~MemoryBuffer() { }$/;"	kind:f	class:MemoryBuffer	signature:()
MemoryBufferMMapFile	MemoryBuffer.cpp	/^  MemoryBufferMMapFile(bool RequiresNullTerminator, int FD, uint64_t Len,$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	file:	access:public	signature:(bool RequiresNullTerminator,int FD,uint64_t Len,uint64_t Offset,std::error_code & EC)
MemoryBufferMMapFile	MemoryBuffer.cpp	/^class MemoryBufferMMapFile : public MemoryBuffer {$/;"	kind:c	namespace:__anon58000f290310	file:	inherits:MemoryBuffer
MemoryBufferMem	MemoryBuffer.cpp	/^  MemoryBufferMem(StringRef InputData, bool RequiresNullTerminator) {$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	file:	access:public	signature:(StringRef InputData,bool RequiresNullTerminator)
MemoryBufferMem	MemoryBuffer.cpp	/^class MemoryBufferMem : public MemoryBuffer {$/;"	kind:c	namespace:__anon58000f290210	file:	inherits:MemoryBuffer
MemoryFence	Atomic.cpp	/^void sys::MemoryFence() {$/;"	kind:f	class:sys	typeref:typename:void	signature:()
MoreHelp	CommandLine.cpp	/^  std::vector<StringRef> MoreHelp;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:std::vector<StringRef>	file:	access:public
MoveFrom	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::MoveFrom(unsigned SmallSize,$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(unsigned SmallSize,SmallPtrSetImplBase && RHS)
MoveHelper	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::MoveHelper(unsigned SmallSize,$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(unsigned SmallSize,SmallPtrSetImplBase && RHS)
MultipleErrors	Error.cpp	/^    MultipleErrors = 1,$/;"	kind:e	enum:__anondf7d4ec00110::ErrorErrorCode	file:	access:public
MutexImpl	Mutex.cpp	/^MutexImpl::MutexImpl( bool recursive) { }$/;"	kind:f	class:llvm::MutexImpl	signature:(bool recursive)
MutexImpl	Mutex.cpp	/^MutexImpl::MutexImpl( bool recursive)$/;"	kind:f	class:llvm::MutexImpl	signature:(bool recursive)
NC	regutils.h	/^#define	NC	/;"	kind:d
NDEBUG	regutils.h	/^#define	NDEBUG	/;"	kind:d
NEXT	regcomp.c	/^#define	NEXT(/;"	kind:d	file:	signature:()
NEXT2	regcomp.c	/^#define	NEXT2(/;"	kind:d	file:	signature:()
NEXTn	regcomp.c	/^#define	NEXTn(/;"	kind:d	file:	signature:(n)
N	regcomp.c	/^#	define	N	/;"	kind:d	file:
NOMINMAX	Windows/WindowsSupport.h	/^#define NOMINMAX$/;"	kind:d
NPAREN	regcomp.c	/^#	define	NPAREN	/;"	kind:d	file:
NaNL	APFloat.cpp	/^static const char NaNL[] = "nan";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
NaNU	APFloat.cpp	/^static const char NaNU[] = "NAN";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
Name	MemoryBuffer.cpp	/^  const Twine &Name;$/;"	kind:m	struct:__anon58000f290110::NamedBufferAlloc	typeref:typename:const Twine &	file:	access:public
Name2PairMap	Timer.cpp	/^class Name2PairMap {$/;"	kind:c	namespace:__anoncc40abd70210	file:
Name2TimerMap	Timer.cpp	/^typedef StringMap<Timer> Name2TimerMap;$/;"	kind:t	namespace:__anoncc40abd70210	typeref:typename:StringMap<Timer>	file:
NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:const char *	file:	access:public
NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:const char *	file:	access:public
NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:const char *	file:	access:public
NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:const char *	file:	access:public
NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:const char *	file:	access:public
NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:size_t	file:	access:public
NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:size_t	file:	access:public
NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:size_t	file:	access:public
NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:size_t	file:	access:public
NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:size_t	file:	access:public
NamedBufferAlloc	MemoryBuffer.cpp	/^  NamedBufferAlloc(const Twine &Name) : Name(Name) {}$/;"	kind:f	struct:__anon58000f290110::NamedBufferAlloc	file:	access:public	signature:(const Twine & Name)
NamedBufferAlloc	MemoryBuffer.cpp	/^struct NamedBufferAlloc {$/;"	kind:s	namespace:__anon58000f290110	file:
NamedGroupedTimers	Timer.cpp	/^static ManagedStatic<Name2PairMap> NamedGroupedTimers;$/;"	kind:v	typeref:typename:ManagedStatic<Name2PairMap>	file:
NamedRegionTimer	Timer.cpp	/^NamedRegionTimer::NamedRegionTimer(StringRef Name, StringRef Description,$/;"	kind:f	class:NamedRegionTimer	signature:(StringRef Name,StringRef Description,StringRef GroupName,StringRef GroupDescription,bool Enabled)
NamedRegionTimer::NamedRegionTimer	Timer.cpp	/^NamedRegionTimer::NamedRegionTimer(StringRef Name, StringRef Description,$/;"	kind:f	class:NamedRegionTimer	signature:(StringRef Name,StringRef Description,StringRef GroupName,StringRef GroupDescription,bool Enabled)
NegFeature	TargetParser.cpp	/^  const char *NegFeature;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:const char *	file:	access:public
NeonSupport	TargetParser.cpp	/^  ARM::NeonSupportLevel NeonSupport;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::NeonSupportLevel	file:	access:public
Next	CrashRecoveryContext.cpp	/^  const CrashRecoveryContextImpl *Next;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:const CrashRecoveryContextImpl *	file:	access:public
Node	YAMLParser.cpp	/^Node::Node(unsigned int Type, std::unique_ptr<Document> &D, StringRef A,$/;"	kind:f	class:Node	signature:(unsigned int Type,std::unique_ptr<Document> & D,StringRef A,StringRef T)
Node::Node	YAMLParser.cpp	/^Node::Node(unsigned int Type, std::unique_ptr<Document> &D, StringRef A,$/;"	kind:f	class:Node	signature:(unsigned int Type,std::unique_ptr<Document> & D,StringRef A,StringRef T)
Node::failed	YAMLParser.cpp	/^bool Node::failed() const {$/;"	kind:f	class:Node	typeref:typename:bool	signature:() const
Node::getAllocator	YAMLParser.cpp	/^BumpPtrAllocator &Node::getAllocator() {$/;"	kind:f	class:Node	typeref:typename:BumpPtrAllocator &	signature:()
Node::getNext	YAMLParser.cpp	/^Token Node::getNext() {$/;"	kind:f	class:Node	typeref:typename:Token	signature:()
Node::getVerbatimTag	YAMLParser.cpp	/^std::string Node::getVerbatimTag() const {$/;"	kind:f	class:Node	typeref:typename:std::string	signature:() const
Node::parseBlockNode	YAMLParser.cpp	/^Node *Node::parseBlockNode() {$/;"	kind:f	class:Node	typeref:typename:Node *	signature:()
Node::peekNext	YAMLParser.cpp	/^Token &Node::peekNext() {$/;"	kind:f	class:Node	typeref:typename:Token &	signature:()
Node::setError	YAMLParser.cpp	/^void Node::setError(const Twine &Msg, Token &Tok) const {$/;"	kind:f	class:Node	typeref:typename:void	signature:(const Twine & Msg,Token & Tok) const
NotUnderValgrind	Valgrind.cpp	/^static const bool NotUnderValgrind = InitNotUnderValgrind();$/;"	kind:v	typeref:typename:const bool	file:
NumSignals	CrashRecoveryContext.cpp	/^static const unsigned NumSignals = array_lengthof(Signals);$/;"	kind:v	typeref:typename:const unsigned	file:
OANY	regex2.h	/^#define	OANY	/;"	kind:d
OANYOF	regex2.h	/^#define	OANYOF	/;"	kind:d
OBACK_	regex2.h	/^#define	OBACK_	/;"	kind:d
OBOL	regex2.h	/^#define	OBOL	/;"	kind:d
OBOW	regex2.h	/^#define	OBOW	/;"	kind:d
OCHAR	regex2.h	/^#define	OCHAR	/;"	kind:d
OCH_	regex2.h	/^#define	OCH_	/;"	kind:d
OEND	regex2.h	/^#define	OEND	/;"	kind:d
OEOL	regex2.h	/^#define	OEOL	/;"	kind:d
OEOW	regex2.h	/^#define	OEOW	/;"	kind:d
OLPAREN	regex2.h	/^#define	OLPAREN	/;"	kind:d
OOR1	regex2.h	/^#define	OOR1	/;"	kind:d
OOR2	regex2.h	/^#define	OOR2	/;"	kind:d
OP	regex2.h	/^#define	OP(/;"	kind:d	signature:(n)
OPDMASK	regex2.h	/^#define	OPDMASK	/;"	kind:d
OPLUS_	regex2.h	/^#define	OPLUS_	/;"	kind:d
OPND	regex2.h	/^#define	OPND(/;"	kind:d	signature:(n)
OPRMASK	regex2.h	/^#define	OPRMASK	/;"	kind:d
OPSHIFT	regex2.h	/^#define	OPSHIFT	/;"	kind:d
OQUEST_	regex2.h	/^#define	OQUEST_	/;"	kind:d
OR	Options.cpp	/^static ManagedStatic<OptionRegistry> OR;$/;"	kind:v	typeref:typename:ManagedStatic<OptionRegistry>	file:
ORPAREN	regex2.h	/^#define	ORPAREN	/;"	kind:d
OUT	regex2.h	/^#define	OUT	/;"	kind:d
O_BACK	regex2.h	/^#define	O_BACK	/;"	kind:d
O_CH	regex2.h	/^#define	O_CH	/;"	kind:d
O_PLUS	regex2.h	/^#define	O_PLUS	/;"	kind:d
O_QUEST	regex2.h	/^#define	O_QUEST	/;"	kind:d
OpenedHandles	DynamicLibrary.cpp	/^static DenseSet<void *> *OpenedHandles = nullptr;$/;"	kind:v	typeref:typename:DenseSet<void * > *	file:
OperationEncodingString	Dwarf.cpp	/^StringRef llvm::dwarf::OperationEncodingString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
OptNameCompare	CommandLine.cpp	/^static int OptNameCompare(const std::pair<const char *, Option *> *LHS,$/;"	kind:f	typeref:typename:int	file:	signature:(const std::pair<const char *,Option * > * LHS,const std::pair<const char *,Option * > * RHS)
Option::addArgument	CommandLine.cpp	/^void Option::addArgument() {$/;"	kind:f	class:Option	typeref:typename:void	signature:()
Option::addOccurrence	CommandLine.cpp	/^bool Option::addOccurrence(unsigned pos, StringRef ArgName, StringRef Value,$/;"	kind:f	class:Option	typeref:typename:bool	signature:(unsigned pos,StringRef ArgName,StringRef Value,bool MultiArg)
Option::anchor	CommandLine.cpp	/^void Option::anchor() {}$/;"	kind:f	class:Option	typeref:typename:void	signature:()
Option::error	CommandLine.cpp	/^bool Option::error(const Twine &Message, StringRef ArgName) {$/;"	kind:f	class:Option	typeref:typename:bool	signature:(const Twine & Message,StringRef ArgName)
Option::removeArgument	CommandLine.cpp	/^void Option::removeArgument() { GlobalParser->removeOption(this); }$/;"	kind:f	class:Option	typeref:typename:void	signature:()
Option::setArgStr	CommandLine.cpp	/^void Option::setArgStr(StringRef S) {$/;"	kind:f	class:Option	typeref:typename:void	signature:(StringRef S)
OptionCategory::registerCategory	CommandLine.cpp	/^void OptionCategory::registerCategory() {$/;"	kind:f	class:OptionCategory	typeref:typename:void	signature:()
OptionCategoryCompare	CommandLine.cpp	/^  static int OptionCategoryCompare(OptionCategory *const *A,$/;"	kind:f	class:__anon2c11109d0510::CategorizedHelpPrinter	typeref:typename:int	file:	access:public	signature:(OptionCategory * const * A,OptionCategory * const * B)
OptionRegistry::addOption	Options.cpp	/^void OptionRegistry::addOption(void *Key, cl::Option *O) {$/;"	kind:f	class:OptionRegistry	typeref:typename:void	signature:(void * Key,cl::Option * O)
OptionRegistry::instance	Options.cpp	/^OptionRegistry &OptionRegistry::instance() { return *OR; }$/;"	kind:f	class:OptionRegistry	typeref:typename:OptionRegistry &	signature:()
OptionRegistry::~OptionRegistry	Options.cpp	/^OptionRegistry::~OptionRegistry() {$/;"	kind:f	class:OptionRegistry	signature:()
OptionValue::anchor	CommandLine.cpp	/^void OptionValue<boolOrDefault>::anchor() {}$/;"	kind:f	class:OptionValue	typeref:typename:void	signature:()
OptionValue::string::anchor	CommandLine.cpp	/^void OptionValue<std::string>::anchor() {}$/;"	kind:f	class:OptionValue::string	typeref:typename:void	signature:()
OrSlowCase	APInt.cpp	/^APInt APInt::OrSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
Output	YAMLTraits.cpp	/^Output::Output(raw_ostream &yout, void *context, int WrapColumn)$/;"	kind:f	class:Output	signature:(raw_ostream & yout,void * context,int WrapColumn)
Output::Output	YAMLTraits.cpp	/^Output::Output(raw_ostream &yout, void *context, int WrapColumn)$/;"	kind:f	class:Output	signature:(raw_ostream & yout,void * context,int WrapColumn)
Output::beginBitSetScalar	YAMLTraits.cpp	/^bool Output::beginBitSetScalar(bool &DoClear) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(bool & DoClear)
Output::beginDocuments	YAMLTraits.cpp	/^void Output::beginDocuments() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::beginEnumScalar	YAMLTraits.cpp	/^void Output::beginEnumScalar() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::beginFlowMapping	YAMLTraits.cpp	/^void Output::beginFlowMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::beginFlowSequence	YAMLTraits.cpp	/^unsigned Output::beginFlowSequence() {$/;"	kind:f	class:Output	typeref:typename:unsigned	signature:()
Output::beginMapping	YAMLTraits.cpp	/^void Output::beginMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::beginSequence	YAMLTraits.cpp	/^unsigned Output::beginSequence() {$/;"	kind:f	class:Output	typeref:typename:unsigned	signature:()
Output::bitSetMatch	YAMLTraits.cpp	/^bool Output::bitSetMatch(const char *Str, bool Matches) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(const char * Str,bool Matches)
Output::blockScalarString	YAMLTraits.cpp	/^void Output::blockScalarString(StringRef &S) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef & S)
Output::canElideEmptySequence	YAMLTraits.cpp	/^bool Output::canElideEmptySequence() {$/;"	kind:f	class:Output	typeref:typename:bool	signature:()
Output::endBitSetScalar	YAMLTraits.cpp	/^void Output::endBitSetScalar() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::endDocuments	YAMLTraits.cpp	/^void Output::endDocuments() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::endEnumScalar	YAMLTraits.cpp	/^void Output::endEnumScalar() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::endFlowMapping	YAMLTraits.cpp	/^void Output::endFlowMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::endFlowSequence	YAMLTraits.cpp	/^void Output::endFlowSequence() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::endMapping	YAMLTraits.cpp	/^void Output::endMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::endSequence	YAMLTraits.cpp	/^void Output::endSequence() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::flowKey	YAMLTraits.cpp	/^void Output::flowKey(StringRef Key) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef Key)
Output::mapTag	YAMLTraits.cpp	/^bool Output::mapTag(StringRef Tag, bool Use) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(StringRef Tag,bool Use)
Output::matchEnumFallback	YAMLTraits.cpp	/^bool Output::matchEnumFallback() {$/;"	kind:f	class:Output	typeref:typename:bool	signature:()
Output::matchEnumScalar	YAMLTraits.cpp	/^bool Output::matchEnumScalar(const char *Str, bool Match) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(const char * Str,bool Match)
Output::newLineCheck	YAMLTraits.cpp	/^void Output::newLineCheck() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::output	YAMLTraits.cpp	/^void Output::output(StringRef s) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef s)
Output::outputNewLine	YAMLTraits.cpp	/^void Output::outputNewLine() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::outputUpToEndOfLine	YAMLTraits.cpp	/^void Output::outputUpToEndOfLine(StringRef s) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef s)
Output::outputting	YAMLTraits.cpp	/^bool Output::outputting() {$/;"	kind:f	class:Output	typeref:typename:bool	signature:()
Output::paddedKey	YAMLTraits.cpp	/^void Output::paddedKey(StringRef key) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef key)
Output::postflightDocument	YAMLTraits.cpp	/^void Output::postflightDocument() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
Output::postflightElement	YAMLTraits.cpp	/^void Output::postflightElement(void *) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(void *)
Output::postflightFlowElement	YAMLTraits.cpp	/^void Output::postflightFlowElement(void *) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(void *)
Output::postflightKey	YAMLTraits.cpp	/^void Output::postflightKey(void *) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(void *)
Output::preflightDocument	YAMLTraits.cpp	/^bool Output::preflightDocument(unsigned index) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(unsigned index)
Output::preflightElement	YAMLTraits.cpp	/^bool Output::preflightElement(unsigned, void *&) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(unsigned,void * &)
Output::preflightFlowElement	YAMLTraits.cpp	/^bool Output::preflightFlowElement(unsigned, void *&) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(unsigned,void * &)
Output::preflightKey	YAMLTraits.cpp	/^bool Output::preflightKey(const char *Key, bool Required, bool SameAsDefault,$/;"	kind:f	class:Output	typeref:typename:bool	signature:(const char * Key,bool Required,bool SameAsDefault,bool & UseDefault,void * &)
Output::scalarString	YAMLTraits.cpp	/^void Output::scalarString(StringRef &S, bool MustQuote) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef & S,bool MustQuote)
Output::setError	YAMLTraits.cpp	/^void Output::setError(const Twine &message) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(const Twine & message)
Output::~Output	YAMLTraits.cpp	/^Output::~Output() {$/;"	kind:f	class:Output	signature:()
OverrideVersionPrinter	CommandLine.cpp	/^static void (*OverrideVersionPrinter)() = nullptr;$/;"	kind:v	typeref:typename:void (*)()	file:
PEEK	regcomp.c	/^#define	PEEK(/;"	kind:d	file:	signature:()
PEEK2	regcomp.c	/^#define	PEEK2(/;"	kind:d	file:	signature:()
PPCDoubleDouble	APFloat.cpp	/^  const fltSemantics APFloatBase::PPCDoubleDouble = {0, 0, 0, 0};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
PPCDoubleDoubleImpl	APFloat.cpp	/^  static const fltSemantics PPCDoubleDoubleImpl = {1023, -1022 + 53, 53 + 53,$/;"	kind:v	namespace:llvm	typeref:typename:const fltSemantics	file:
PRIME64_1	xxhash.cpp	/^static const uint64_t PRIME64_1 = 11400714785074694791ULL;$/;"	kind:v	typeref:typename:const uint64_t	file:
PRIME64_2	xxhash.cpp	/^static const uint64_t PRIME64_2 = 14029467366897019727ULL;$/;"	kind:v	typeref:typename:const uint64_t	file:
PRIME64_3	xxhash.cpp	/^static const uint64_t PRIME64_3 = 1609587929392839161ULL;$/;"	kind:v	typeref:typename:const uint64_t	file:
PRIME64_4	xxhash.cpp	/^static const uint64_t PRIME64_4 = 9650029242287828579ULL;$/;"	kind:v	typeref:typename:const uint64_t	file:
PRIME64_5	xxhash.cpp	/^static const uint64_t PRIME64_5 = 2870177450012600261ULL;$/;"	kind:v	typeref:typename:const uint64_t	file:
PRINT_OPT_DIFF	CommandLine.cpp	/^#define PRINT_OPT_DIFF(/;"	kind:d	file:	signature:(T)
PRINT_OPT_DIFF	CommandLine.cpp	/^PRINT_OPT_DIFF(bool)$/;"	kind:f	signature:(bool)
PackCategoriesIntoKey	APFloat.cpp	/^#define PackCategoriesIntoKey(/;"	kind:d	file:	signature:(_lhs,_rhs)
PadToColumn	FormattedStream.cpp	/^formatted_raw_ostream &formatted_raw_ostream::PadToColumn(unsigned NewCol) { $/;"	kind:f	class:formatted_raw_ostream	typeref:typename:formatted_raw_ostream &	signature:(unsigned NewCol)
ParseCommandLineOptions	CommandLine.cpp	/^  bool ParseCommandLineOptions(int argc, const char *const *argv,$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:bool	file:	access:public	signature:(int argc,const char * const * argv,StringRef Overview,bool IgnoreErrors)
ParseCommandLineOptions	CommandLine.cpp	/^bool CommandLineParser::ParseCommandLineOptions(int argc,$/;"	kind:f	class:CommandLineParser	typeref:typename:bool	signature:(int argc,const char * const * argv,StringRef Overview,bool IgnoreErrors)
ParseCommandLineOptions	CommandLine.cpp	/^bool cl::ParseCommandLineOptions(int argc, const char *const *argv,$/;"	kind:f	class:cl	typeref:typename:bool	signature:(int argc,const char * const * argv,StringRef Overview,bool IgnoreErrors)
ParseEnvironmentOptions	CommandLine.cpp	/^void cl::ParseEnvironmentOptions(const char *progName, const char *envVar,$/;"	kind:f	class:cl	typeref:typename:void	signature:(const char * progName,const char * envVar,const char * Overview)
PluginLoader::getNumPlugins	PluginLoader.cpp	/^unsigned PluginLoader::getNumPlugins() {$/;"	kind:f	class:PluginLoader	typeref:typename:unsigned	signature:()
PluginLoader::getPlugin	PluginLoader.cpp	/^std::string &PluginLoader::getPlugin(unsigned num) {$/;"	kind:f	class:PluginLoader	typeref:typename:std::string &	signature:(unsigned num)
PluginLoader::operator =	PluginLoader.cpp	/^void PluginLoader::operator=(const std::string &Filename) {$/;"	kind:f	class:PluginLoader	typeref:typename:void	signature:(const std::string & Filename)
Plugins	PluginLoader.cpp	/^static ManagedStatic<std::vector<std::string> > Plugins;$/;"	kind:v	typeref:typename:ManagedStatic<std::vector<std::string>>	file:
PluginsLock	PluginLoader.cpp	/^static ManagedStatic<sys::SmartMutex<true> > PluginsLock;$/;"	kind:v	typeref:typename:ManagedStatic<sys::SmartMutex<true>>	file:
PredClosure	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::set<change_ty> > PredClosure;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::set<change_ty>>	file:	access:private
Predecessors	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::vector<change_ty> > Predecessors;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::vector<change_ty>>	file:	access:private
PrettyStackTraceEntry	PrettyStackTrace.cpp	/^PrettyStackTraceEntry::PrettyStackTraceEntry() {$/;"	kind:f	class:PrettyStackTraceEntry	signature:()
PrettyStackTraceEntry::PrettyStackTraceEntry	PrettyStackTrace.cpp	/^PrettyStackTraceEntry::PrettyStackTraceEntry() {$/;"	kind:f	class:PrettyStackTraceEntry	signature:()
PrettyStackTraceEntry::~PrettyStackTraceEntry	PrettyStackTrace.cpp	/^PrettyStackTraceEntry::~PrettyStackTraceEntry() {$/;"	kind:f	class:PrettyStackTraceEntry	signature:()
PrettyStackTraceHead	PrettyStackTrace.cpp	/^static LLVM_THREAD_LOCAL PrettyStackTraceEntry *PrettyStackTraceHead = nullptr;$/;"	kind:v	typeref:typename:LLVM_THREAD_LOCAL PrettyStackTraceEntry *	file:
PrettyStackTraceProgram::print	PrettyStackTrace.cpp	/^void PrettyStackTraceProgram::print(raw_ostream &OS) const {$/;"	kind:f	class:PrettyStackTraceProgram	typeref:typename:void	signature:(raw_ostream & OS) const
PrettyStackTraceString::print	PrettyStackTrace.cpp	/^void PrettyStackTraceString::print(raw_ostream &OS) const {$/;"	kind:f	class:PrettyStackTraceString	typeref:typename:void	signature:(raw_ostream & OS) const
PrevActions	CrashRecoveryContext.cpp	/^static struct sigaction PrevActions[NumSignals];$/;"	kind:v	typeref:struct:sigaction[]	file:
PrintAllOptions	CommandLine.cpp	/^static cl::opt<bool> PrintAllOptions($/;"	kind:v	typeref:typename:cl::opt<bool>	file:
PrintCurStackTrace	PrettyStackTrace.cpp	/^static void PrintCurStackTrace(raw_ostream &OS) {$/;"	kind:f	typeref:typename:void	file:	signature:(raw_ostream & OS)
PrintHelpMessage	CommandLine.cpp	/^void cl::PrintHelpMessage(bool Hidden, bool Categorized) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(bool Hidden,bool Categorized)
PrintIncludeStack	SourceMgr.cpp	/^void SourceMgr::PrintIncludeStack(SMLoc IncludeLoc, raw_ostream &OS) const {$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(SMLoc IncludeLoc,raw_ostream & OS) const
PrintMessage	SourceMgr.cpp	/^void SourceMgr::PrintMessage(SMLoc Loc, SourceMgr::DiagKind Kind,$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Msg,ArrayRef<SMRange> Ranges,ArrayRef<SMFixIt> FixIts,bool ShowColors) const
PrintMessage	SourceMgr.cpp	/^void SourceMgr::PrintMessage(raw_ostream &OS, SMLoc Loc,$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(raw_ostream & OS,SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Msg,ArrayRef<SMRange> Ranges,ArrayRef<SMFixIt> FixIts,bool ShowColors) const
PrintMessage	SourceMgr.cpp	/^void SourceMgr::PrintMessage(raw_ostream &OS, const SMDiagnostic &Diagnostic,$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(raw_ostream & OS,const SMDiagnostic & Diagnostic,bool ShowColors) const
PrintOnExit	Statistic.cpp	/^static bool PrintOnExit;$/;"	kind:v	typeref:typename:bool	file:
PrintOptionValues	CommandLine.cpp	/^void cl::PrintOptionValues() { GlobalParser->printOptionValues(); }$/;"	kind:f	class:cl	typeref:typename:void	signature:()
PrintOptions	CommandLine.cpp	/^static cl::opt<bool> PrintOptions($/;"	kind:v	typeref:typename:cl::opt<bool>	file:
PrintQueuedTimers	Timer.cpp	/^void TimerGroup::PrintQueuedTimers(raw_ostream &OS) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS)
PrintRecyclerStats	Allocator.cpp	/^void PrintRecyclerStats(size_t Size,$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(size_t Size,size_t Align,size_t FreeListSize)
PrintStack	PrettyStackTrace.cpp	/^static void PrintStack(raw_ostream &OS) {$/;"	kind:f	typeref:typename:void	file:	signature:(raw_ostream & OS)
PrintStatistics	Statistic.cpp	/^  friend void llvm::PrintStatistics();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo::llvm	typeref:typename:void	file:	signature:()
PrintStatistics	Statistic.cpp	/^  friend void llvm::PrintStatistics(raw_ostream &OS);$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo::llvm	typeref:typename:void	file:	signature:(raw_ostream & OS)
PrintStatistics	Statistic.cpp	/^void llvm::PrintStatistics() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
PrintStatistics	Statistic.cpp	/^void llvm::PrintStatistics(raw_ostream &OS) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & OS)
PrintStatisticsJSON	Statistic.cpp	/^  friend void llvm::PrintStatisticsJSON(raw_ostream &OS);$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo::llvm	typeref:typename:void	file:	signature:(raw_ostream & OS)
PrintStatisticsJSON	Statistic.cpp	/^void llvm::PrintStatisticsJSON(raw_ostream &OS) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & OS)
PrintVersionMessage	CommandLine.cpp	/^void cl::PrintVersionMessage() { VersionPrinterInstance.print(); }$/;"	kind:f	class:cl	typeref:typename:void	signature:()
Process::AreCoreFilesPrevented	Process.cpp	/^bool Process::AreCoreFilesPrevented() {$/;"	kind:f	class:Process	typeref:typename:bool	signature:()
Process::FindInEnvPath	Process.cpp	/^Optional<std::string> Process::FindInEnvPath(const std::string& EnvName,$/;"	kind:f	class:Process	typeref:typename:Optional<std::string>	signature:(const std::string & EnvName,const std::string & FileName)
ProcessorFeatures	Host.cpp	/^enum ProcessorFeatures {$/;"	kind:g	file:
ProcessorSubtypes	Host.cpp	/^enum ProcessorSubtypes {$/;"	kind:g	file:
ProcessorTypes	Host.cpp	/^enum ProcessorTypes {$/;"	kind:g	file:
ProcessorVendors	Host.cpp	/^enum ProcessorVendors {$/;"	kind:g	file:
Profile	APFloat.cpp	/^void IEEEFloat::Profile(FoldingSetNodeID &ID) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(FoldingSetNodeID & ID) const
Profile	APInt.cpp	/^void APInt::Profile(FoldingSetNodeID& ID) const {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(FoldingSetNodeID & ID) const
Profile	APSInt.cpp	/^void APSInt::Profile(FoldingSetNodeID& ID) const {$/;"	kind:f	class:APSInt	typeref:typename:void	signature:(FoldingSetNodeID & ID) const
ProgramName	CommandLine.cpp	/^  std::string ProgramName;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:std::string	file:	access:public
ProgramOverview	CommandLine.cpp	/^  StringRef ProgramOverview;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:StringRef	file:	access:public
ProvideOption	CommandLine.cpp	/^static inline bool ProvideOption(Option *Handler, StringRef ArgName,$/;"	kind:f	typeref:typename:bool	file:	signature:(Option * Handler,StringRef ArgName,StringRef Value,int argc,const char * const * argv,int & i)
ProvidePositionalOption	CommandLine.cpp	/^static bool ProvidePositionalOption(Option *Handler, StringRef Arg, int i) {$/;"	kind:f	typeref:typename:bool	file:	signature:(Option * Handler,StringRef Arg,int i)
QUOTED	CommandLine.cpp	/^  enum { INIT, UNQUOTED, QUOTED } State = INIT;$/;"	kind:e	enum:cl::TokenizeWindowsCommandLine::__anon2c11109d0403	file:	access:public
REGEX_BAD	regex2.h	/^#		define	REGEX_BAD	/;"	kind:d
REG_ASSERT	regex_impl.h	/^#define	REG_ASSERT	/;"	kind:d
REG_ATOI	regex_impl.h	/^#define	REG_ATOI	/;"	kind:d
REG_BACKR	regex_impl.h	/^#define	REG_BACKR	/;"	kind:d
REG_BADBR	regex_impl.h	/^#define	REG_BADBR	/;"	kind:d
REG_BADPAT	regex_impl.h	/^#define	REG_BADPAT	/;"	kind:d
REG_BADRPT	regex_impl.h	/^#define	REG_BADRPT	/;"	kind:d
REG_BASIC	regex_impl.h	/^#define	REG_BASIC	/;"	kind:d
REG_DUMP	regex_impl.h	/^#define	REG_DUMP	/;"	kind:d
REG_EBRACE	regex_impl.h	/^#define	REG_EBRACE	/;"	kind:d
REG_EBRACK	regex_impl.h	/^#define	REG_EBRACK	/;"	kind:d
REG_ECOLLATE	regex_impl.h	/^#define	REG_ECOLLATE	/;"	kind:d
REG_ECTYPE	regex_impl.h	/^#define	REG_ECTYPE	/;"	kind:d
REG_EESCAPE	regex_impl.h	/^#define	REG_EESCAPE	/;"	kind:d
REG_EMPTY	regex_impl.h	/^#define	REG_EMPTY	/;"	kind:d
REG_EPAREN	regex_impl.h	/^#define	REG_EPAREN	/;"	kind:d
REG_ERANGE	regex_impl.h	/^#define	REG_ERANGE	/;"	kind:d
REG_ESPACE	regex_impl.h	/^#define	REG_ESPACE	/;"	kind:d
REG_ESUBREG	regex_impl.h	/^#define	REG_ESUBREG	/;"	kind:d
REG_EXTENDED	regex_impl.h	/^#define	REG_EXTENDED	/;"	kind:d
REG_ICASE	regex_impl.h	/^#define	REG_ICASE	/;"	kind:d
REG_INVARG	regex_impl.h	/^#define	REG_INVARG	/;"	kind:d
REG_ITOA	regex_impl.h	/^#define	REG_ITOA	/;"	kind:d
REG_LARGE	regex_impl.h	/^#define	REG_LARGE	/;"	kind:d
REG_NEWLINE	regex_impl.h	/^#define	REG_NEWLINE	/;"	kind:d
REG_NOMATCH	regex_impl.h	/^#define	REG_NOMATCH	/;"	kind:d
REG_NOSPEC	regex_impl.h	/^#define	REG_NOSPEC	/;"	kind:d
REG_NOSUB	regex_impl.h	/^#define	REG_NOSUB	/;"	kind:d
REG_NOTBOL	regex_impl.h	/^#define	REG_NOTBOL	/;"	kind:d
REG_NOTEOL	regex_impl.h	/^#define	REG_NOTEOL	/;"	kind:d
REG_PEND	regex_impl.h	/^#define	REG_PEND	/;"	kind:d
REG_STARTEND	regex_impl.h	/^#define	REG_STARTEND	/;"	kind:d
REG_TRACE	regex_impl.h	/^#define	REG_TRACE	/;"	kind:d
REP	regcomp.c	/^#	define	REP(/;"	kind:d	file:	signature:(f,t)
REQUIRE	regcomp.c	/^#define	REQUIRE(/;"	kind:d	file:	signature:(co,e)
RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::RWMutexImpl() { }$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::RWMutexImpl()$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
RandomNumberGenerator	RandomNumberGenerator.cpp	/^RandomNumberGenerator::RandomNumberGenerator(StringRef Salt) {$/;"	kind:f	class:RandomNumberGenerator	signature:(StringRef Salt)
RandomNumberGenerator::RandomNumberGenerator	RandomNumberGenerator.cpp	/^RandomNumberGenerator::RandomNumberGenerator(StringRef Salt) {$/;"	kind:f	class:RandomNumberGenerator	signature:(StringRef Salt)
RandomNumberGenerator::operator ()	RandomNumberGenerator.cpp	/^RandomNumberGenerator::result_type RandomNumberGenerator::operator()() {$/;"	kind:f	class:RandomNumberGenerator	typeref:typename:RandomNumberGenerator::result_type	signature:()
Range	YAMLParser.cpp	/^  StringRef Range;$/;"	kind:m	struct:llvm::yaml::Token	typeref:typename:StringRef	file:	access:public
RefCountedBaseVPTR::anchor	IntrusiveRefCntPtr.cpp	/^void RefCountedBaseVPTR::anchor() { }$/;"	kind:f	class:RefCountedBaseVPTR	typeref:typename:void	signature:()
RegEx	SpecialCaseList.cpp	/^  std::unique_ptr<Regex> RegEx;$/;"	kind:m	struct:llvm::SpecialCaseList::Entry	typeref:typename:std::unique_ptr<Regex>	file:	access:public
RegTraits	Windows/WindowsSupport.h	/^struct RegTraits : CommonHandleTraits {$/;"	kind:s	inherits:CommonHandleTraits
RegTraits::Close	Windows/WindowsSupport.h	/^  static void Close(handle_type h) {$/;"	kind:f	struct:RegTraits	typeref:typename:void	access:public	signature:(handle_type h)
RegTraits::GetInvalid	Windows/WindowsSupport.h	/^  static handle_type GetInvalid() {$/;"	kind:f	struct:RegTraits	typeref:typename:handle_type	access:public	signature:()
RegTraits::IsValid	Windows/WindowsSupport.h	/^  static bool IsValid(handle_type h) {$/;"	kind:f	struct:RegTraits	typeref:typename:bool	access:public	signature:(handle_type h)
RegTraits::handle_type	Windows/WindowsSupport.h	/^  typedef HKEY handle_type;$/;"	kind:t	struct:RegTraits	typeref:typename:HKEY	access:public
Regex	Regex.cpp	/^Regex::Regex() : preg(nullptr), error(REG_BADPAT) {}$/;"	kind:f	class:Regex	signature:()
Regex	Regex.cpp	/^Regex::Regex(Regex &&regex) {$/;"	kind:f	class:Regex	signature:(Regex && regex)
Regex	Regex.cpp	/^Regex::Regex(StringRef regex, unsigned Flags) {$/;"	kind:f	class:Regex	signature:(StringRef regex,unsigned Flags)
Regex::Regex	Regex.cpp	/^Regex::Regex() : preg(nullptr), error(REG_BADPAT) {}$/;"	kind:f	class:Regex	signature:()
Regex::Regex	Regex.cpp	/^Regex::Regex(Regex &&regex) {$/;"	kind:f	class:Regex	signature:(Regex && regex)
Regex::Regex	Regex.cpp	/^Regex::Regex(StringRef regex, unsigned Flags) {$/;"	kind:f	class:Regex	signature:(StringRef regex,unsigned Flags)
Regex::escape	Regex.cpp	/^std::string Regex::escape(StringRef String) {$/;"	kind:f	class:Regex	typeref:typename:std::string	signature:(StringRef String)
Regex::getNumMatches	Regex.cpp	/^unsigned Regex::getNumMatches() const {$/;"	kind:f	class:Regex	typeref:typename:unsigned	signature:() const
Regex::isLiteralERE	Regex.cpp	/^bool Regex::isLiteralERE(StringRef Str) {$/;"	kind:f	class:Regex	typeref:typename:bool	signature:(StringRef Str)
Regex::isValid	Regex.cpp	/^bool Regex::isValid(std::string &Error) {$/;"	kind:f	class:Regex	typeref:typename:bool	signature:(std::string & Error)
Regex::match	Regex.cpp	/^bool Regex::match(StringRef String, SmallVectorImpl<StringRef> *Matches){$/;"	kind:f	class:Regex	typeref:typename:bool	signature:(StringRef String,SmallVectorImpl<StringRef> * Matches)
Regex::sub	Regex.cpp	/^std::string Regex::sub(StringRef Repl, StringRef String,$/;"	kind:f	class:Regex	typeref:typename:std::string	signature:(StringRef Repl,StringRef String,std::string * Error)
Regex::~Regex	Regex.cpp	/^Regex::~Regex() {$/;"	kind:f	class:Regex	signature:()
RegexMetachars	Regex.cpp	/^static const char RegexMetachars[] = "()^$|*+?.[]\\\\{}";$/;"	kind:v	typeref:typename:const char[]	file:
RegisterCrashPrinter	PrettyStackTrace.cpp	/^static bool RegisterCrashPrinter() {$/;"	kind:f	typeref:typename:bool	file:	signature:()
RegisterManagedStatic	ManagedStatic.cpp	/^void ManagedStaticBase::RegisterManagedStatic(void *(*Creator)(),$/;"	kind:f	class:ManagedStaticBase	typeref:typename:void	signature:(void * (* Creator)(),void (* Deleter)(void *)) const
RegisterStatistic	Statistic.cpp	/^void Statistic::RegisterStatistic() {$/;"	kind:f	class:Statistic	typeref:typename:void	signature:()
RegisterTarget	TargetRegistry.cpp	/^void TargetRegistry::RegisterTarget(Target &T,$/;"	kind:f	class:TargetRegistry	typeref:typename:void	signature:(Target & T,const char * Name,const char * ShortDesc,Target::ArchMatchFnTy ArchMatchFn,bool HasJIT)
RegisteredOptionCategories	CommandLine.cpp	/^  SmallPtrSet<OptionCategory *, 16> RegisteredOptionCategories;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SmallPtrSet<OptionCategory *,16>	file:	access:public
RegisteredSubCommands	CommandLine.cpp	/^  SmallPtrSet<SubCommand *, 4> RegisteredSubCommands;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SmallPtrSet<SubCommand *,4>	file:	access:public
RehashTable	StringMap.cpp	/^unsigned StringMapImpl::RehashTable(unsigned BucketNo) {$/;"	kind:f	class:StringMapImpl	typeref:typename:unsigned	signature:(unsigned BucketNo)
RemoveImmediately	LockFileManager.cpp	/^  bool RemoveImmediately;$/;"	kind:m	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	typeref:typename:bool	file:	access:private
RemoveKey	StringMap.cpp	/^StringMapEntryBase *StringMapImpl::RemoveKey(StringRef Key) {$/;"	kind:f	class:StringMapImpl	typeref:typename:StringMapEntryBase *	signature:(StringRef Key)
RemoveKey	StringMap.cpp	/^void StringMapImpl::RemoveKey(StringMapEntryBase *V) {$/;"	kind:f	class:StringMapImpl	typeref:typename:void	signature:(StringMapEntryBase * V)
RemoveNode	FoldingSet.cpp	/^bool FoldingSetImpl::RemoveNode(Node *N) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:bool	signature:(Node * N)
RemoveUniqueLockFileOnSignal	LockFileManager.cpp	/^  RemoveUniqueLockFileOnSignal(StringRef Name)$/;"	kind:f	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	file:	access:public	signature:(StringRef Name)
RemoveUniqueLockFileOnSignal	LockFileManager.cpp	/^class RemoveUniqueLockFileOnSignal {$/;"	kind:c	namespace:__anonb734c93a0110	file:
Required	DAGDeltaAlgorithm.cpp	/^  const changeset_ty &Required;$/;"	kind:m	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:const changeset_ty &	file:	access:private
RequiresValue	CommandLine.cpp	/^static bool RequiresValue(const Option *O) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const Option * O)
ResetAllOptionOccurrences	CommandLine.cpp	/^  void ResetAllOptionOccurrences();$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:()
ResetAllOptionOccurrences	CommandLine.cpp	/^void CommandLineParser::ResetAllOptionOccurrences() {$/;"	kind:f	class:CommandLineParser	typeref:typename:void	signature:()
ResetAllOptionOccurrences	CommandLine.cpp	/^void cl::ResetAllOptionOccurrences() {$/;"	kind:f	class:cl	typeref:typename:void	signature:()
ResetCommandLineParser	CommandLine.cpp	/^void cl::ResetCommandLineParser() { GlobalParser->reset(); }$/;"	kind:f	class:cl	typeref:typename:void	signature:()
RestorePrettyStackState	PrettyStackTrace.cpp	/^void llvm::RestorePrettyStackState(const void *Top) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const void * Top)
Restriction	TargetParser.cpp	/^  ARM::FPURestriction Restriction;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::FPURestriction	file:	access:public
Result	CrashRecoveryContext.cpp	/^  bool Result;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:bool	file:	access:public
ReverseStackTrace	PrettyStackTrace.cpp	/^PrettyStackTraceEntry *ReverseStackTrace(PrettyStackTraceEntry *Head) {$/;"	kind:f	namespace:llvm	typeref:typename:PrettyStackTraceEntry *	signature:(PrettyStackTraceEntry * Head)
Roots	DAGDeltaAlgorithm.cpp	/^  std::vector<change_ty> Roots;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::vector<change_ty>	file:	access:private
RoundDoubleToAPInt	APInt.cpp	/^APInt llvm::APIntOps::RoundDoubleToAPInt(double Double, unsigned width) {$/;"	kind:f	class:llvm::APIntOps	typeref:typename:APInt	signature:(double Double,unsigned width)
Run	DAGDeltaAlgorithm.cpp	/^  changeset_ty Run();$/;"	kind:p	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:changeset_ty	file:	access:public	signature:()
Run	DAGDeltaAlgorithm.cpp	/^DAGDeltaAlgorithm::Run(const changeset_ty &Changes,$/;"	kind:f	class:DAGDeltaAlgorithm	typeref:typename:DAGDeltaAlgorithm::changeset_ty	signature:(const changeset_ty & Changes,const std::vector<edge_ty> & Dependencies)
Run	DAGDeltaAlgorithm.cpp	/^DAGDeltaAlgorithmImpl::Run() {$/;"	kind:f	class:DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::changeset_ty	signature:()
Run	DeltaAlgorithm.cpp	/^DeltaAlgorithm::changeset_ty DeltaAlgorithm::Run(const changeset_ty &Changes) {$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:DeltaAlgorithm::changeset_ty	signature:(const changeset_ty & Changes)
RunSafely	CrashRecoveryContext.cpp	/^bool CrashRecoveryContext::RunSafely(function_ref<void()> Fn) {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:bool	signature:(function_ref<void ()> Fn)
RunSafelyOnThread	CrashRecoveryContext.cpp	/^bool CrashRecoveryContext::RunSafelyOnThread(function_ref<void()> Fn,$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:bool	signature:(function_ref<void ()> Fn,unsigned RequestedStackSize)
RunSafelyOnThreadInfo	CrashRecoveryContext.cpp	/^struct RunSafelyOnThreadInfo {$/;"	kind:s	namespace:__anon80fe52fb0210	file:
RunSafelyOnThread_Dispatch	CrashRecoveryContext.cpp	/^static void RunSafelyOnThread_Dispatch(void *UserData) {$/;"	kind:f	typeref:typename:void	file:	signature:(void * UserData)
RunSignalHandlers	Signals.cpp	/^void sys::RunSignalHandlers() {$/;"	kind:f	class:llvm::sys	typeref:typename:void	signature:()
RunningOnValgrind	Valgrind.cpp	/^bool llvm::sys::RunningOnValgrind() {$/;"	kind:f	class:llvm::sys	typeref:typename:bool	signature:()
RunningWindows8OrGreater	Windows/WindowsSupport.h	/^inline bool RunningWindows8OrGreater() {$/;"	kind:f	typeref:typename:bool	signature:()
SEE	regcomp.c	/^#define	SEE(/;"	kind:d	file:	signature:(c)
SEED_0	SHA1.cpp	/^#define SEED_0 /;"	kind:d	file:
SEED_1	SHA1.cpp	/^#define SEED_1 /;"	kind:d	file:
SEED_2	SHA1.cpp	/^#define SEED_2 /;"	kind:d	file:
SEED_3	SHA1.cpp	/^#define SEED_3 /;"	kind:d	file:
SEED_4	SHA1.cpp	/^#define SEED_4 /;"	kind:d	file:
SEETWO	regcomp.c	/^#define	SEETWO(/;"	kind:d	file:	signature:(a,b)
SET	MD5.cpp	/^#define SET(/;"	kind:d	file:	signature:(n)
SET0	regexec.c	/^#define	SET0(/;"	kind:d	file:	signature:(v,n)
SET1	regexec.c	/^#define	SET1(/;"	kind:d	file:	signature:(v,n)
SETERROR	regcomp.c	/^#define	SETERROR(/;"	kind:d	file:	signature:(e)
SETUP	regexec.c	/^#define	SETUP(/;"	kind:d	file:	signature:(v)
SHA1::addUncounted	SHA1.cpp	/^void SHA1::addUncounted(uint8_t Data) {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:(uint8_t Data)
SHA1::final	SHA1.cpp	/^StringRef SHA1::final() {$/;"	kind:f	class:SHA1	typeref:typename:StringRef	signature:()
SHA1::hash	SHA1.cpp	/^std::array<uint8_t, 20> SHA1::hash(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:SHA1	typeref:typename:std::array<uint8_t,20>	signature:(ArrayRef<uint8_t> Data)
SHA1::hashBlock	SHA1.cpp	/^void SHA1::hashBlock() {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:()
SHA1::init	SHA1.cpp	/^void SHA1::init() {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:()
SHA1::pad	SHA1.cpp	/^void SHA1::pad() {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:()
SHA1::result	SHA1.cpp	/^StringRef SHA1::result() {$/;"	kind:f	class:SHA1	typeref:typename:StringRef	signature:()
SHA1::update	SHA1.cpp	/^void SHA1::update(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:(ArrayRef<uint8_t> Data)
SHA1::writebyte	SHA1.cpp	/^void SHA1::writebyte(uint8_t Data) {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:(uint8_t Data)
SHA1_K0	SHA1.cpp	/^#define SHA1_K0 /;"	kind:d	file:
SHA1_K20	SHA1.cpp	/^#define SHA1_K20 /;"	kind:d	file:
SHA1_K40	SHA1.cpp	/^#define SHA1_K40 /;"	kind:d	file:
SHA1_K60	SHA1.cpp	/^#define SHA1_K60 /;"	kind:d	file:
SHA_BIG_ENDIAN	SHA1.cpp	/^#define SHA_BIG_ENDIAN$/;"	kind:d	file:
SIG_AMD	Host.cpp	/^  SIG_AMD = 0x68747541 \/* Auth *\/$/;"	kind:e	enum:VendorSignatures	file:	access:public
SIG_INTEL	Host.cpp	/^  SIG_INTEL = 0x756e6547 \/* Genu *\/,$/;"	kind:e	enum:VendorSignatures	file:	access:public
SIZE_MAX	regcomp.c	/^#define SIZE_MAX /;"	kind:d	file:
SM	YAMLParser.cpp	/^  SourceMgr &SM;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:SourceMgr &	file:	access:private
SMDiagnostic	SourceMgr.cpp	/^SMDiagnostic::SMDiagnostic(const SourceMgr &sm, SMLoc L, StringRef FN,$/;"	kind:f	class:SMDiagnostic	signature:(const SourceMgr & sm,SMLoc L,StringRef FN,int Line,int Col,SourceMgr::DiagKind Kind,StringRef Msg,StringRef LineStr,ArrayRef<std::pair<unsigned,unsigned>> Ranges,ArrayRef<SMFixIt> Hints)
SMDiagnostic::SMDiagnostic	SourceMgr.cpp	/^SMDiagnostic::SMDiagnostic(const SourceMgr &sm, SMLoc L, StringRef FN,$/;"	kind:f	class:SMDiagnostic	signature:(const SourceMgr & sm,SMLoc L,StringRef FN,int Line,int Col,SourceMgr::DiagKind Kind,StringRef Msg,StringRef LineStr,ArrayRef<std::pair<unsigned,unsigned>> Ranges,ArrayRef<SMFixIt> Hints)
SMDiagnostic::print	SourceMgr.cpp	/^void SMDiagnostic::print(const char *ProgName, raw_ostream &S, bool ShowColors,$/;"	kind:f	class:SMDiagnostic	typeref:typename:void	signature:(const char * ProgName,raw_ostream & S,bool ShowColors,bool ShowKindLabel) const
SNAMES	regexec.c	/^#define SNAMES	/;"	kind:d	file:
SOP	regex2.h	/^#define	SOP(/;"	kind:d	signature:(op,opnd)
STATESETUP	regexec.c	/^#define	STATESETUP(/;"	kind:d	file:	signature:(m,n)
STATESETUP	regexec.c	/^#define	STATESETUP(/;"	kind:d	file:	signature:(m,nv)
STATETEARDOWN	regexec.c	/^#define	STATETEARDOWN(/;"	kind:d	file:	signature:(m)
STATEVARS	regexec.c	/^#define	STATEVARS	/;"	kind:d	file:
STDERR_FILENO	raw_ostream.cpp	/^# define STDERR_FILENO /;"	kind:d	file:
STDIN_FILENO	raw_ostream.cpp	/^# define STDIN_FILENO /;"	kind:d	file:
STDOUT_FILENO	raw_ostream.cpp	/^# define STDOUT_FILENO /;"	kind:d	file:
STEP	MD5.cpp	/^#define STEP(/;"	kind:d	file:	signature:(f,a,b,c,d,x,t,s)
SavePrettyStackState	PrettyStackTrace.cpp	/^const void *llvm::SavePrettyStackState() {$/;"	kind:f	class:llvm	typeref:typename:const void *	signature:()
SavedRegisterMask	ARMWinEH.cpp	/^std::pair<uint16_t, uint32_t> SavedRegisterMask(const RuntimeFunction &RF) {$/;"	kind:f	namespace:llvm::ARM::WinEH	typeref:typename:std::pair<uint16_t,uint32_t>	signature:(const RuntimeFunction & RF)
ScalarNode::getValue	YAMLParser.cpp	/^StringRef ScalarNode::getValue(SmallVectorImpl<char> &Storage) const {$/;"	kind:f	class:ScalarNode	typeref:typename:StringRef	signature:(SmallVectorImpl<char> & Storage) const
ScalarNode::unescapeDoubleQuoted	YAMLParser.cpp	/^StringRef ScalarNode::unescapeDoubleQuoted( StringRef UnquotedValue$/;"	kind:f	class:ScalarNode	typeref:typename:StringRef	signature:(StringRef UnquotedValue,StringRef::size_type i,SmallVectorImpl<char> & Storage) const
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex16>::input(StringRef Scalar, void *, Hex16 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex16 & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex32>::input(StringRef Scalar, void *, Hex32 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex32 & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex64>::input(StringRef Scalar, void *, Hex64 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex64 & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex8>::input(StringRef Scalar, void *, Hex8 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex8 & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<StringRef>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,StringRef & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<bool>::input(StringRef Scalar, void *, bool &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,bool & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<double>::input(StringRef Scalar, void *, double &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,double & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<float>::input(StringRef Scalar, void *, float &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,float & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<int16_t>::input(StringRef Scalar, void *, int16_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int16_t & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<int32_t>::input(StringRef Scalar, void *, int32_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int32_t & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<int64_t>::input(StringRef Scalar, void *, int64_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int64_t & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<int8_t>::input(StringRef Scalar, void *, int8_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int8_t & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint16_t>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint16_t & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint32_t>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint32_t & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint64_t>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint64_t & Val)
ScalarTraits::input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint8_t>::input(StringRef Scalar, void *, uint8_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint8_t & Val)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<Hex16>::output(const Hex16 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex16 & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<Hex32>::output(const Hex32 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex32 & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<Hex64>::output(const Hex64 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex64 & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<Hex8>::output(const Hex8 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex8 & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<StringRef>::output(const StringRef &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const StringRef & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<bool>::output(const bool &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const bool & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<double>::output(const double &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const double & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<float>::output(const float &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const float & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<int16_t>::output(const int16_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int16_t & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<int32_t>::output(const int32_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int32_t & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<int64_t>::output(const int64_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int64_t & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<int8_t>::output(const int8_t &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int8_t & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<uint16_t>::output(const uint16_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint16_t & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<uint32_t>::output(const uint32_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint32_t & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<uint64_t>::output(const uint64_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint64_t & Val,void *,raw_ostream & Out)
ScalarTraits::output	YAMLTraits.cpp	/^void ScalarTraits<uint8_t>::output(const uint8_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint8_t & Val,void *,raw_ostream & Out)
ScalarTraits::string::input	YAMLTraits.cpp	/^StringRef ScalarTraits<std::string>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits::string	typeref:typename:StringRef	signature:(StringRef Scalar,void *,std::string & Val)
ScalarTraits::string::output	YAMLTraits.cpp	/^void ScalarTraits<std::string>::output(const std::string &Val, void *,$/;"	kind:f	class:ScalarTraits::string	typeref:typename:void	signature:(const std::string & Val,void *,raw_ostream & Out)
ScaledNumberBase::dump	ScaledNumber.cpp	/^void ScaledNumberBase::dump(uint64_t D, int16_t E, int Width) {$/;"	kind:f	class:ScaledNumberBase	typeref:typename:void	signature:(uint64_t D,int16_t E,int Width)
ScaledNumberBase::print	ScaledNumber.cpp	/^raw_ostream &ScaledNumberBase::print(raw_ostream &OS, uint64_t D, int16_t E,$/;"	kind:f	class:ScaledNumberBase	typeref:typename:raw_ostream &	signature:(raw_ostream & OS,uint64_t D,int16_t E,int Width,unsigned Precision)
ScaledNumberBase::toString	ScaledNumber.cpp	/^std::string ScaledNumberBase::toString(uint64_t D, int16_t E, int Width,$/;"	kind:f	class:ScaledNumberBase	typeref:typename:std::string	signature:(uint64_t D,int16_t E,int Width,unsigned Precision)
ScaledNumbers::compareImpl	ScaledNumber.cpp	/^int ScaledNumbers::compareImpl(uint64_t L, uint64_t R, int ScaleDiff) {$/;"	kind:f	class:ScaledNumbers	typeref:typename:int	signature:(uint64_t L,uint64_t R,int ScaleDiff)
ScaledNumbers::divide32	ScaledNumber.cpp	/^std::pair<uint32_t, int16_t> ScaledNumbers::divide32(uint32_t Dividend,$/;"	kind:f	class:ScaledNumbers	typeref:typename:std::pair<uint32_t,int16_t>	signature:(uint32_t Dividend,uint32_t Divisor)
ScaledNumbers::divide64	ScaledNumber.cpp	/^std::pair<uint64_t, int16_t> ScaledNumbers::divide64(uint64_t Dividend,$/;"	kind:f	class:ScaledNumbers	typeref:typename:std::pair<uint64_t,int16_t>	signature:(uint64_t Dividend,uint64_t Divisor)
ScaledNumbers::multiply64	ScaledNumber.cpp	/^std::pair<uint64_t, int16_t> ScaledNumbers::multiply64(uint64_t LHS,$/;"	kind:f	class:ScaledNumbers	typeref:typename:std::pair<uint64_t,int16_t>	signature:(uint64_t LHS,uint64_t RHS)
Scanner	YAMLParser.cpp	/^  Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors = true,$/;"	kind:p	class:llvm::yaml::Scanner	file:	access:public	signature:(MemoryBufferRef Buffer,SourceMgr & SM_,bool ShowColors=true,std::error_code * EC=nullptr)
Scanner	YAMLParser.cpp	/^  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,$/;"	kind:p	class:llvm::yaml::Scanner	file:	access:public	signature:(StringRef Input,SourceMgr & SM,bool ShowColors=true,std::error_code * EC=nullptr)
Scanner	YAMLParser.cpp	/^  typedef StringRef::iterator (Scanner::*SkipWhileFunc)(StringRef::iterator);$/;"	kind:t	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator (::* SkipWhileFunc)(StringRef::iterator)	file:	access:private
Scanner	YAMLParser.cpp	/^Scanner::Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors,$/;"	kind:f	class:Scanner	signature:(MemoryBufferRef Buffer,SourceMgr & SM_,bool ShowColors,std::error_code * EC)
Scanner	YAMLParser.cpp	/^Scanner::Scanner(StringRef Input, SourceMgr &sm, bool ShowColors,$/;"	kind:f	class:Scanner	signature:(StringRef Input,SourceMgr & sm,bool ShowColors,std::error_code * EC)
Scanner	YAMLParser.cpp	/^class Scanner {$/;"	kind:c	namespace:llvm::yaml	file:
Scanner::Scanner	YAMLParser.cpp	/^Scanner::Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors,$/;"	kind:f	class:Scanner	signature:(MemoryBufferRef Buffer,SourceMgr & SM_,bool ShowColors,std::error_code * EC)
Scanner::Scanner	YAMLParser.cpp	/^Scanner::Scanner(StringRef Input, SourceMgr &sm, bool ShowColors,$/;"	kind:f	class:Scanner	signature:(StringRef Input,SourceMgr & sm,bool ShowColors,std::error_code * EC)
Scanner::advanceWhile	YAMLParser.cpp	/^void Scanner::advanceWhile(SkipWhileFunc Func) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(SkipWhileFunc Func)
Scanner::consume	YAMLParser.cpp	/^bool Scanner::consume(uint32_t Expected) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(uint32_t Expected)
Scanner::consumeLineBreakIfPresent	YAMLParser.cpp	/^bool Scanner::consumeLineBreakIfPresent() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::fetchMoreTokens	YAMLParser.cpp	/^bool Scanner::fetchMoreTokens() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::findBlockScalarIndent	YAMLParser.cpp	/^bool Scanner::findBlockScalarIndent(unsigned &BlockIndent,$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(unsigned & BlockIndent,unsigned BlockExitIndent,unsigned & LineBreaks,bool & IsDone)
Scanner::getNext	YAMLParser.cpp	/^Token Scanner::getNext() {$/;"	kind:f	class:Scanner	typeref:typename:Token	signature:()
Scanner::init	YAMLParser.cpp	/^void Scanner::init(MemoryBufferRef Buffer) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(MemoryBufferRef Buffer)
Scanner::isBlankOrBreak	YAMLParser.cpp	/^bool Scanner::isBlankOrBreak(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(StringRef::iterator Position)
Scanner::peekNext	YAMLParser.cpp	/^Token &Scanner::peekNext() {$/;"	kind:f	class:Scanner	typeref:typename:Token &	signature:()
Scanner::removeSimpleKeyCandidatesOnFlowLevel	YAMLParser.cpp	/^void Scanner::removeSimpleKeyCandidatesOnFlowLevel(unsigned Level) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(unsigned Level)
Scanner::removeStaleSimpleKeyCandidates	YAMLParser.cpp	/^void Scanner::removeStaleSimpleKeyCandidates() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
Scanner::rollIndent	YAMLParser.cpp	/^bool Scanner::rollIndent( int ToColumn$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(int ToColumn,Token::TokenKind Kind,TokenQueueT::iterator InsertPoint)
Scanner::saveSimpleKeyCandidate	YAMLParser.cpp	/^void Scanner::saveSimpleKeyCandidate( TokenQueueT::iterator Tok$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(TokenQueueT::iterator Tok,unsigned AtColumn,bool IsRequired)
Scanner::scanAliasOrAnchor	YAMLParser.cpp	/^bool Scanner::scanAliasOrAnchor(bool IsAlias) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsAlias)
Scanner::scanBlockChompingIndicator	YAMLParser.cpp	/^char Scanner::scanBlockChompingIndicator() {$/;"	kind:f	class:Scanner	typeref:typename:char	signature:()
Scanner::scanBlockEntry	YAMLParser.cpp	/^bool Scanner::scanBlockEntry() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanBlockIndentationIndicator	YAMLParser.cpp	/^unsigned Scanner::scanBlockIndentationIndicator() {$/;"	kind:f	class:Scanner	typeref:typename:unsigned	signature:()
Scanner::scanBlockScalar	YAMLParser.cpp	/^bool Scanner::scanBlockScalar(bool IsLiteral) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsLiteral)
Scanner::scanBlockScalarHeader	YAMLParser.cpp	/^bool Scanner::scanBlockScalarHeader(char &ChompingIndicator,$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(char & ChompingIndicator,unsigned & IndentIndicator,bool & IsDone)
Scanner::scanBlockScalarIndent	YAMLParser.cpp	/^bool Scanner::scanBlockScalarIndent(unsigned BlockIndent,$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(unsigned BlockIndent,unsigned BlockExitIndent,bool & IsDone)
Scanner::scanDirective	YAMLParser.cpp	/^bool Scanner::scanDirective() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanDocumentIndicator	YAMLParser.cpp	/^bool Scanner::scanDocumentIndicator(bool IsStart) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsStart)
Scanner::scanFlowCollectionEnd	YAMLParser.cpp	/^bool Scanner::scanFlowCollectionEnd(bool IsSequence) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsSequence)
Scanner::scanFlowCollectionStart	YAMLParser.cpp	/^bool Scanner::scanFlowCollectionStart(bool IsSequence) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsSequence)
Scanner::scanFlowEntry	YAMLParser.cpp	/^bool Scanner::scanFlowEntry() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanFlowScalar	YAMLParser.cpp	/^bool Scanner::scanFlowScalar(bool IsDoubleQuoted) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsDoubleQuoted)
Scanner::scanKey	YAMLParser.cpp	/^bool Scanner::scanKey() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanPlainScalar	YAMLParser.cpp	/^bool Scanner::scanPlainScalar() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanStreamEnd	YAMLParser.cpp	/^bool Scanner::scanStreamEnd() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanStreamStart	YAMLParser.cpp	/^bool Scanner::scanStreamStart() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanTag	YAMLParser.cpp	/^bool Scanner::scanTag() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scanToNextToken	YAMLParser.cpp	/^void Scanner::scanToNextToken() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
Scanner::scanValue	YAMLParser.cpp	/^bool Scanner::scanValue() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
Scanner::scan_ns_uri_char	YAMLParser.cpp	/^void Scanner::scan_ns_uri_char() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
Scanner::skip	YAMLParser.cpp	/^void Scanner::skip(uint32_t Distance) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(uint32_t Distance)
Scanner::skipComment	YAMLParser.cpp	/^void Scanner::skipComment() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
Scanner::skip_b_break	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_b_break(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
Scanner::skip_nb_char	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_nb_char(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
Scanner::skip_ns_char	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_ns_char(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
Scanner::skip_s_space	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_s_space(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
Scanner::skip_s_white	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_s_white(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
Scanner::skip_while	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_while( SkipWhileFunc Func$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(SkipWhileFunc Func,StringRef::iterator Position)
Scanner::unrollIndent	YAMLParser.cpp	/^bool Scanner::unrollIndent(int ToColumn) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(int ToColumn)
ScopedCommonHandle	Windows/WindowsSupport.h	/^typedef ScopedHandle<CommonHandleTraits> ScopedCommonHandle;$/;"	kind:t	typeref:typename:ScopedHandle<CommonHandleTraits>
ScopedCryptContext	Windows/WindowsSupport.h	/^typedef ScopedHandle<CryptContextTraits> ScopedCryptContext;$/;"	kind:t	typeref:typename:ScopedHandle<CryptContextTraits>
ScopedFileHandle	Windows/WindowsSupport.h	/^typedef ScopedHandle<FileHandleTraits>   ScopedFileHandle;$/;"	kind:t	typeref:typename:ScopedHandle<FileHandleTraits>
ScopedFindHandle	Windows/WindowsSupport.h	/^typedef ScopedHandle<FindHandleTraits>   ScopedFindHandle;$/;"	kind:t	typeref:typename:ScopedHandle<FindHandleTraits>
ScopedHandle	Windows/WindowsSupport.h	/^  ScopedHandle()$/;"	kind:f	class:ScopedHandle	access:public	signature:()
ScopedHandle	Windows/WindowsSupport.h	/^  ScopedHandle(const ScopedHandle &other); \/\/ = delete;$/;"	kind:p	class:ScopedHandle	access:private	signature:(const ScopedHandle & other)
ScopedHandle	Windows/WindowsSupport.h	/^  explicit ScopedHandle(handle_type h)$/;"	kind:f	class:ScopedHandle	access:public	signature:(handle_type h)
ScopedHandle	Windows/WindowsSupport.h	/^class ScopedHandle {$/;"	kind:c
ScopedHandle::Handle	Windows/WindowsSupport.h	/^  handle_type Handle;$/;"	kind:m	class:ScopedHandle	typeref:typename:handle_type	access:private
ScopedHandle::ScopedHandle	Windows/WindowsSupport.h	/^  ScopedHandle()$/;"	kind:f	class:ScopedHandle	access:public	signature:()
ScopedHandle::ScopedHandle	Windows/WindowsSupport.h	/^  ScopedHandle(const ScopedHandle &other); \/\/ = delete;$/;"	kind:p	class:ScopedHandle	access:private	signature:(const ScopedHandle & other)
ScopedHandle::ScopedHandle	Windows/WindowsSupport.h	/^  explicit ScopedHandle(handle_type h)$/;"	kind:f	class:ScopedHandle	access:public	signature:(handle_type h)
ScopedHandle::handle_type	Windows/WindowsSupport.h	/^  typedef typename HandleTraits::handle_type handle_type;$/;"	kind:t	class:ScopedHandle	typeref:typename:HandleTraits::handle_type	access:private
ScopedHandle::operator =	Windows/WindowsSupport.h	/^  ScopedHandle &operator=(handle_type h) {$/;"	kind:f	class:ScopedHandle	typeref:typename:ScopedHandle &	access:public	signature:(handle_type h)
ScopedHandle::operator =	Windows/WindowsSupport.h	/^  void operator=(const ScopedHandle &other); \/\/ = delete;$/;"	kind:p	class:ScopedHandle	typeref:typename:void	access:private	signature:(const ScopedHandle & other)
ScopedHandle::take	Windows/WindowsSupport.h	/^  handle_type take() {$/;"	kind:f	class:ScopedHandle	typeref:typename:handle_type	access:public	signature:()
ScopedHandle::~ScopedHandle	Windows/WindowsSupport.h	/^  ~ScopedHandle() {$/;"	kind:f	class:ScopedHandle	access:public	signature:()
ScopedJobHandle	Windows/WindowsSupport.h	/^typedef ScopedHandle<JobHandleTraits>    ScopedJobHandle;$/;"	kind:t	typeref:typename:ScopedHandle<JobHandleTraits>
ScopedRegHandle	Windows/WindowsSupport.h	/^typedef ScopedHandle<RegTraits>          ScopedRegHandle;$/;"	kind:t	typeref:typename:ScopedHandle<RegTraits>
Search	DeltaAlgorithm.cpp	/^bool DeltaAlgorithm::Search(const changeset_ty &Changes,$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:bool	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets,changeset_ty & Res)
SearchForAddressOfSpecialSymbol	DynamicLibrary.cpp	/^void *SearchForAddressOfSpecialSymbol(const char* symbolName);$/;"	kind:p	namespace:llvm	typeref:typename:void *	file:	signature:(const char * symbolName)
SearchForAddressOfSpecialSymbol	SearchForAddressOfSpecialSymbol.cpp	/^void *SearchForAddressOfSpecialSymbol(const char* symbolName) {$/;"	kind:f	namespace:llvm	typeref:typename:void *	signature:(const char * symbolName)
SearchForAddressOfSymbol	DynamicLibrary.cpp	/^void* DynamicLibrary::SearchForAddressOfSymbol(const char *symbolName) {$/;"	kind:f	class:DynamicLibrary	typeref:typename:void *	signature:(const char * symbolName)
Seconds	Timer.cpp	/^  using Seconds = std::chrono::duration<double, std::ratio<1>>;$/;"	kind:t	function:TimeRecord::getCurrentTime	typeref:typename:std::chrono::duration<double,std::ratio<1>>	file:
Seed	RandomNumberGenerator.cpp	/^Seed("rng-seed", cl::value_desc("seed"),$/;"	kind:v	typeref:typename:cl::opt<unsigned long long>	file:
SequenceNode::increment	YAMLParser.cpp	/^void SequenceNode::increment() {$/;"	kind:f	class:SequenceNode	typeref:typename:void	signature:()
SetBufferAndMode	raw_ostream.cpp	/^void raw_ostream::SetBufferAndMode(char *BufferStart, size_t Size,$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:(char * BufferStart,size_t Size,BufferKind Mode)
SetBuffered	raw_ostream.cpp	/^void raw_ostream::SetBuffered() {$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:()
SetVersionPrinter	CommandLine.cpp	/^void cl::SetVersionPrinter(void (*func)()) { OverrideVersionPrinter = func; }$/;"	kind:f	class:cl	typeref:typename:void	signature:(void (* func)())
ShowColors	YAMLParser.cpp	/^  bool ShowColors;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
ShowHidden	CommandLine.cpp	/^  const bool ShowHidden;$/;"	kind:m	class:__anon2c11109d0510::HelpPrinter	typeref:typename:const bool	file:	access:protected
Signals	CrashRecoveryContext.cpp	/^static const int Signals[] =$/;"	kind:v	typeref:typename:const int[]	file:
SimpleKey	YAMLParser.cpp	/^struct SimpleKey {$/;"	kind:s	namespace:__anon418572f60110	file:
SimpleKeys	YAMLParser.cpp	/^  SmallVector<SimpleKey, 4> SimpleKeys;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:SmallVector<SimpleKey,4>	file:	access:private
SmallPtrSetImplBase	SmallPtrSet.cpp	/^SmallPtrSetImplBase::SmallPtrSetImplBase(const void **SmallStorage,$/;"	kind:f	class:SmallPtrSetImplBase	signature:(const void ** SmallStorage,const SmallPtrSetImplBase & that)
SmallPtrSetImplBase	SmallPtrSet.cpp	/^SmallPtrSetImplBase::SmallPtrSetImplBase(const void **SmallStorage,$/;"	kind:f	class:SmallPtrSetImplBase	signature:(const void ** SmallStorage,unsigned SmallSize,SmallPtrSetImplBase && that)
SmallPtrSetImplBase::CopyFrom	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::CopyFrom(const SmallPtrSetImplBase &RHS) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(const SmallPtrSetImplBase & RHS)
SmallPtrSetImplBase::CopyHelper	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::CopyHelper(const SmallPtrSetImplBase &RHS) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(const SmallPtrSetImplBase & RHS)
SmallPtrSetImplBase::FindBucketFor	SmallPtrSet.cpp	/^const void * const *SmallPtrSetImplBase::FindBucketFor(const void *Ptr) const {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:const void * const *	signature:(const void * Ptr) const
SmallPtrSetImplBase::Grow	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::Grow(unsigned NewSize) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(unsigned NewSize)
SmallPtrSetImplBase::MoveFrom	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::MoveFrom(unsigned SmallSize,$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(unsigned SmallSize,SmallPtrSetImplBase && RHS)
SmallPtrSetImplBase::MoveHelper	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::MoveHelper(unsigned SmallSize,$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(unsigned SmallSize,SmallPtrSetImplBase && RHS)
SmallPtrSetImplBase::SmallPtrSetImplBase	SmallPtrSet.cpp	/^SmallPtrSetImplBase::SmallPtrSetImplBase(const void **SmallStorage,$/;"	kind:f	class:SmallPtrSetImplBase	signature:(const void ** SmallStorage,const SmallPtrSetImplBase & that)
SmallPtrSetImplBase::SmallPtrSetImplBase	SmallPtrSet.cpp	/^SmallPtrSetImplBase::SmallPtrSetImplBase(const void **SmallStorage,$/;"	kind:f	class:SmallPtrSetImplBase	signature:(const void ** SmallStorage,unsigned SmallSize,SmallPtrSetImplBase && that)
SmallPtrSetImplBase::erase_imp	SmallPtrSet.cpp	/^bool SmallPtrSetImplBase::erase_imp(const void * Ptr) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:bool	signature:(const void * Ptr)
SmallPtrSetImplBase::insert_imp_big	SmallPtrSet.cpp	/^SmallPtrSetImplBase::insert_imp_big(const void *Ptr) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:std::pair<const void * const *,bool>	signature:(const void * Ptr)
SmallPtrSetImplBase::shrink_and_clear	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::shrink_and_clear() {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:()
SmallPtrSetImplBase::swap	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::swap(SmallPtrSetImplBase &RHS) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(SmallPtrSetImplBase & RHS)
SmallVectorBase::grow_pod	SmallVector.cpp	/^void SmallVectorBase::grow_pod(void *FirstEl, size_t MinSizeInBytes,$/;"	kind:f	class:SmallVectorBase	typeref:typename:void	signature:(void * FirstEl,size_t MinSizeInBytes,size_t TSize)
SourceMgr::AddIncludeFile	SourceMgr.cpp	/^unsigned SourceMgr::AddIncludeFile(const std::string &Filename,$/;"	kind:f	class:SourceMgr	typeref:typename:unsigned	signature:(const std::string & Filename,SMLoc IncludeLoc,std::string & IncludedFile)
SourceMgr::FindBufferContainingLoc	SourceMgr.cpp	/^unsigned SourceMgr::FindBufferContainingLoc(SMLoc Loc) const {$/;"	kind:f	class:SourceMgr	typeref:typename:unsigned	signature:(SMLoc Loc) const
SourceMgr::GetMessage	SourceMgr.cpp	/^SMDiagnostic SourceMgr::GetMessage(SMLoc Loc, SourceMgr::DiagKind Kind,$/;"	kind:f	class:SourceMgr	typeref:typename:SMDiagnostic	signature:(SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Msg,ArrayRef<SMRange> Ranges,ArrayRef<SMFixIt> FixIts) const
SourceMgr::PrintIncludeStack	SourceMgr.cpp	/^void SourceMgr::PrintIncludeStack(SMLoc IncludeLoc, raw_ostream &OS) const {$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(SMLoc IncludeLoc,raw_ostream & OS) const
SourceMgr::PrintMessage	SourceMgr.cpp	/^void SourceMgr::PrintMessage(SMLoc Loc, SourceMgr::DiagKind Kind,$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Msg,ArrayRef<SMRange> Ranges,ArrayRef<SMFixIt> FixIts,bool ShowColors) const
SourceMgr::PrintMessage	SourceMgr.cpp	/^void SourceMgr::PrintMessage(raw_ostream &OS, SMLoc Loc,$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(raw_ostream & OS,SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Msg,ArrayRef<SMRange> Ranges,ArrayRef<SMFixIt> FixIts,bool ShowColors) const
SourceMgr::PrintMessage	SourceMgr.cpp	/^void SourceMgr::PrintMessage(raw_ostream &OS, const SMDiagnostic &Diagnostic,$/;"	kind:f	class:SourceMgr	typeref:typename:void	signature:(raw_ostream & OS,const SMDiagnostic & Diagnostic,bool ShowColors) const
SourceMgr::getLineAndColumn	SourceMgr.cpp	/^SourceMgr::getLineAndColumn(SMLoc Loc, unsigned BufferID) const {$/;"	kind:f	class:SourceMgr	typeref:typename:std::pair<unsigned,unsigned>	signature:(SMLoc Loc,unsigned BufferID) const
SourceMgr::~SourceMgr	SourceMgr.cpp	/^SourceMgr::~SourceMgr() {$/;"	kind:f	class:SourceMgr	signature:()
SpecialCaseList	SpecialCaseList.cpp	/^SpecialCaseList::SpecialCaseList() : Entries(), Regexps(), IsCompiled(false) {}$/;"	kind:f	class:llvm::SpecialCaseList	signature:()
Split	DeltaAlgorithm.cpp	/^void DeltaAlgorithm::Split(const changeset_ty &S, changesetlist_ty &Res) {$/;"	kind:f	class:DeltaAlgorithm	typeref:typename:void	signature:(const changeset_ty & S,changesetlist_ty & Res)
SplitString	StringExtras.cpp	/^void llvm::SplitString(StringRef Source,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(StringRef Source,SmallVectorImpl<StringRef> & OutFragments,StringRef Delimiters)
StatInfo	Statistic.cpp	/^static ManagedStatic<StatisticInfo> StatInfo;$/;"	kind:v	typeref:typename:ManagedStatic<StatisticInfo>	file:
StatLock	Statistic.cpp	/^static ManagedStatic<sys::SmartMutex<true> > StatLock;$/;"	kind:v	typeref:typename:ManagedStatic<sys::SmartMutex<true>>	file:
StaticList	ManagedStatic.cpp	/^static const ManagedStaticBase *StaticList = nullptr;$/;"	kind:v	typeref:typename:const ManagedStaticBase *	file:
Statistic::RegisterStatistic	Statistic.cpp	/^void Statistic::RegisterStatistic() {$/;"	kind:f	class:Statistic	typeref:typename:void	signature:()
StatisticInfo	Statistic.cpp	/^  StatisticInfo();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo	file:	access:public	signature:()
StatisticInfo	Statistic.cpp	/^StatisticInfo::StatisticInfo() {$/;"	kind:f	class:StatisticInfo	signature:()
StatisticInfo	Statistic.cpp	/^class StatisticInfo {$/;"	kind:c	namespace:__anon7a04bdce0110	file:
StatisticInfo::StatisticInfo	Statistic.cpp	/^StatisticInfo::StatisticInfo() {$/;"	kind:f	class:StatisticInfo	signature:()
StatisticInfo::sort	Statistic.cpp	/^void StatisticInfo::sort() {$/;"	kind:f	class:StatisticInfo	typeref:typename:void	signature:()
StatisticInfo::~StatisticInfo	Statistic.cpp	/^StatisticInfo::~StatisticInfo() {$/;"	kind:f	class:StatisticInfo	signature:()
Stats	Statistic.cpp	/^  std::vector<const Statistic*> Stats;$/;"	kind:m	class:__anon7a04bdce0110::StatisticInfo	typeref:typename:std::vector<const Statistic * >	file:	access:private
Stats	Statistic.cpp	/^static cl::opt<bool> Stats("stats",$/;"	kind:v	typeref:typename:cl::opt<bool>	file:
StatsAsJSON	Statistic.cpp	/^static cl::opt<bool> StatsAsJSON("stats-json",$/;"	kind:v	typeref:typename:cl::opt<bool>	file:
Storage	APFloat.cpp	/^APFloat::Storage::Storage(IEEEFloat F, const fltSemantics &Semantics) {$/;"	kind:f	class:llvm::APFloat::Storage	signature:(IEEEFloat F,const fltSemantics & Semantics)
StrError	Errno.cpp	/^std::string StrError() {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::string	signature:()
StrError	Errno.cpp	/^std::string StrError(int errnum) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::string	signature:(int errnum)
StrInStrNoCase	StringExtras.cpp	/^StringRef::size_type llvm::StrInStrNoCase(StringRef s1, StringRef s2) {$/;"	kind:f	class:llvm	typeref:typename:StringRef::size_type	signature:(StringRef s1,StringRef s2)
StrOptionPairVector	CommandLine.cpp	/^      StrOptionPairVector;$/;"	kind:t	class:__anon2c11109d0510::HelpPrinter	typeref:typename:SmallVector<std::pair<const char *,Option * >,128>	file:	access:protected
StrSubCommandPairVector	CommandLine.cpp	/^      StrSubCommandPairVector;$/;"	kind:t	class:__anon2c11109d0510::HelpPrinter	typeref:typename:SmallVector<std::pair<const char *,SubCommand * >,128>	file:	access:protected
Stream	YAMLParser.cpp	/^Stream::Stream(MemoryBufferRef InputBuffer, SourceMgr &SM, bool ShowColors,$/;"	kind:f	class:Stream	signature:(MemoryBufferRef InputBuffer,SourceMgr & SM,bool ShowColors,std::error_code * EC)
Stream	YAMLParser.cpp	/^Stream::Stream(StringRef Input, SourceMgr &SM, bool ShowColors,$/;"	kind:f	class:Stream	signature:(StringRef Input,SourceMgr & SM,bool ShowColors,std::error_code * EC)
Stream::Stream	YAMLParser.cpp	/^Stream::Stream(MemoryBufferRef InputBuffer, SourceMgr &SM, bool ShowColors,$/;"	kind:f	class:Stream	signature:(MemoryBufferRef InputBuffer,SourceMgr & SM,bool ShowColors,std::error_code * EC)
Stream::Stream	YAMLParser.cpp	/^Stream::Stream(StringRef Input, SourceMgr &SM, bool ShowColors,$/;"	kind:f	class:Stream	signature:(StringRef Input,SourceMgr & SM,bool ShowColors,std::error_code * EC)
Stream::begin	YAMLParser.cpp	/^document_iterator Stream::begin() {$/;"	kind:f	class:Stream	typeref:typename:document_iterator	signature:()
Stream::end	YAMLParser.cpp	/^document_iterator Stream::end() {$/;"	kind:f	class:Stream	typeref:typename:document_iterator	signature:()
Stream::failed	YAMLParser.cpp	/^bool Stream::failed() { return scanner->failed(); }$/;"	kind:f	class:Stream	typeref:typename:bool	signature:()
Stream::printError	YAMLParser.cpp	/^void Stream::printError(Node *N, const Twine &Msg) {$/;"	kind:f	class:Stream	typeref:typename:void	signature:(Node * N,const Twine & Msg)
Stream::skip	YAMLParser.cpp	/^void Stream::skip() {$/;"	kind:f	class:Stream	typeref:typename:void	signature:()
Stream::~Stream	YAMLParser.cpp	/^Stream::~Stream() {}$/;"	kind:f	class:Stream	signature:()
StringError	Error.cpp	/^StringError::StringError(const Twine &S, std::error_code EC)$/;"	kind:f	class:llvm::StringError	signature:(const Twine & S,std::error_code EC)
StringMapImpl	StringMap.cpp	/^StringMapImpl::StringMapImpl(unsigned InitSize, unsigned itemSize) {$/;"	kind:f	class:StringMapImpl	signature:(unsigned InitSize,unsigned itemSize)
StringMapImpl::FindKey	StringMap.cpp	/^int StringMapImpl::FindKey(StringRef Key) const {$/;"	kind:f	class:StringMapImpl	typeref:typename:int	signature:(StringRef Key) const
StringMapImpl::LookupBucketFor	StringMap.cpp	/^unsigned StringMapImpl::LookupBucketFor(StringRef Name) {$/;"	kind:f	class:StringMapImpl	typeref:typename:unsigned	signature:(StringRef Name)
StringMapImpl::RehashTable	StringMap.cpp	/^unsigned StringMapImpl::RehashTable(unsigned BucketNo) {$/;"	kind:f	class:StringMapImpl	typeref:typename:unsigned	signature:(unsigned BucketNo)
StringMapImpl::RemoveKey	StringMap.cpp	/^StringMapEntryBase *StringMapImpl::RemoveKey(StringRef Key) {$/;"	kind:f	class:StringMapImpl	typeref:typename:StringMapEntryBase *	signature:(StringRef Key)
StringMapImpl::RemoveKey	StringMap.cpp	/^void StringMapImpl::RemoveKey(StringMapEntryBase *V) {$/;"	kind:f	class:StringMapImpl	typeref:typename:void	signature:(StringMapEntryBase * V)
StringMapImpl::StringMapImpl	StringMap.cpp	/^StringMapImpl::StringMapImpl(unsigned InitSize, unsigned itemSize) {$/;"	kind:f	class:StringMapImpl	signature:(unsigned InitSize,unsigned itemSize)
StringMapImpl::init	StringMap.cpp	/^void StringMapImpl::init(unsigned InitSize) {$/;"	kind:f	class:StringMapImpl	typeref:typename:void	signature:(unsigned InitSize)
StringPool	StringPool.cpp	/^StringPool::StringPool() {}$/;"	kind:f	class:StringPool	signature:()
StringPool::StringPool	StringPool.cpp	/^StringPool::StringPool() {}$/;"	kind:f	class:StringPool	signature:()
StringPool::intern	StringPool.cpp	/^PooledStringPtr StringPool::intern(StringRef Key) {$/;"	kind:f	class:StringPool	typeref:typename:PooledStringPtr	signature:(StringRef Key)
StringPool::~StringPool	StringPool.cpp	/^StringPool::~StringPool() {$/;"	kind:f	class:StringPool	signature:()
StringRef::compare_lower	StringRef.cpp	/^int StringRef::compare_lower(StringRef RHS) const {$/;"	kind:f	class:StringRef	typeref:typename:int	signature:(StringRef RHS) const
StringRef::compare_numeric	StringRef.cpp	/^int StringRef::compare_numeric(StringRef RHS) const {$/;"	kind:f	class:StringRef	typeref:typename:int	signature:(StringRef RHS) const
StringRef::count	StringRef.cpp	/^size_t StringRef::count(StringRef Str) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str) const
StringRef::edit_distance	StringRef.cpp	/^unsigned StringRef::edit_distance(llvm::StringRef Other,$/;"	kind:f	class:StringRef	typeref:typename:unsigned	signature:(llvm::StringRef Other,bool AllowReplacements,unsigned MaxEditDistance) const
StringRef::endswith_lower	StringRef.cpp	/^bool StringRef::endswith_lower(StringRef Suffix) const {$/;"	kind:f	class:StringRef	typeref:typename:bool	signature:(StringRef Suffix) const
StringRef::find	StringRef.cpp	/^size_t StringRef::find(StringRef Str, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str,size_t From) const
StringRef::find_first_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_first_not_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
StringRef::find_first_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_first_not_of(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(char C,size_t From) const
StringRef::find_first_of	StringRef.cpp	/^StringRef::size_type StringRef::find_first_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
StringRef::find_last_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_last_not_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
StringRef::find_last_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_last_not_of(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(char C,size_t From) const
StringRef::find_last_of	StringRef.cpp	/^StringRef::size_type StringRef::find_last_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
StringRef::find_lower	StringRef.cpp	/^size_t StringRef::find_lower(StringRef Str, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str,size_t From) const
StringRef::find_lower	StringRef.cpp	/^size_t StringRef::find_lower(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(char C,size_t From) const
StringRef::getAsInteger	StringRef.cpp	/^bool StringRef::getAsInteger(unsigned Radix, APInt &Result) const {$/;"	kind:f	class:StringRef	typeref:typename:bool	signature:(unsigned Radix,APInt & Result) const
StringRef::lower	StringRef.cpp	/^std::string StringRef::lower() const {$/;"	kind:f	class:StringRef	typeref:typename:std::string	signature:() const
StringRef::npos	StringRef.cpp	/^const size_t StringRef::npos;$/;"	kind:m	class:StringRef	typeref:typename:const size_t
StringRef::rfind	StringRef.cpp	/^size_t StringRef::rfind(StringRef Str) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str) const
StringRef::rfind_lower	StringRef.cpp	/^size_t StringRef::rfind_lower(StringRef Str) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str) const
StringRef::rfind_lower	StringRef.cpp	/^size_t StringRef::rfind_lower(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(char C,size_t From) const
StringRef::split	StringRef.cpp	/^void StringRef::split(SmallVectorImpl<StringRef> &A, char Separator,$/;"	kind:f	class:StringRef	typeref:typename:void	signature:(SmallVectorImpl<StringRef> & A,char Separator,int MaxSplit,bool KeepEmpty) const
StringRef::split	StringRef.cpp	/^void StringRef::split(SmallVectorImpl<StringRef> &A,$/;"	kind:f	class:StringRef	typeref:typename:void	signature:(SmallVectorImpl<StringRef> & A,StringRef Separator,int MaxSplit,bool KeepEmpty) const
StringRef::startswith_lower	StringRef.cpp	/^bool StringRef::startswith_lower(StringRef Prefix) const {$/;"	kind:f	class:StringRef	typeref:typename:bool	signature:(StringRef Prefix) const
StringRef::upper	StringRef.cpp	/^std::string StringRef::upper() const {$/;"	kind:f	class:StringRef	typeref:typename:std::string	signature:() const
StringSaver::save	StringSaver.cpp	/^StringRef StringSaver::save(StringRef S) {$/;"	kind:f	class:StringSaver	typeref:typename:StringRef	signature:(StringRef S)
Strings	SpecialCaseList.cpp	/^  StringSet<> Strings;$/;"	kind:m	struct:llvm::SpecialCaseList::Entry	typeref:typename:StringSet<>	file:	access:public
SubArchCStr	TargetParser.cpp	/^  const char *SubArchCStr;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:const char *	file:	access:public
SubArchLength	TargetParser.cpp	/^  size_t SubArchLength;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:size_t	file:	access:public
SubCommand::registerSubCommand	CommandLine.cpp	/^void SubCommand::registerSubCommand() {$/;"	kind:f	class:SubCommand	typeref:typename:void	signature:()
SubCommand::reset	CommandLine.cpp	/^void SubCommand::reset() {$/;"	kind:f	class:SubCommand	typeref:typename:void	signature:()
SubCommand::unregisterSubCommand	CommandLine.cpp	/^void SubCommand::unregisterSubCommand() {$/;"	kind:f	class:SubCommand	typeref:typename:void	signature:()
SubNameCompare	CommandLine.cpp	/^static int SubNameCompare(const std::pair<const char *, SubCommand *> *LHS,$/;"	kind:f	typeref:typename:int	file:	signature:(const std::pair<const char *,SubCommand * > * LHS,const std::pair<const char *,SubCommand * > * RHS)
SuccClosure	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::set<change_ty> > SuccClosure;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::set<change_ty>>	file:	access:private
Successors	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::vector<change_ty> > Successors;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::vector<change_ty>>	file:	access:private
SwitchedThread	CrashRecoveryContext.cpp	/^  unsigned SwitchedThread : 1;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:unsigned:1	file:	access:public
SymbolsMutex	DynamicLibrary.cpp	/^static llvm::ManagedStatic<llvm::sys::SmartMutex<true> > SymbolsMutex;$/;"	kind:v	typeref:typename:llvm::ManagedStatic<llvm::sys::SmartMutex<true>>	file:
THERE	regcomp.c	/^#define	THERE(/;"	kind:d	file:	signature:()
THERETHERE	regcomp.c	/^#define	THERETHERE(/;"	kind:d	file:	signature:()
TK_Alias	YAMLParser.cpp	/^    TK_Alias,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_Anchor	YAMLParser.cpp	/^    TK_Anchor,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_BlockEnd	YAMLParser.cpp	/^    TK_BlockEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_BlockEntry	YAMLParser.cpp	/^    TK_BlockEntry,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_BlockMappingStart	YAMLParser.cpp	/^    TK_BlockMappingStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_BlockScalar	YAMLParser.cpp	/^    TK_BlockScalar,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_BlockSequenceStart	YAMLParser.cpp	/^    TK_BlockSequenceStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_DocumentEnd	YAMLParser.cpp	/^    TK_DocumentEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_DocumentStart	YAMLParser.cpp	/^    TK_DocumentStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_Error	YAMLParser.cpp	/^    TK_Error, \/\/ Uninitialized token.$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_FlowEntry	YAMLParser.cpp	/^    TK_FlowEntry,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_FlowMappingEnd	YAMLParser.cpp	/^    TK_FlowMappingEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_FlowMappingStart	YAMLParser.cpp	/^    TK_FlowMappingStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_FlowSequenceEnd	YAMLParser.cpp	/^    TK_FlowSequenceEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_FlowSequenceStart	YAMLParser.cpp	/^    TK_FlowSequenceStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_Key	YAMLParser.cpp	/^    TK_Key,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_Scalar	YAMLParser.cpp	/^    TK_Scalar,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_StreamEnd	YAMLParser.cpp	/^    TK_StreamEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_StreamStart	YAMLParser.cpp	/^    TK_StreamStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_Tag	YAMLParser.cpp	/^    TK_Tag$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_TagDirective	YAMLParser.cpp	/^    TK_TagDirective,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_Value	YAMLParser.cpp	/^    TK_Value,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TK_VersionDirective	YAMLParser.cpp	/^    TK_VersionDirective,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
TabStop	SourceMgr.cpp	/^static const size_t TabStop = 8;$/;"	kind:v	typeref:typename:const size_t	file:
TagName	ARMBuildAttrs.cpp	/^  StringRef TagName;$/;"	kind:m	struct:__anond31545540110::__anond31545540208	typeref:typename:StringRef	file:	access:public
TagString	Dwarf.cpp	/^StringRef llvm::dwarf::TagString(unsigned Tag) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Tag)
TargetArraySortFn	TargetRegistry.cpp	/^static int TargetArraySortFn(const std::pair<StringRef, const Target *> *LHS,$/;"	kind:f	typeref:typename:int	file:	signature:(const std::pair<StringRef,const Target * > * LHS,const std::pair<StringRef,const Target * > * RHS)
TargetRegistry::RegisterTarget	TargetRegistry.cpp	/^void TargetRegistry::RegisterTarget(Target &T,$/;"	kind:f	class:TargetRegistry	typeref:typename:void	signature:(Target & T,const char * Name,const char * ShortDesc,Target::ArchMatchFnTy ArchMatchFn,bool HasJIT)
TargetRegistry::lookupTarget	TargetRegistry.cpp	/^const Target *TargetRegistry::lookupTarget(const std::string &ArchName,$/;"	kind:f	class:TargetRegistry	typeref:typename:const Target *	signature:(const std::string & ArchName,Triple & TheTriple,std::string & Error)
TargetRegistry::lookupTarget	TargetRegistry.cpp	/^const Target *TargetRegistry::lookupTarget(const std::string &TT,$/;"	kind:f	class:TargetRegistry	typeref:typename:const Target *	signature:(const std::string & TT,std::string & Error)
TargetRegistry::printRegisteredTargetsForVersion	TargetRegistry.cpp	/^void TargetRegistry::printRegisteredTargetsForVersion() {$/;"	kind:f	class:TargetRegistry	typeref:typename:void	signature:()
TargetRegistry::targets	TargetRegistry.cpp	/^iterator_range<TargetRegistry::iterator> TargetRegistry::targets() {$/;"	kind:f	class:TargetRegistry	typeref:typename:iterator_range<TargetRegistry::iterator>	signature:()
ThreadCallback	Threading.cpp	/^static unsigned __stdcall ThreadCallback(void *param) {$/;"	kind:f	typeref:typename:unsigned __stdcall	file:	signature:(void * param)
ThreadInfo	Threading.cpp	/^struct ThreadInfo {$/;"	kind:s	file:
ThreadInfo::UserData	Threading.cpp	/^  void *UserData;$/;"	kind:m	struct:ThreadInfo	typeref:typename:void *	file:	access:public
ThreadInfo::UserFn	Threading.cpp	/^  void (*UserFn)(void *);$/;"	kind:m	struct:ThreadInfo	typeref:typename:void (*)(void *)	file:	access:public
ThreadInfo::func	Threading.cpp	/^  void (*func)(void*);$/;"	kind:m	struct:ThreadInfo	typeref:typename:void (*)(void *)	file:	access:public
ThreadInfo::param	Threading.cpp	/^  void *param;$/;"	kind:m	struct:ThreadInfo	typeref:typename:void *	file:	access:public
ThreadLocalImpl	ThreadLocal.cpp	/^ThreadLocalImpl::ThreadLocalImpl() : data() { }$/;"	kind:f	class:llvm::ThreadLocalImpl	signature:()
ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool() : ThreadPool(0) {}$/;"	kind:f	class:ThreadPool	signature:()
ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool() : ThreadPool(std::thread::hardware_concurrency()) {}$/;"	kind:f	class:ThreadPool	signature:()
ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool(unsigned ThreadCount)$/;"	kind:f	class:ThreadPool	signature:(unsigned ThreadCount)
ThreadPool::ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool() : ThreadPool(0) {}$/;"	kind:f	class:ThreadPool	signature:()
ThreadPool::ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool() : ThreadPool(std::thread::hardware_concurrency()) {}$/;"	kind:f	class:ThreadPool	signature:()
ThreadPool::ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool(unsigned ThreadCount)$/;"	kind:f	class:ThreadPool	signature:(unsigned ThreadCount)
ThreadPool::asyncImpl	ThreadPool.cpp	/^std::shared_future<ThreadPool::VoidTy> ThreadPool::asyncImpl(TaskTy Task) {$/;"	kind:f	class:ThreadPool	typeref:typename:std::shared_future<ThreadPool::VoidTy>	signature:(TaskTy Task)
ThreadPool::wait	ThreadPool.cpp	/^void ThreadPool::wait() {$/;"	kind:f	class:ThreadPool	typeref:typename:void	signature:()
ThreadPool::~ThreadPool	ThreadPool.cpp	/^ThreadPool::~ThreadPool() {$/;"	kind:f	class:ThreadPool	signature:()
TimeRecord::getCurrentTime	Timer.cpp	/^TimeRecord TimeRecord::getCurrentTime(bool Start) {$/;"	kind:f	class:TimeRecord	typeref:typename:TimeRecord	signature:(bool Start)
TimeRecord::print	Timer.cpp	/^void TimeRecord::print(const TimeRecord &Total, raw_ostream &OS) const {$/;"	kind:f	class:TimeRecord	typeref:typename:void	signature:(const TimeRecord & Total,raw_ostream & OS) const
Timer::clear	Timer.cpp	/^void Timer::clear() {$/;"	kind:f	class:Timer	typeref:typename:void	signature:()
Timer::init	Timer.cpp	/^void Timer::init(StringRef Name, StringRef Description) {$/;"	kind:f	class:Timer	typeref:typename:void	signature:(StringRef Name,StringRef Description)
Timer::init	Timer.cpp	/^void Timer::init(StringRef Name, StringRef Description, TimerGroup &tg) {$/;"	kind:f	class:Timer	typeref:typename:void	signature:(StringRef Name,StringRef Description,TimerGroup & tg)
Timer::startTimer	Timer.cpp	/^void Timer::startTimer() {$/;"	kind:f	class:Timer	typeref:typename:void	signature:()
Timer::stopTimer	Timer.cpp	/^void Timer::stopTimer() {$/;"	kind:f	class:Timer	typeref:typename:void	signature:()
Timer::~Timer	Timer.cpp	/^Timer::~Timer() {$/;"	kind:f	class:Timer	signature:()
TimerGroup	Timer.cpp	/^TimerGroup::TimerGroup(StringRef Name, StringRef Description)$/;"	kind:f	class:TimerGroup	signature:(StringRef Name,StringRef Description)
TimerGroup::ConstructTimerLists	Timer.cpp	/^void TimerGroup::ConstructTimerLists() {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:()
TimerGroup::PrintQueuedTimers	Timer.cpp	/^void TimerGroup::PrintQueuedTimers(raw_ostream &OS) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS)
TimerGroup::TimerGroup	Timer.cpp	/^TimerGroup::TimerGroup(StringRef Name, StringRef Description)$/;"	kind:f	class:TimerGroup	signature:(StringRef Name,StringRef Description)
TimerGroup::addTimer	Timer.cpp	/^void TimerGroup::addTimer(Timer &T) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(Timer & T)
TimerGroup::prepareToPrintList	Timer.cpp	/^void TimerGroup::prepareToPrintList() {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:()
TimerGroup::print	Timer.cpp	/^void TimerGroup::print(raw_ostream &OS) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS)
TimerGroup::printAll	Timer.cpp	/^void TimerGroup::printAll(raw_ostream &OS) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS)
TimerGroup::printAllJSONValues	Timer.cpp	/^const char *TimerGroup::printAllJSONValues(raw_ostream &OS, const char *delim) {$/;"	kind:f	class:TimerGroup	typeref:typename:const char *	signature:(raw_ostream & OS,const char * delim)
TimerGroup::printJSONValue	Timer.cpp	/^void TimerGroup::printJSONValue(raw_ostream &OS, const PrintRecord &R,$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS,const PrintRecord & R,const char * suffix,double Value)
TimerGroup::printJSONValues	Timer.cpp	/^const char *TimerGroup::printJSONValues(raw_ostream &OS, const char *delim) {$/;"	kind:f	class:TimerGroup	typeref:typename:const char *	signature:(raw_ostream & OS,const char * delim)
TimerGroup::removeTimer	Timer.cpp	/^void TimerGroup::removeTimer(Timer &T) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(Timer & T)
TimerGroup::~TimerGroup	Timer.cpp	/^TimerGroup::~TimerGroup() {$/;"	kind:f	class:TimerGroup	signature:()
TimerGroupList	Timer.cpp	/^static TimerGroup *TimerGroupList = nullptr;$/;"	kind:v	typeref:typename:TimerGroup *	file:
TimerLock	Timer.cpp	/^static ManagedStatic<sys::SmartMutex<true> > TimerLock;$/;"	kind:v	typeref:typename:ManagedStatic<sys::SmartMutex<true>>	file:
Tok	YAMLParser.cpp	/^  TokenQueueT::iterator Tok;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:TokenQueueT::iterator	file:	access:public
Token	YAMLParser.cpp	/^  Token() : Kind(TK_Error) {}$/;"	kind:f	struct:llvm::yaml::Token	file:	access:public	signature:()
Token	YAMLParser.cpp	/^struct Token {$/;"	kind:s	namespace:llvm::yaml	file:
TokenKind	YAMLParser.cpp	/^  enum TokenKind {$/;"	kind:g	struct:llvm::yaml::Token	file:	access:public
TokenQueue	YAMLParser.cpp	/^  TokenQueueT TokenQueue;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:TokenQueueT	file:	access:private
TokenQueueT	YAMLParser.cpp	/^typedef llvm::BumpPtrList<Token> TokenQueueT;$/;"	kind:t	typeref:typename:llvm::BumpPtrList<Token>	file:
TokenizeGNUCommandLine	CommandLine.cpp	/^void cl::TokenizeGNUCommandLine(StringRef Src, StringSaver &Saver,$/;"	kind:f	class:cl	typeref:typename:void	signature:(StringRef Src,StringSaver & Saver,SmallVectorImpl<const char * > & NewArgv,bool MarkEOLs)
TokenizeWindowsCommandLine	CommandLine.cpp	/^void cl::TokenizeWindowsCommandLine(StringRef Src, StringSaver &Saver,$/;"	kind:f	class:cl	typeref:typename:void	signature:(StringRef Src,StringSaver & Saver,SmallVectorImpl<const char * > & NewArgv,bool MarkEOLs)
TopLevelSubCommand	CommandLine.cpp	/^ManagedStatic<SubCommand> llvm::cl::TopLevelSubCommand;$/;"	kind:m	class:llvm::cl	typeref:typename:ManagedStatic<SubCommand>
TrackSpace	Timer.cpp	/^  TrackSpace("track-memory", cl::desc("Enable -time-passes memory "$/;"	kind:v	namespace:__anoncc40abd70110	typeref:typename:cl::opt<bool>	file:
Triple	Triple.cpp	/^Triple::Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr)$/;"	kind:f	class:Triple	signature:(const Twine & ArchStr,const Twine & VendorStr,const Twine & OSStr)
Triple	Triple.cpp	/^Triple::Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr,$/;"	kind:f	class:Triple	signature:(const Twine & ArchStr,const Twine & VendorStr,const Twine & OSStr,const Twine & EnvironmentStr)
Triple	Triple.cpp	/^Triple::Triple(const Twine &Str)$/;"	kind:f	class:Triple	signature:(const Twine & Str)
Triple::Triple	Triple.cpp	/^Triple::Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr)$/;"	kind:f	class:Triple	signature:(const Twine & ArchStr,const Twine & VendorStr,const Twine & OSStr)
Triple::Triple	Triple.cpp	/^Triple::Triple(const Twine &ArchStr, const Twine &VendorStr, const Twine &OSStr,$/;"	kind:f	class:Triple	signature:(const Twine & ArchStr,const Twine & VendorStr,const Twine & OSStr,const Twine & EnvironmentStr)
Triple::Triple	Triple.cpp	/^Triple::Triple(const Twine &Str)$/;"	kind:f	class:Triple	signature:(const Twine & Str)
Triple::get32BitArchVariant	Triple.cpp	/^Triple Triple::get32BitArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
Triple::get64BitArchVariant	Triple.cpp	/^Triple Triple::get64BitArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
Triple::getARMCPUForArch	Triple.cpp	/^StringRef Triple::getARMCPUForArch(StringRef MArch) const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(StringRef MArch) const
Triple::getArchName	Triple.cpp	/^StringRef Triple::getArchName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
Triple::getArchTypeForLLVMName	Triple.cpp	/^Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {$/;"	kind:f	class:Triple	typeref:typename:Triple::ArchType	signature:(StringRef Name)
Triple::getArchTypeName	Triple.cpp	/^StringRef Triple::getArchTypeName(ArchType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(ArchType Kind)
Triple::getArchTypePrefix	Triple.cpp	/^StringRef Triple::getArchTypePrefix(ArchType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(ArchType Kind)
Triple::getBigEndianArchVariant	Triple.cpp	/^Triple Triple::getBigEndianArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
Triple::getEnvironmentName	Triple.cpp	/^StringRef Triple::getEnvironmentName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
Triple::getEnvironmentTypeName	Triple.cpp	/^StringRef Triple::getEnvironmentTypeName(EnvironmentType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(EnvironmentType Kind)
Triple::getEnvironmentVersion	Triple.cpp	/^void Triple::getEnvironmentVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
Triple::getLittleEndianArchVariant	Triple.cpp	/^Triple Triple::getLittleEndianArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
Triple::getMacOSXVersion	Triple.cpp	/^bool Triple::getMacOSXVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:bool	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
Triple::getOSAndEnvironmentName	Triple.cpp	/^StringRef Triple::getOSAndEnvironmentName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
Triple::getOSName	Triple.cpp	/^StringRef Triple::getOSName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
Triple::getOSTypeName	Triple.cpp	/^StringRef Triple::getOSTypeName(OSType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(OSType Kind)
Triple::getOSVersion	Triple.cpp	/^void Triple::getOSVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
Triple::getVendorName	Triple.cpp	/^StringRef Triple::getVendorName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
Triple::getVendorTypeName	Triple.cpp	/^StringRef Triple::getVendorTypeName(VendorType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(VendorType Kind)
Triple::getWatchOSVersion	Triple.cpp	/^void Triple::getWatchOSVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
Triple::getiOSVersion	Triple.cpp	/^void Triple::getiOSVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
Triple::isArch16Bit	Triple.cpp	/^bool Triple::isArch16Bit() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
Triple::isArch32Bit	Triple.cpp	/^bool Triple::isArch32Bit() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
Triple::isArch64Bit	Triple.cpp	/^bool Triple::isArch64Bit() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
Triple::isLittleEndian	Triple.cpp	/^bool Triple::isLittleEndian() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
Triple::normalize	Triple.cpp	/^std::string Triple::normalize(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:std::string	signature:(StringRef Str)
Triple::setArch	Triple.cpp	/^void Triple::setArch(ArchType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(ArchType Kind)
Triple::setArchName	Triple.cpp	/^void Triple::setArchName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
Triple::setEnvironment	Triple.cpp	/^void Triple::setEnvironment(EnvironmentType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(EnvironmentType Kind)
Triple::setEnvironmentName	Triple.cpp	/^void Triple::setEnvironmentName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
Triple::setOS	Triple.cpp	/^void Triple::setOS(OSType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(OSType Kind)
Triple::setOSAndEnvironmentName	Triple.cpp	/^void Triple::setOSAndEnvironmentName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
Triple::setOSName	Triple.cpp	/^void Triple::setOSName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
Triple::setObjectFormat	Triple.cpp	/^void Triple::setObjectFormat(ObjectFormatType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(ObjectFormatType Kind)
Triple::setTriple	Triple.cpp	/^void Triple::setTriple(const Twine &Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(const Twine & Str)
Triple::setVendor	Triple.cpp	/^void Triple::setVendor(VendorType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(VendorType Kind)
Triple::setVendorName	Triple.cpp	/^void Triple::setVendorName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
TryFindProgram	GraphWriter.cpp	/^  bool TryFindProgram(StringRef Names, std::string &ProgramPath) {$/;"	kind:f	struct:__anoneadbbe250110::GraphSession	typeref:typename:bool	file:	access:public	signature:(StringRef Names,std::string & ProgramPath)
Twine::dump	Twine.cpp	/^LLVM_DUMP_METHOD void Twine::dump() const {$/;"	kind:f	class:Twine	typeref:typename:LLVM_DUMP_METHOD void	signature:() const
Twine::dumpRepr	Twine.cpp	/^void Twine::dumpRepr() const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:() const
Twine::print	Twine.cpp	/^void Twine::print(raw_ostream &OS) const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS) const
Twine::printOneChild	Twine.cpp	/^void Twine::printOneChild(raw_ostream &OS, Child Ptr,$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS,Child Ptr,NodeKind Kind) const
Twine::printOneChildRepr	Twine.cpp	/^void Twine::printOneChildRepr(raw_ostream &OS, Child Ptr,$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS,Child Ptr,NodeKind Kind) const
Twine::printRepr	Twine.cpp	/^void Twine::printRepr(raw_ostream &OS) const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS) const
Twine::str	Twine.cpp	/^std::string Twine::str() const {$/;"	kind:f	class:Twine	typeref:typename:std::string	signature:() const
Twine::toNullTerminatedStringRef	Twine.cpp	/^StringRef Twine::toNullTerminatedStringRef(SmallVectorImpl<char> &Out) const {$/;"	kind:f	class:Twine	typeref:typename:StringRef	signature:(SmallVectorImpl<char> & Out) const
Twine::toVector	Twine.cpp	/^void Twine::toVector(SmallVectorImpl<char> &Out) const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:(SmallVectorImpl<char> & Out) const
UEF_UTF16_BE	YAMLParser.cpp	/^  UEF_UTF16_BE, \/\/\/< UTF-16 Big Endian$/;"	kind:e	enum:UnicodeEncodingForm	file:	access:public
UEF_UTF16_LE	YAMLParser.cpp	/^  UEF_UTF16_LE, \/\/\/< UTF-16 Little Endian$/;"	kind:e	enum:UnicodeEncodingForm	file:	access:public
UEF_UTF32_BE	YAMLParser.cpp	/^  UEF_UTF32_BE, \/\/\/< UTF-32 Big Endian$/;"	kind:e	enum:UnicodeEncodingForm	file:	access:public
UEF_UTF32_LE	YAMLParser.cpp	/^  UEF_UTF32_LE, \/\/\/< UTF-32 Little Endian$/;"	kind:e	enum:UnicodeEncodingForm	file:	access:public
UEF_UTF8	YAMLParser.cpp	/^  UEF_UTF8,     \/\/\/< UTF-8 or ascii.$/;"	kind:e	enum:UnicodeEncodingForm	file:	access:public
UEF_Unknown	YAMLParser.cpp	/^  UEF_Unknown   \/\/\/< Not a valid Unicode encoding.$/;"	kind:e	enum:UnicodeEncodingForm	file:	access:public
UNI_SUR_HIGH_END	ConvertUTF.cpp	/^#define UNI_SUR_HIGH_END /;"	kind:d	file:
UNI_SUR_HIGH_START	ConvertUTF.cpp	/^#define UNI_SUR_HIGH_START /;"	kind:d	file:
UNI_SUR_LOW_END	ConvertUTF.cpp	/^#define UNI_SUR_LOW_END /;"	kind:d	file:
UNI_SUR_LOW_START	ConvertUTF.cpp	/^#define UNI_SUR_LOW_START /;"	kind:d	file:
UNQUOTED	CommandLine.cpp	/^  enum { INIT, UNQUOTED, QUOTED } State = INIT;$/;"	kind:e	enum:cl::TokenizeWindowsCommandLine::__anon2c11109d0403	file:	access:public
USEBOL	regex2.h	/^#		define	USEBOL	/;"	kind:d
USEEOL	regex2.h	/^#		define	USEEOL	/;"	kind:d
USE_OSX_GETHOSTUUID	LockFileManager.cpp	/^#define USE_OSX_GETHOSTUUID /;"	kind:d	file:
UTF16ToCurCP	Windows/WindowsSupport.h	/^std::error_code UTF16ToCurCP(const wchar_t *utf16, size_t utf16_len,$/;"	kind:p	namespace:llvm::sys::windows	typeref:typename:std::error_code	signature:(const wchar_t * utf16,size_t utf16_len,SmallVectorImpl<char> & utf8)
UTF16ToUTF8	Windows/WindowsSupport.h	/^std::error_code UTF16ToUTF8(const wchar_t *utf16, size_t utf16_len,$/;"	kind:p	namespace:llvm::sys::windows	typeref:typename:std::error_code	signature:(const wchar_t * utf16,size_t utf16_len,SmallVectorImpl<char> & utf8)
UTF8Decoded	YAMLParser.cpp	/^typedef std::pair<uint32_t, unsigned> UTF8Decoded;$/;"	kind:t	typeref:typename:std::pair<uint32_t,unsigned>	file:
UTF8ToUTF16	Windows/WindowsSupport.h	/^std::error_code UTF8ToUTF16(StringRef utf8, SmallVectorImpl<wchar_t> &utf16);$/;"	kind:p	namespace:llvm::sys::windows	typeref:typename:std::error_code	signature:(StringRef utf8,SmallVectorImpl<wchar_t> & utf16)
UncategorizedHiddenPrinter	CommandLine.cpp	/^static HelpPrinter UncategorizedHiddenPrinter(true);$/;"	kind:p	typeref:typename:HelpPrinter	file:	signature:(true)
UncategorizedNormalPrinter	CommandLine.cpp	/^static HelpPrinter UncategorizedNormalPrinter(false);$/;"	kind:p	typeref:typename:HelpPrinter	file:	signature:(false)
UncategorizedPrinter	CommandLine.cpp	/^  HelpPrinter &UncategorizedPrinter;$/;"	kind:m	class:__anon2c11109d0510::HelpPrinterWrapper	typeref:typename:HelpPrinter &	file:	access:private
UnicodeEncodingForm	YAMLParser.cpp	/^enum UnicodeEncodingForm {$/;"	kind:g	file:
UnsignedT	NativeFormatting.cpp	/^  using UnsignedT = typename std::make_unsigned<T>::type;$/;"	kind:t	function:write_signed	typeref:typename:std::make_unsigned<T>::type	file:
UpdatePosition	FormattedStream.cpp	/^static void UpdatePosition(std::pair<unsigned, unsigned> &Position, const char *Ptr, size_t Size/;"	kind:f	typeref:typename:void	file:	signature:(std::pair<unsigned,unsigned> & Position,const char * Ptr,size_t Size)
UpdatedSearchState	DAGDeltaAlgorithm.cpp	/^  void UpdatedSearchState(const changeset_ty &Changes,$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:void	file:	access:private	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets,const changeset_ty & Required)
UpdatedSearchState	DAGDeltaAlgorithm.cpp	/^  void UpdatedSearchState(const changeset_ty &Changes,$/;"	kind:f	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:void	file:	access:protected	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets)
UseBackgroundPriority	CrashRecoveryContext.cpp	/^  bool UseBackgroundPriority;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:bool	file:	access:public
UserData	Threading.cpp	/^  void *UserData;$/;"	kind:m	struct:ThreadInfo	typeref:typename:void *	file:	access:public
UserFn	Threading.cpp	/^  void (*UserFn)(void *);$/;"	kind:m	struct:ThreadInfo	typeref:typename:void (*)(void *)	file:	access:public
VENDOR_AMD	Host.cpp	/^  VENDOR_AMD,$/;"	kind:e	enum:ProcessorVendors	file:	access:public
VENDOR_INTEL	Host.cpp	/^  VENDOR_INTEL = 1,$/;"	kind:e	enum:ProcessorVendors	file:	access:public
VENDOR_MAX	Host.cpp	/^  VENDOR_MAX$/;"	kind:e	enum:ProcessorVendors	file:	access:public
VENDOR_OTHER	Host.cpp	/^  VENDOR_OTHER,$/;"	kind:e	enum:ProcessorVendors	file:	access:public
VK_CmdStart	GraphWriter.cpp	/^    VK_CmdStart$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
VK_Ghostview	GraphWriter.cpp	/^    VK_Ghostview,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
VK_None	GraphWriter.cpp	/^    VK_None,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
VK_OSXOpen	GraphWriter.cpp	/^    VK_OSXOpen,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
VK_XDGOpen	GraphWriter.cpp	/^    VK_XDGOpen,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
ValgrindDiscardTranslations	Valgrind.cpp	/^void llvm::sys::ValgrindDiscardTranslations(const void *Addr, size_t Len) {$/;"	kind:f	class:llvm::sys	typeref:typename:void	signature:(const void * Addr,size_t Len)
Value	YAMLParser.cpp	/^  std::string Value;$/;"	kind:m	struct:llvm::yaml::Token	typeref:typename:std::string	file:	access:public
VendorSignatures	Host.cpp	/^enum VendorSignatures {$/;"	kind:g	file:
VersOp	CommandLine.cpp	/^    VersOp("version", cl::desc("Display the version of this program"),$/;"	kind:v	typeref:typename:cl::opt<VersionPrinter,true,parser<bool>>	file:
VersionPrinter	CommandLine.cpp	/^class VersionPrinter {$/;"	kind:c	namespace:__anon2c11109d0610	file:
VersionPrinterInstance	CommandLine.cpp	/^static VersionPrinter VersionPrinterInstance;$/;"	kind:v	typeref:typename:VersionPrinter	file:
ViewBackground	GraphWriter.cpp	/^static cl::opt<bool> ViewBackground("view-background", cl::Hidden,$/;"	kind:v	typeref:typename:cl::opt<bool>	file:
ViewerKind	GraphWriter.cpp	/^  enum ViewerKind {$/;"	kind:g	function:llvm::DisplayGraph	file:
VirtualityString	Dwarf.cpp	/^StringRef llvm::dwarf::VirtualityString(unsigned Virtuality) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Virtuality)
VisibilityString	Dwarf.cpp	/^StringRef llvm::dwarf::VisibilityString(unsigned Visibility) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Visibility)
WIN32_LEAN_AND_MEAN	Windows/WindowsSupport.h	/^#define WIN32_LEAN_AND_MEAN$/;"	kind:d
WinEH	ARMWinEH.cpp	/^namespace WinEH {$/;"	kind:n	namespace:llvm::ARM	file:
WrappedHiddenPrinter	CommandLine.cpp	/^static HelpPrinterWrapper WrappedHiddenPrinter(UncategorizedHiddenPrinter,$/;"	kind:p	typeref:typename:HelpPrinterWrapper	file:	signature:(UncategorizedHiddenPrinter,CategorizedHiddenPrinter)
WrappedNormalPrinter	CommandLine.cpp	/^static HelpPrinterWrapper WrappedNormalPrinter(UncategorizedNormalPrinter,$/;"	kind:p	typeref:typename:HelpPrinterWrapper	file:	signature:(UncategorizedNormalPrinter,CategorizedNormalPrinter)
XorSlowCase	APInt.cpp	/^APInt APInt::XorSlowCase(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
_REGEX_H_	regex_impl.h	/^#define	_REGEX_H_$/;"	kind:d
_WIN32_IE	Windows/WindowsSupport.h	/^#define _WIN32_IE /;"	kind:d
_WIN32_WINNT	Windows/WindowsSupport.h	/^#define _WIN32_WINNT /;"	kind:d
__anon0767ba880108	regex2.h	/^typedef struct {$/;"	kind:s
__anon0767ba880108::hash	regex2.h	/^	uch hash;		\/* hash code *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:uch	access:public
__anon0767ba880108::mask	regex2.h	/^	uch mask;		\/* bit within array *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:uch	access:public
__anon0767ba880108::multis	regex2.h	/^	char *multis;		\/* -> char[smulti]  ab\\0cd\\0ef\\0\\0 *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:char *	access:public
__anon0767ba880108::ptr	regex2.h	/^	uch *ptr;		\/* -> uch [csetsize] *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:uch *	access:public
__anon0767ba880108::smultis	regex2.h	/^	size_t smultis;$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:size_t	access:public
__anon19b65a8a0102	StringRef.cpp	/^  return find_if([L](char D) { return ascii_tolower(D) == L; }, From);$/;"	kind:f	function:StringRef::find_lower	file:	signature:(char D)
__anon1bae88cd0102	CachePruning.cpp	/^      [&](StringRef Path) {$/;"	kind:f	function:CachePruning::prune	file:	signature:(StringRef Path)
__anon2c11109d0110	CommandLine.cpp	/^namespace {$/;"	kind:n	file:
__anon2c11109d0110::CommandLineParser	CommandLine.cpp	/^class CommandLineParser {$/;"	kind:c	namespace:__anon2c11109d0110	file:
__anon2c11109d0110::CommandLineParser::ActiveSubCommand	CommandLine.cpp	/^  SubCommand *ActiveSubCommand;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SubCommand *	file:	access:private
__anon2c11109d0110::CommandLineParser::CommandLineParser	CommandLine.cpp	/^  CommandLineParser() : ActiveSubCommand(nullptr) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	file:	access:public	signature:()
__anon2c11109d0110::CommandLineParser::LookupOption	CommandLine.cpp	/^  Option *LookupOption(SubCommand &Sub, StringRef &Arg, StringRef &Value);$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:Option *	file:	access:private	signature:(SubCommand & Sub,StringRef & Arg,StringRef & Value)
__anon2c11109d0110::CommandLineParser::LookupSubCommand	CommandLine.cpp	/^  SubCommand *LookupSubCommand(StringRef Name);$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SubCommand *	file:	access:private	signature:(StringRef Name)
__anon2c11109d0110::CommandLineParser::MoreHelp	CommandLine.cpp	/^  std::vector<StringRef> MoreHelp;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:std::vector<StringRef>	file:	access:public
__anon2c11109d0110::CommandLineParser::ParseCommandLineOptions	CommandLine.cpp	/^  bool ParseCommandLineOptions(int argc, const char *const *argv,$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:bool	file:	access:public	signature:(int argc,const char * const * argv,StringRef Overview,bool IgnoreErrors)
__anon2c11109d0110::CommandLineParser::ProgramName	CommandLine.cpp	/^  std::string ProgramName;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:std::string	file:	access:public
__anon2c11109d0110::CommandLineParser::ProgramOverview	CommandLine.cpp	/^  StringRef ProgramOverview;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:StringRef	file:	access:public
__anon2c11109d0110::CommandLineParser::RegisteredOptionCategories	CommandLine.cpp	/^  SmallPtrSet<OptionCategory *, 16> RegisteredOptionCategories;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SmallPtrSet<OptionCategory *,16>	file:	access:public
__anon2c11109d0110::CommandLineParser::RegisteredSubCommands	CommandLine.cpp	/^  SmallPtrSet<SubCommand *, 4> RegisteredSubCommands;$/;"	kind:m	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SmallPtrSet<SubCommand *,4>	file:	access:public
__anon2c11109d0110::CommandLineParser::ResetAllOptionOccurrences	CommandLine.cpp	/^  void ResetAllOptionOccurrences();$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:()
__anon2c11109d0110::CommandLineParser::addLiteralOption	CommandLine.cpp	/^  void addLiteralOption(Option &Opt, StringRef Name) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option & Opt,StringRef Name)
__anon2c11109d0110::CommandLineParser::addLiteralOption	CommandLine.cpp	/^  void addLiteralOption(Option &Opt, SubCommand *SC, StringRef Name) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option & Opt,SubCommand * SC,StringRef Name)
__anon2c11109d0110::CommandLineParser::addOption	CommandLine.cpp	/^  void addOption(Option *O) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O)
__anon2c11109d0110::CommandLineParser::addOption	CommandLine.cpp	/^  void addOption(Option *O, SubCommand *SC) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,SubCommand * SC)
__anon2c11109d0110::CommandLineParser::getActiveSubCommand	CommandLine.cpp	/^  SubCommand *getActiveSubCommand() { return ActiveSubCommand; }$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SubCommand *	file:	access:public	signature:()
__anon2c11109d0110::CommandLineParser::getRegisteredSubcommands	CommandLine.cpp	/^  getRegisteredSubcommands() {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:iterator_range<typename SmallPtrSet<SubCommand *,4>::iterator>	file:	access:public	signature:()
__anon2c11109d0110::CommandLineParser::hasOptions	CommandLine.cpp	/^  bool hasOptions() const {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:bool	file:	access:public	signature:() const
__anon2c11109d0110::CommandLineParser::hasOptions	CommandLine.cpp	/^  bool hasOptions(const SubCommand &Sub) const {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:bool	file:	access:public	signature:(const SubCommand & Sub) const
__anon2c11109d0110::CommandLineParser::printOptionValues	CommandLine.cpp	/^  void printOptionValues();$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:()
__anon2c11109d0110::CommandLineParser::registerCategory	CommandLine.cpp	/^  void registerCategory(OptionCategory *cat) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(OptionCategory * cat)
__anon2c11109d0110::CommandLineParser::registerSubCommand	CommandLine.cpp	/^  void registerSubCommand(SubCommand *sub) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(SubCommand * sub)
__anon2c11109d0110::CommandLineParser::removeOption	CommandLine.cpp	/^  void removeOption(Option *O) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O)
__anon2c11109d0110::CommandLineParser::removeOption	CommandLine.cpp	/^  void removeOption(Option *O, SubCommand *SC) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,SubCommand * SC)
__anon2c11109d0110::CommandLineParser::reset	CommandLine.cpp	/^  void reset() {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:()
__anon2c11109d0110::CommandLineParser::unregisterSubCommand	CommandLine.cpp	/^  void unregisterSubCommand(SubCommand *sub) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(SubCommand * sub)
__anon2c11109d0110::CommandLineParser::updateArgStr	CommandLine.cpp	/^  void updateArgStr(Option *O, StringRef NewName) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,StringRef NewName)
__anon2c11109d0110::CommandLineParser::updateArgStr	CommandLine.cpp	/^  void updateArgStr(Option *O, StringRef NewName, SubCommand *SC) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,StringRef NewName,SubCommand * SC)
__anon2c11109d0202	CommandLine.cpp	/^                    [cat](const OptionCategory *Category) {$/;"	kind:f	function:__anon2c11109d0110::CommandLineParser::registerCategory	file:	signature:(const OptionCategory *Category)
__anon2c11109d0302	CommandLine.cpp	/^                    [sub](const SubCommand *Sub) {$/;"	kind:f	function:__anon2c11109d0110::CommandLineParser::registerSubCommand	file:	signature:(const SubCommand *Sub)
__anon2c11109d0403	CommandLine.cpp	/^  enum { INIT, UNQUOTED, QUOTED } State = INIT;$/;"	kind:g	function:cl::TokenizeWindowsCommandLine	file:
__anon2c11109d0510	CommandLine.cpp	/^namespace {$/;"	kind:n	file:
__anon2c11109d0510::CategorizedHelpPrinter	CommandLine.cpp	/^class CategorizedHelpPrinter : public HelpPrinter {$/;"	kind:c	namespace:__anon2c11109d0510	file:	inherits:HelpPrinter
__anon2c11109d0510::CategorizedHelpPrinter::CategorizedHelpPrinter	CommandLine.cpp	/^  explicit CategorizedHelpPrinter(bool showHidden) : HelpPrinter(showHidden) {}$/;"	kind:f	class:__anon2c11109d0510::CategorizedHelpPrinter	file:	access:public	signature:(bool showHidden)
__anon2c11109d0510::CategorizedHelpPrinter::OptionCategoryCompare	CommandLine.cpp	/^  static int OptionCategoryCompare(OptionCategory *const *A,$/;"	kind:f	class:__anon2c11109d0510::CategorizedHelpPrinter	typeref:typename:int	file:	access:public	signature:(OptionCategory * const * A,OptionCategory * const * B)
__anon2c11109d0510::CategorizedHelpPrinter::printOptions	CommandLine.cpp	/^  void printOptions(StrOptionPairVector &Opts, size_t MaxArgLen) override {$/;"	kind:f	class:__anon2c11109d0510::CategorizedHelpPrinter	typeref:typename:void	file:	access:protected	signature:(StrOptionPairVector & Opts,size_t MaxArgLen)
__anon2c11109d0510::HelpPrinter	CommandLine.cpp	/^class HelpPrinter {$/;"	kind:c	namespace:__anon2c11109d0510	file:
__anon2c11109d0510::HelpPrinter::HelpPrinter	CommandLine.cpp	/^  explicit HelpPrinter(bool showHidden) : ShowHidden(showHidden) {}$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	file:	access:public	signature:(bool showHidden)
__anon2c11109d0510::HelpPrinter::ShowHidden	CommandLine.cpp	/^  const bool ShowHidden;$/;"	kind:m	class:__anon2c11109d0510::HelpPrinter	typeref:typename:const bool	file:	access:protected
__anon2c11109d0510::HelpPrinter::StrOptionPairVector	CommandLine.cpp	/^      StrOptionPairVector;$/;"	kind:t	class:__anon2c11109d0510::HelpPrinter	typeref:typename:SmallVector<std::pair<const char *,Option * >,128>	file:	access:protected
__anon2c11109d0510::HelpPrinter::StrSubCommandPairVector	CommandLine.cpp	/^      StrSubCommandPairVector;$/;"	kind:t	class:__anon2c11109d0510::HelpPrinter	typeref:typename:SmallVector<std::pair<const char *,SubCommand * >,128>	file:	access:protected
__anon2c11109d0510::HelpPrinter::operator =	CommandLine.cpp	/^  void operator=(bool Value) {$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	typeref:typename:void	file:	access:public	signature:(bool Value)
__anon2c11109d0510::HelpPrinter::printOptions	CommandLine.cpp	/^  virtual void printOptions(StrOptionPairVector &Opts, size_t MaxArgLen) {$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	typeref:typename:void	file:	access:protected	signature:(StrOptionPairVector & Opts,size_t MaxArgLen)
__anon2c11109d0510::HelpPrinter::printSubCommands	CommandLine.cpp	/^  void printSubCommands(StrSubCommandPairVector &Subs, size_t MaxSubLen) {$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	typeref:typename:void	file:	access:protected	signature:(StrSubCommandPairVector & Subs,size_t MaxSubLen)
__anon2c11109d0510::HelpPrinter::~HelpPrinter	CommandLine.cpp	/^  virtual ~HelpPrinter() {}$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	file:	access:public	signature:()
__anon2c11109d0510::HelpPrinterWrapper	CommandLine.cpp	/^class HelpPrinterWrapper {$/;"	kind:c	namespace:__anon2c11109d0510	file:
__anon2c11109d0510::HelpPrinterWrapper::CategorizedPrinter	CommandLine.cpp	/^  CategorizedHelpPrinter &CategorizedPrinter;$/;"	kind:m	class:__anon2c11109d0510::HelpPrinterWrapper	typeref:typename:CategorizedHelpPrinter &	file:	access:private
__anon2c11109d0510::HelpPrinterWrapper::HelpPrinterWrapper	CommandLine.cpp	/^  explicit HelpPrinterWrapper(HelpPrinter &UncategorizedPrinter,$/;"	kind:f	class:__anon2c11109d0510::HelpPrinterWrapper	file:	access:public	signature:(HelpPrinter & UncategorizedPrinter,CategorizedHelpPrinter & CategorizedPrinter)
__anon2c11109d0510::HelpPrinterWrapper::UncategorizedPrinter	CommandLine.cpp	/^  HelpPrinter &UncategorizedPrinter;$/;"	kind:m	class:__anon2c11109d0510::HelpPrinterWrapper	typeref:typename:HelpPrinter &	file:	access:private
__anon2c11109d0510::HelpPrinterWrapper::operator =	CommandLine.cpp	/^  void operator=(bool Value);$/;"	kind:p	class:__anon2c11109d0510::HelpPrinterWrapper	typeref:typename:void	file:	access:public	signature:(bool Value)
__anon2c11109d0610	CommandLine.cpp	/^namespace {$/;"	kind:n	file:
__anon2c11109d0610::VersionPrinter	CommandLine.cpp	/^class VersionPrinter {$/;"	kind:c	namespace:__anon2c11109d0610	file:
__anon2c11109d0610::VersionPrinter::operator =	CommandLine.cpp	/^  void operator=(bool OptionWasSpecified) {$/;"	kind:f	class:__anon2c11109d0610::VersionPrinter	typeref:typename:void	file:	access:public	signature:(bool OptionWasSpecified)
__anon2c11109d0610::VersionPrinter::print	CommandLine.cpp	/^  void print() {$/;"	kind:f	class:__anon2c11109d0610::VersionPrinter	typeref:typename:void	file:	access:public	signature:()
__anon418572f60110	YAMLParser.cpp	/^namespace {$/;"	kind:n	file:
__anon418572f60110::SimpleKey	YAMLParser.cpp	/^struct SimpleKey {$/;"	kind:s	namespace:__anon418572f60110	file:
__anon418572f60110::SimpleKey::Column	YAMLParser.cpp	/^  unsigned Column;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:unsigned	file:	access:public
__anon418572f60110::SimpleKey::FlowLevel	YAMLParser.cpp	/^  unsigned FlowLevel;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:unsigned	file:	access:public
__anon418572f60110::SimpleKey::IsRequired	YAMLParser.cpp	/^  bool IsRequired;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:bool	file:	access:public
__anon418572f60110::SimpleKey::Line	YAMLParser.cpp	/^  unsigned Line;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:unsigned	file:	access:public
__anon418572f60110::SimpleKey::Tok	YAMLParser.cpp	/^  TokenQueueT::iterator Tok;$/;"	kind:m	struct:__anon418572f60110::SimpleKey	typeref:typename:TokenQueueT::iterator	file:	access:public
__anon418572f60110::SimpleKey::operator ==	YAMLParser.cpp	/^  bool operator ==(const SimpleKey &Other) {$/;"	kind:f	struct:__anon418572f60110::SimpleKey	typeref:typename:bool	file:	access:public	signature:(const SimpleKey & Other)
__anon56889252010a	APInt.cpp	/^  union {$/;"	kind:u	function:llvm::APIntOps::RoundDoubleToAPInt	file:
__anon56889252020a	APInt.cpp	/^  union {$/;"	kind:u	function:APInt::roundToDouble	file:
__anon568892520310	APInt.cpp	/^namespace {$/;"	kind:n	file:
__anon568892520310::highHalf	APInt.cpp	/^  highHalf(integerPart part)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:integerPart	file:	signature:(integerPart part)
__anon568892520310::lowBitMask	APInt.cpp	/^  lowBitMask(unsigned int bits)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:integerPart	file:	signature:(unsigned int bits)
__anon568892520310::lowHalf	APInt.cpp	/^  lowHalf(integerPart part)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:integerPart	file:	signature:(integerPart part)
__anon568892520310::partLSB	APInt.cpp	/^  partLSB(integerPart value)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:unsigned int	file:	signature:(integerPart value)
__anon568892520310::partMSB	APInt.cpp	/^  partMSB(integerPart value)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:unsigned int	file:	signature:(integerPart value)
__anon58000f290110	MemoryBuffer.cpp	/^namespace {$/;"	kind:n	file:
__anon58000f290110::NamedBufferAlloc	MemoryBuffer.cpp	/^struct NamedBufferAlloc {$/;"	kind:s	namespace:__anon58000f290110	file:
__anon58000f290110::NamedBufferAlloc::Name	MemoryBuffer.cpp	/^  const Twine &Name;$/;"	kind:m	struct:__anon58000f290110::NamedBufferAlloc	typeref:typename:const Twine &	file:	access:public
__anon58000f290110::NamedBufferAlloc::NamedBufferAlloc	MemoryBuffer.cpp	/^  NamedBufferAlloc(const Twine &Name) : Name(Name) {}$/;"	kind:f	struct:__anon58000f290110::NamedBufferAlloc	file:	access:public	signature:(const Twine & Name)
__anon58000f290210	MemoryBuffer.cpp	/^namespace {$/;"	kind:n	file:
__anon58000f290210::MemoryBufferMem	MemoryBuffer.cpp	/^class MemoryBufferMem : public MemoryBuffer {$/;"	kind:c	namespace:__anon58000f290210	file:	inherits:MemoryBuffer
__anon58000f290210::MemoryBufferMem::MemoryBufferMem	MemoryBuffer.cpp	/^  MemoryBufferMem(StringRef InputData, bool RequiresNullTerminator) {$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	file:	access:public	signature:(StringRef InputData,bool RequiresNullTerminator)
__anon58000f290210::MemoryBufferMem::getBufferIdentifier	MemoryBuffer.cpp	/^  StringRef getBufferIdentifier() const override {$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	typeref:typename:StringRef	file:	access:public	signature:() const
__anon58000f290210::MemoryBufferMem::getBufferKind	MemoryBuffer.cpp	/^  BufferKind getBufferKind() const override {$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	typeref:typename:BufferKind	file:	access:public	signature:() const
__anon58000f290210::MemoryBufferMem::operator delete	MemoryBuffer.cpp	/^  void operator delete(void *p) { ::operator delete(p); }$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	typeref:typename:void	file:	access:public	signature:(void * p)
__anon58000f290310	MemoryBuffer.cpp	/^namespace {$/;"	kind:n	file:
__anon58000f290310::MemoryBufferMMapFile	MemoryBuffer.cpp	/^class MemoryBufferMMapFile : public MemoryBuffer {$/;"	kind:c	namespace:__anon58000f290310	file:	inherits:MemoryBuffer
__anon58000f290310::MemoryBufferMMapFile::MFR	MemoryBuffer.cpp	/^  sys::fs::mapped_file_region MFR;$/;"	kind:m	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:sys::fs::mapped_file_region	file:	access:private
__anon58000f290310::MemoryBufferMMapFile::MemoryBufferMMapFile	MemoryBuffer.cpp	/^  MemoryBufferMMapFile(bool RequiresNullTerminator, int FD, uint64_t Len,$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	file:	access:public	signature:(bool RequiresNullTerminator,int FD,uint64_t Len,uint64_t Offset,std::error_code & EC)
__anon58000f290310::MemoryBufferMMapFile::getBufferIdentifier	MemoryBuffer.cpp	/^  StringRef getBufferIdentifier() const override {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:StringRef	file:	access:public	signature:() const
__anon58000f290310::MemoryBufferMMapFile::getBufferKind	MemoryBuffer.cpp	/^  BufferKind getBufferKind() const override {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:BufferKind	file:	access:public	signature:() const
__anon58000f290310::MemoryBufferMMapFile::getLegalMapOffset	MemoryBuffer.cpp	/^  static uint64_t getLegalMapOffset(uint64_t Offset) {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:uint64_t	file:	access:private	signature:(uint64_t Offset)
__anon58000f290310::MemoryBufferMMapFile::getLegalMapSize	MemoryBuffer.cpp	/^  static uint64_t getLegalMapSize(uint64_t Len, uint64_t Offset) {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:uint64_t	file:	access:private	signature:(uint64_t Len,uint64_t Offset)
__anon58000f290310::MemoryBufferMMapFile::getStart	MemoryBuffer.cpp	/^  const char *getStart(uint64_t Len, uint64_t Offset) {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:const char *	file:	access:private	signature:(uint64_t Len,uint64_t Offset)
__anon58000f290310::MemoryBufferMMapFile::operator delete	MemoryBuffer.cpp	/^  void operator delete(void *p) { ::operator delete(p); }$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:void	file:	access:public	signature:(void * p)
__anon6346c934010a	Host.cpp	/^  union {$/;"	kind:u	function:sys::getHostCPUFeatures	file:
__anon6346c9340203	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:g	function:sys::getHostCPUFeatures	file:
__anon63a527560102	TargetRegistry.cpp	/^                     [&](const Target &T) { return ArchName == T.getName(); });$/;"	kind:f	function:TargetRegistry::lookupTarget	file:	signature:(const Target &T)
__anon63a527560202	TargetRegistry.cpp	/^  auto ArchMatch = [&](const Target &T) { return T.ArchMatchFn(Arch); };$/;"	kind:f	function:TargetRegistry::lookupTarget	file:	signature:(const Target &T)
__anon664fcfb30110	DAGDeltaAlgorithm.cpp	/^namespace {$/;"	kind:n	file:
__anon664fcfb30110::DAGDeltaAlgorithmImpl	DAGDeltaAlgorithm.cpp	/^class DAGDeltaAlgorithmImpl {$/;"	kind:c	namespace:__anon664fcfb30110	file:
__anon664fcfb30110::DAGDeltaAlgorithmImpl::DAGDeltaAlgorithmImpl	DAGDeltaAlgorithm.cpp	/^  DAGDeltaAlgorithmImpl(DAGDeltaAlgorithm &DDA, const changeset_ty &Changes,$/;"	kind:p	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	file:	access:public	signature:(DAGDeltaAlgorithm & DDA,const changeset_ty & Changes,const std::vector<edge_ty> & Dependencies)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::DDA	DAGDeltaAlgorithm.cpp	/^  DAGDeltaAlgorithm &DDA;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm &	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::ExecuteOneTest	DAGDeltaAlgorithm.cpp	/^  bool ExecuteOneTest(const changeset_ty &S) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:bool	file:	access:private	signature:(const changeset_ty & S)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::FailedTestsCache	DAGDeltaAlgorithm.cpp	/^  mutable std::set<changeset_ty> FailedTestsCache;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::set<changeset_ty>	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::GetTestResult	DAGDeltaAlgorithm.cpp	/^  bool GetTestResult(const changeset_ty &Changes, const changeset_ty &Required);$/;"	kind:p	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:bool	file:	access:public	signature:(const changeset_ty & Changes,const changeset_ty & Required)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::PredClosure	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::set<change_ty> > PredClosure;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::set<change_ty>>	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::Predecessors	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::vector<change_ty> > Predecessors;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::vector<change_ty>>	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::Roots	DAGDeltaAlgorithm.cpp	/^  std::vector<change_ty> Roots;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::vector<change_ty>	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::Run	DAGDeltaAlgorithm.cpp	/^  changeset_ty Run();$/;"	kind:p	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:changeset_ty	file:	access:public	signature:()
__anon664fcfb30110::DAGDeltaAlgorithmImpl::SuccClosure	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::set<change_ty> > SuccClosure;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::set<change_ty>>	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::Successors	DAGDeltaAlgorithm.cpp	/^  std::map<change_ty, std::vector<change_ty> > Successors;$/;"	kind:m	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::map<change_ty,std::vector<change_ty>>	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::UpdatedSearchState	DAGDeltaAlgorithm.cpp	/^  void UpdatedSearchState(const changeset_ty &Changes,$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:void	file:	access:private	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets,const changeset_ty & Required)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::change_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::change_ty change_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::change_ty	file:	access:public
__anon664fcfb30110::DAGDeltaAlgorithmImpl::changeset_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::changeset_ty changeset_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::changeset_ty	file:	access:public
__anon664fcfb30110::DAGDeltaAlgorithmImpl::changesetlist_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::changesetlist_ty changesetlist_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::changesetlist_ty	file:	access:public
__anon664fcfb30110::DAGDeltaAlgorithmImpl::edge_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::edge_ty edge_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::edge_ty	file:	access:public
__anon664fcfb30110::DAGDeltaAlgorithmImpl::pred_begin	DAGDeltaAlgorithm.cpp	/^  pred_iterator_ty pred_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::pred_closure_begin	DAGDeltaAlgorithm.cpp	/^  pred_closure_iterator_ty pred_closure_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::pred_closure_end	DAGDeltaAlgorithm.cpp	/^  pred_closure_iterator_ty pred_closure_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::pred_closure_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::set<change_ty>::iterator pred_closure_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::set<change_ty>::iterator	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::pred_end	DAGDeltaAlgorithm.cpp	/^  pred_iterator_ty pred_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::pred_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::vector<change_ty>::iterator pred_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::vector<change_ty>::iterator	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::succ_begin	DAGDeltaAlgorithm.cpp	/^  succ_iterator_ty succ_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::succ_closure_begin	DAGDeltaAlgorithm.cpp	/^  succ_closure_iterator_ty succ_closure_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::succ_closure_end	DAGDeltaAlgorithm.cpp	/^  succ_closure_iterator_ty succ_closure_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::succ_closure_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::set<change_ty>::iterator succ_closure_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::set<change_ty>::iterator	file:	access:private
__anon664fcfb30110::DAGDeltaAlgorithmImpl::succ_end	DAGDeltaAlgorithm.cpp	/^  succ_iterator_ty succ_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_iterator_ty	file:	access:private	signature:(change_ty Node)
__anon664fcfb30110::DAGDeltaAlgorithmImpl::succ_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::vector<change_ty>::iterator succ_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::vector<change_ty>::iterator	file:	access:private
__anon664fcfb30110::DeltaActiveSetHelper	DAGDeltaAlgorithm.cpp	/^class DeltaActiveSetHelper : public DeltaAlgorithm {$/;"	kind:c	namespace:__anon664fcfb30110	file:	inherits:DeltaAlgorithm
__anon664fcfb30110::DeltaActiveSetHelper::DDAI	DAGDeltaAlgorithm.cpp	/^  DAGDeltaAlgorithmImpl &DDAI;$/;"	kind:m	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:DAGDeltaAlgorithmImpl &	file:	access:private
__anon664fcfb30110::DeltaActiveSetHelper::DeltaActiveSetHelper	DAGDeltaAlgorithm.cpp	/^  DeltaActiveSetHelper(DAGDeltaAlgorithmImpl &DDAI,$/;"	kind:f	class:__anon664fcfb30110::DeltaActiveSetHelper	file:	access:public	signature:(DAGDeltaAlgorithmImpl & DDAI,const changeset_ty & Required)
__anon664fcfb30110::DeltaActiveSetHelper::ExecuteOneTest	DAGDeltaAlgorithm.cpp	/^  bool ExecuteOneTest(const changeset_ty &S) override {$/;"	kind:f	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:bool	file:	access:protected	signature:(const changeset_ty & S)
__anon664fcfb30110::DeltaActiveSetHelper::Required	DAGDeltaAlgorithm.cpp	/^  const changeset_ty &Required;$/;"	kind:m	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:const changeset_ty &	file:	access:private
__anon664fcfb30110::DeltaActiveSetHelper::UpdatedSearchState	DAGDeltaAlgorithm.cpp	/^  void UpdatedSearchState(const changeset_ty &Changes,$/;"	kind:f	class:__anon664fcfb30110::DeltaActiveSetHelper	typeref:typename:void	file:	access:protected	signature:(const changeset_ty & Changes,const changesetlist_ty & Sets)
__anon6e61b8680102	ThreadPool.cpp	/^    Threads.emplace_back([&] {$/;"	kind:f	function:ThreadPool::ThreadPool	file:
__anon6e61b8680202	ThreadPool.cpp	/^                              [&] { return !EnableFlag || !Tasks.empty(); });$/;"	kind:f	function:ThreadPool::ThreadPool::__anon6e61b8680102	file:
__anon6e61b8680302	ThreadPool.cpp	/^                           [&] { return !ActiveThreads && Tasks.empty(); });$/;"	kind:f	function:ThreadPool::wait	file:
__anon6e61b8680402	ThreadPool.cpp	/^  PackagedTaskTy PackagedTask([Future]() { Future.get(); });$/;"	kind:f	function:ThreadPool::asyncImpl	file:	signature:()
__anon7a04bdce0110	Statistic.cpp	/^namespace {$/;"	kind:n	file:
__anon7a04bdce0110::StatisticInfo	Statistic.cpp	/^class StatisticInfo {$/;"	kind:c	namespace:__anon7a04bdce0110	file:
__anon7a04bdce0110::StatisticInfo::StatisticInfo	Statistic.cpp	/^  StatisticInfo();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo	file:	access:public	signature:()
__anon7a04bdce0110::StatisticInfo::Stats	Statistic.cpp	/^  std::vector<const Statistic*> Stats;$/;"	kind:m	class:__anon7a04bdce0110::StatisticInfo	typeref:typename:std::vector<const Statistic * >	file:	access:private
__anon7a04bdce0110::StatisticInfo::addStatistic	Statistic.cpp	/^  void addStatistic(const Statistic *S) {$/;"	kind:f	class:__anon7a04bdce0110::StatisticInfo	typeref:typename:void	file:	access:public	signature:(const Statistic * S)
__anon7a04bdce0110::StatisticInfo::llvm::PrintStatistics	Statistic.cpp	/^  friend void llvm::PrintStatistics();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo::llvm	typeref:typename:void	file:	signature:()
__anon7a04bdce0110::StatisticInfo::llvm::PrintStatistics	Statistic.cpp	/^  friend void llvm::PrintStatistics(raw_ostream &OS);$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo::llvm	typeref:typename:void	file:	signature:(raw_ostream & OS)
__anon7a04bdce0110::StatisticInfo::llvm::PrintStatisticsJSON	Statistic.cpp	/^  friend void llvm::PrintStatisticsJSON(raw_ostream &OS);$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo::llvm	typeref:typename:void	file:	signature:(raw_ostream & OS)
__anon7a04bdce0110::StatisticInfo::sort	Statistic.cpp	/^  void sort();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo	typeref:typename:void	file:	access:private	signature:()
__anon7a04bdce0110::StatisticInfo::~StatisticInfo	Statistic.cpp	/^  ~StatisticInfo();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo	file:	access:public	signature:()
__anon7a04bdce0202	Statistic.cpp	/^                   [](const Statistic *LHS, const Statistic *RHS) {$/;"	kind:f	function:StatisticInfo::sort	file:	signature:(const Statistic *LHS, const Statistic *RHS)
__anon80fe52fb0110	CrashRecoveryContext.cpp	/^namespace {$/;"	kind:n	file:
__anon80fe52fb0110::CrashRecoveryContextImpl	CrashRecoveryContext.cpp	/^struct CrashRecoveryContextImpl {$/;"	kind:s	namespace:__anon80fe52fb0110	file:
__anon80fe52fb0110::CrashRecoveryContextImpl::CRC	CrashRecoveryContext.cpp	/^  CrashRecoveryContext *CRC;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:CrashRecoveryContext *	file:	access:public
__anon80fe52fb0110::CrashRecoveryContextImpl::CrashRecoveryContextImpl	CrashRecoveryContext.cpp	/^  CrashRecoveryContextImpl(CrashRecoveryContext *CRC) : CRC(CRC),$/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	file:	access:public	signature:(CrashRecoveryContext * CRC)
__anon80fe52fb0110::CrashRecoveryContextImpl::Failed	CrashRecoveryContext.cpp	/^  volatile unsigned Failed : 1;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:volatile unsigned:1	file:	access:public
__anon80fe52fb0110::CrashRecoveryContextImpl::HandleCrash	CrashRecoveryContext.cpp	/^  void HandleCrash() {$/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:void	file:	access:public	signature:()
__anon80fe52fb0110::CrashRecoveryContextImpl::Next	CrashRecoveryContext.cpp	/^  const CrashRecoveryContextImpl *Next;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:const CrashRecoveryContextImpl *	file:	access:public
__anon80fe52fb0110::CrashRecoveryContextImpl::SwitchedThread	CrashRecoveryContext.cpp	/^  unsigned SwitchedThread : 1;$/;"	kind:m	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:unsigned:1	file:	access:public
__anon80fe52fb0110::CrashRecoveryContextImpl::setSwitchedThread	CrashRecoveryContext.cpp	/^  void setSwitchedThread() { $/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:void	file:	access:public	signature:()
__anon80fe52fb0110::CrashRecoveryContextImpl::~CrashRecoveryContextImpl	CrashRecoveryContext.cpp	/^  ~CrashRecoveryContextImpl() {$/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	file:	access:public	signature:()
__anon80fe52fb0110::CurrentContext	CrashRecoveryContext.cpp	/^    sys::ThreadLocal<const CrashRecoveryContextImpl> > CurrentContext;$/;"	kind:v	namespace:__anon80fe52fb0110	typeref:typename:ManagedStatic<sys::ThreadLocal<const CrashRecoveryContextImpl>>	file:
__anon80fe52fb0210	CrashRecoveryContext.cpp	/^namespace {$/;"	kind:n	file:
__anon80fe52fb0210::RunSafelyOnThreadInfo	CrashRecoveryContext.cpp	/^struct RunSafelyOnThreadInfo {$/;"	kind:s	namespace:__anon80fe52fb0210	file:
__anon80fe52fb0210::RunSafelyOnThreadInfo::CRC	CrashRecoveryContext.cpp	/^  CrashRecoveryContext *CRC;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:CrashRecoveryContext *	file:	access:public
__anon80fe52fb0210::RunSafelyOnThreadInfo::Fn	CrashRecoveryContext.cpp	/^  function_ref<void()> Fn;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:function_ref<void ()>	file:	access:public
__anon80fe52fb0210::RunSafelyOnThreadInfo::Result	CrashRecoveryContext.cpp	/^  bool Result;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:bool	file:	access:public
__anon80fe52fb0210::RunSafelyOnThreadInfo::UseBackgroundPriority	CrashRecoveryContext.cpp	/^  bool UseBackgroundPriority;$/;"	kind:m	struct:__anon80fe52fb0210::RunSafelyOnThreadInfo	typeref:typename:bool	file:	access:public
__anon842e844d0110	SourceMgr.cpp	/^namespace {$/;"	kind:n	file:
__anon842e844d0110::LineNoCacheTy	SourceMgr.cpp	/^  struct LineNoCacheTy {$/;"	kind:s	namespace:__anon842e844d0110	file:
__anon842e844d0110::LineNoCacheTy::LastQuery	SourceMgr.cpp	/^    const char *LastQuery;$/;"	kind:m	struct:__anon842e844d0110::LineNoCacheTy	typeref:typename:const char *	file:	access:public
__anon842e844d0110::LineNoCacheTy::LastQueryBufferID	SourceMgr.cpp	/^    unsigned LastQueryBufferID;$/;"	kind:m	struct:__anon842e844d0110::LineNoCacheTy	typeref:typename:unsigned	file:	access:public
__anon842e844d0110::LineNoCacheTy::LineNoOfQuery	SourceMgr.cpp	/^    unsigned LineNoOfQuery;$/;"	kind:m	struct:__anon842e844d0110::LineNoCacheTy	typeref:typename:unsigned	file:	access:public
__anon912220430110	Path.cpp	/^namespace {$/;"	kind:n	file:
__anon912220430110::filename_pos	Path.cpp	/^  size_t filename_pos(StringRef str) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:size_t	signature:(StringRef str)
__anon912220430110::find_first_component	Path.cpp	/^  StringRef find_first_component(StringRef path) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:StringRef	signature:(StringRef path)
__anon912220430110::parent_path_end	Path.cpp	/^  size_t parent_path_end(StringRef path) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:size_t	signature:(StringRef path)
__anon912220430110::preferred_separator	Path.cpp	/^  const char preferred_separator = '\/';$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char
__anon912220430110::preferred_separator	Path.cpp	/^  const char preferred_separator = '\\\\';$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char
__anon912220430110::root_dir_start	Path.cpp	/^  size_t root_dir_start(StringRef str) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:size_t	signature:(StringRef str)
__anon912220430110::separators	Path.cpp	/^  const char  separators = '\/';$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char
__anon912220430110::separators	Path.cpp	/^  const char *separators = "\\\\\/";$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char *
__anona48880470108	regex_impl.h	/^typedef struct {$/;"	kind:s
__anona48880470108::rm_eo	regex_impl.h	/^  llvm_regoff_t rm_eo;		\/* end of match *\/$/;"	kind:m	struct:__anona48880470108	typeref:typename:llvm_regoff_t	access:public
__anona48880470108::rm_so	regex_impl.h	/^  llvm_regoff_t rm_so;		\/* start of match *\/$/;"	kind:m	struct:__anona48880470108	typeref:typename:llvm_regoff_t	access:public
__anona502e1e20102	FormatVariadic.cpp	/^        Fmt.drop_front(BO).take_while([](char C) { return C == '{'; });$/;"	kind:f	function:formatv_object_base::splitLiteralAndReplacement	file:	signature:(char C)
__anona93d287d0110	Debug.cpp	/^namespace {$/;"	kind:n	file:
__anona93d287d0110::DebugOnlyOpt	Debug.cpp	/^struct DebugOnlyOpt {$/;"	kind:s	namespace:__anona93d287d0110	file:
__anona93d287d0110::DebugOnlyOpt::operator =	Debug.cpp	/^  void operator=(const std::string &Val) const {$/;"	kind:f	struct:__anona93d287d0110::DebugOnlyOpt	typeref:typename:void	file:	access:public	signature:(const std::string & Val) const
__anonaafc574b0102	ScaledNumber.cpp	/^  auto getU = [](uint64_t N) { return N >> 32; };$/;"	kind:f	function:ScaledNumbers::multiply64	file:	signature:(uint64_t N)
__anonaafc574b0202	ScaledNumber.cpp	/^  auto getL = [](uint64_t N) { return N & UINT32_MAX; };$/;"	kind:f	function:ScaledNumbers::multiply64	file:	signature:(uint64_t N)
__anonaafc574b0302	ScaledNumber.cpp	/^  auto addWithCarry = [&](uint64_t N) {$/;"	kind:f	function:ScaledNumbers::multiply64	file:	signature:(uint64_t N)
__anonb734c93a0110	LockFileManager.cpp	/^namespace {$/;"	kind:n	file:
__anonb734c93a0110::RemoveUniqueLockFileOnSignal	LockFileManager.cpp	/^class RemoveUniqueLockFileOnSignal {$/;"	kind:c	namespace:__anonb734c93a0110	file:
__anonb734c93a0110::RemoveUniqueLockFileOnSignal::Filename	LockFileManager.cpp	/^  StringRef Filename;$/;"	kind:m	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	typeref:typename:StringRef	file:	access:private
__anonb734c93a0110::RemoveUniqueLockFileOnSignal::RemoveImmediately	LockFileManager.cpp	/^  bool RemoveImmediately;$/;"	kind:m	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	typeref:typename:bool	file:	access:private
__anonb734c93a0110::RemoveUniqueLockFileOnSignal::RemoveUniqueLockFileOnSignal	LockFileManager.cpp	/^  RemoveUniqueLockFileOnSignal(StringRef Name)$/;"	kind:f	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	file:	access:public	signature:(StringRef Name)
__anonb734c93a0110::RemoveUniqueLockFileOnSignal::lockAcquired	LockFileManager.cpp	/^  void lockAcquired() { RemoveImmediately = false; }$/;"	kind:f	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	typeref:typename:void	file:	access:public	signature:()
__anonb734c93a0110::RemoveUniqueLockFileOnSignal::~RemoveUniqueLockFileOnSignal	LockFileManager.cpp	/^  ~RemoveUniqueLockFileOnSignal() {$/;"	kind:f	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	file:	access:public	signature:()
__anoncc40abd70110	Timer.cpp	/^namespace {$/;"	kind:n	file:
__anoncc40abd70110::InfoOutputFilename	Timer.cpp	/^  InfoOutputFilename("info-output-file", cl::value_desc("filename"),$/;"	kind:v	namespace:__anoncc40abd70110	typeref:typename:cl::opt<std::string,true>	file:
__anoncc40abd70110::TrackSpace	Timer.cpp	/^  TrackSpace("track-memory", cl::desc("Enable -time-passes memory "$/;"	kind:v	namespace:__anoncc40abd70110	typeref:typename:cl::opt<bool>	file:
__anoncc40abd70210	Timer.cpp	/^namespace {$/;"	kind:n	file:
__anoncc40abd70210::Name2PairMap	Timer.cpp	/^class Name2PairMap {$/;"	kind:c	namespace:__anoncc40abd70210	file:
__anoncc40abd70210::Name2PairMap::Map	Timer.cpp	/^  StringMap<std::pair<TimerGroup*, Name2TimerMap> > Map;$/;"	kind:m	class:__anoncc40abd70210::Name2PairMap	typeref:typename:StringMap<std::pair<TimerGroup *,Name2TimerMap>>	file:	access:private
__anoncc40abd70210::Name2PairMap::get	Timer.cpp	/^  Timer &get(StringRef Name, StringRef Description, StringRef GroupName,$/;"	kind:f	class:__anoncc40abd70210::Name2PairMap	typeref:typename:Timer &	file:	access:public	signature:(StringRef Name,StringRef Description,StringRef GroupName,StringRef GroupDescription)
__anoncc40abd70210::Name2PairMap::~Name2PairMap	Timer.cpp	/^  ~Name2PairMap() {$/;"	kind:f	class:__anoncc40abd70210::Name2PairMap	file:	access:public	signature:()
__anoncc40abd70210::Name2TimerMap	Timer.cpp	/^typedef StringMap<Timer> Name2TimerMap;$/;"	kind:t	namespace:__anoncc40abd70210	typeref:typename:StringMap<Timer>	file:
__anond11a194a0110	TargetParser.cpp	/^namespace {$/;"	kind:n	file:
__anond11a194a0110::AArch64ARCHNames	TargetParser.cpp	/^ArchNames<AArch64::ArchKind> AArch64ARCHNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:ArchNames<AArch64::ArchKind>[]
__anond11a194a0110::AArch64CPUNames	TargetParser.cpp	/^CpuNames<AArch64::ArchKind> AArch64CPUNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:CpuNames<AArch64::ArchKind>[]
__anond11a194a0110::ARCHNames	TargetParser.cpp	/^ArchNames<ARM::ArchKind> ARCHNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:ArchNames<ARM::ArchKind>[]
__anond11a194a0110::ArchNames	TargetParser.cpp	/^template <typename T> struct ArchNames {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond11a194a0110::ArchNames::ArchAttr	TargetParser.cpp	/^  ARMBuildAttrs::CPUArch ArchAttr; \/\/ Arch ID in build attributes.$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:ARMBuildAttrs::CPUArch	file:	access:public
__anond11a194a0110::ArchNames::ArchBaseExtensions	TargetParser.cpp	/^  unsigned ArchBaseExtensions;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:unsigned	file:	access:public
__anond11a194a0110::ArchNames::CPUAttrCStr	TargetParser.cpp	/^  const char *CPUAttrCStr;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:const char *	file:	access:public
__anond11a194a0110::ArchNames::CPUAttrLength	TargetParser.cpp	/^  size_t CPUAttrLength;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:size_t	file:	access:public
__anond11a194a0110::ArchNames::DefaultFPU	TargetParser.cpp	/^  unsigned DefaultFPU;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:unsigned	file:	access:public
__anond11a194a0110::ArchNames::ID	TargetParser.cpp	/^  T ID;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:T	file:	access:public
__anond11a194a0110::ArchNames::NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:const char *	file:	access:public
__anond11a194a0110::ArchNames::NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:size_t	file:	access:public
__anond11a194a0110::ArchNames::SubArchCStr	TargetParser.cpp	/^  const char *SubArchCStr;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:const char *	file:	access:public
__anond11a194a0110::ArchNames::SubArchLength	TargetParser.cpp	/^  size_t SubArchLength;$/;"	kind:m	struct:__anond11a194a0110::ArchNames	typeref:typename:size_t	file:	access:public
__anond11a194a0110::ArchNames::getCPUAttr	TargetParser.cpp	/^  StringRef getCPUAttr() const { return StringRef(CPUAttrCStr, CPUAttrLength); }$/;"	kind:f	struct:__anond11a194a0110::ArchNames	typeref:typename:StringRef	file:	access:public	signature:() const
__anond11a194a0110::ArchNames::getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::ArchNames	typeref:typename:StringRef	file:	access:public	signature:() const
__anond11a194a0110::ArchNames::getSubArch	TargetParser.cpp	/^  StringRef getSubArch() const { return StringRef(SubArchCStr, SubArchLength); }$/;"	kind:f	struct:__anond11a194a0110::ArchNames	typeref:typename:StringRef	file:	access:public	signature:() const
__anond11a194a0110::CPUNames	TargetParser.cpp	/^CpuNames<ARM::ArchKind> CPUNames[] = {$/;"	kind:v	namespace:__anond11a194a0110	typeref:typename:CpuNames<ARM::ArchKind>[]
__anond11a194a0110::CpuNames	TargetParser.cpp	/^template <typename T> struct CpuNames {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond11a194a0110::CpuNames::ArchID	TargetParser.cpp	/^  T ArchID;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:T	file:	access:public
__anond11a194a0110::CpuNames::Default	TargetParser.cpp	/^  bool Default; \/\/ is $Name the default CPU for $ArchID ?$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:bool	file:	access:public
__anond11a194a0110::CpuNames::DefaultExtensions	TargetParser.cpp	/^  unsigned DefaultExtensions;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:unsigned	file:	access:public
__anond11a194a0110::CpuNames::NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:const char *	file:	access:public
__anond11a194a0110::CpuNames::NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::CpuNames	typeref:typename:size_t	file:	access:public
__anond11a194a0110::CpuNames::getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::CpuNames	typeref:typename:StringRef	file:	access:public	signature:() const
__anond11a194a0110::__anond11a194a0208	TargetParser.cpp	/^static const struct {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond11a194a0110::__anond11a194a0208::FPUVersion	TargetParser.cpp	/^  ARM::FPUVersion FPUVersion;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::FPUVersion	file:	access:public
__anond11a194a0110::__anond11a194a0208::ID	TargetParser.cpp	/^  ARM::FPUKind ID;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::FPUKind	file:	access:public
__anond11a194a0110::__anond11a194a0208::NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:const char *	file:	access:public
__anond11a194a0110::__anond11a194a0208::NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:size_t	file:	access:public
__anond11a194a0110::__anond11a194a0208::NeonSupport	TargetParser.cpp	/^  ARM::NeonSupportLevel NeonSupport;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::NeonSupportLevel	file:	access:public
__anond11a194a0110::__anond11a194a0208::Restriction	TargetParser.cpp	/^  ARM::FPURestriction Restriction;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:ARM::FPURestriction	file:	access:public
__anond11a194a0110::__anond11a194a0208::getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:StringRef	file:	access:public	signature:() const
__anond11a194a0110::__anond11a194a0308	TargetParser.cpp	/^static const struct {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond11a194a0110::__anond11a194a0308::Feature	TargetParser.cpp	/^  const char *Feature;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:const char *	file:	access:public
__anond11a194a0110::__anond11a194a0308::ID	TargetParser.cpp	/^  unsigned ID;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:unsigned	file:	access:public
__anond11a194a0110::__anond11a194a0308::NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:const char *	file:	access:public
__anond11a194a0110::__anond11a194a0308::NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:size_t	file:	access:public
__anond11a194a0110::__anond11a194a0308::NegFeature	TargetParser.cpp	/^  const char *NegFeature;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:const char *	file:	access:public
__anond11a194a0110::__anond11a194a0308::getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:StringRef	file:	access:public	signature:() const
__anond11a194a0110::__anond11a194a0408	TargetParser.cpp	/^static const struct {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond11a194a0110::__anond11a194a0408::ID	TargetParser.cpp	/^  unsigned ID;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:unsigned	file:	access:public
__anond11a194a0110::__anond11a194a0408::NameCStr	TargetParser.cpp	/^  const char *NameCStr;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:const char *	file:	access:public
__anond11a194a0110::__anond11a194a0408::NameLength	TargetParser.cpp	/^  size_t NameLength;$/;"	kind:m	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:size_t	file:	access:public
__anond11a194a0110::__anond11a194a0408::getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:StringRef	file:	access:public	signature:() const
__anond11a194a0208	TargetParser.cpp	/^static const struct {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond11a194a0308	TargetParser.cpp	/^static const struct {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond11a194a0408	TargetParser.cpp	/^static const struct {$/;"	kind:s	namespace:__anond11a194a0110	file:
__anond31545540110	ARMBuildAttrs.cpp	/^namespace {$/;"	kind:n	file:
__anond31545540110::__anond31545540208	ARMBuildAttrs.cpp	/^const struct {$/;"	kind:s	namespace:__anond31545540110	file:
__anond31545540110::__anond31545540208::Attr	ARMBuildAttrs.cpp	/^  ARMBuildAttrs::AttrType Attr;$/;"	kind:m	struct:__anond31545540110::__anond31545540208	typeref:typename:ARMBuildAttrs::AttrType	file:	access:public
__anond31545540110::__anond31545540208::TagName	ARMBuildAttrs.cpp	/^  StringRef TagName;$/;"	kind:m	struct:__anond31545540110::__anond31545540208	typeref:typename:StringRef	file:	access:public
__anond31545540208	ARMBuildAttrs.cpp	/^const struct {$/;"	kind:s	namespace:__anond31545540110	file:
__anondc20a17d0110	APFloat.cpp	/^namespace {$/;"	kind:n	namespace:llvm::detail	file:
__anondf7d4ec00110	Error.cpp	/^namespace {$/;"	kind:n	file:
__anondf7d4ec00110::ErrorErrorCategory	Error.cpp	/^  class ErrorErrorCategory : public std::error_category {$/;"	kind:c	namespace:__anondf7d4ec00110	file:	inherits:std::error_category
__anondf7d4ec00110::ErrorErrorCategory::message	Error.cpp	/^    std::string message(int condition) const override {$/;"	kind:f	class:__anondf7d4ec00110::ErrorErrorCategory	typeref:typename:std::string	file:	access:public	signature:(int condition) const
__anondf7d4ec00110::ErrorErrorCategory::name	Error.cpp	/^    const char *name() const noexcept override { return "Error"; }$/;"	kind:f	class:__anondf7d4ec00110::ErrorErrorCategory	typeref:typename:const char *	file:	access:public	signature:() const
__anondf7d4ec00110::ErrorErrorCode	Error.cpp	/^  enum class ErrorErrorCode : int {$/;"	kind:g	namespace:__anondf7d4ec00110	typeref:typename:int	file:
__anondf7d4ec00110::InconvertibleError	Error.cpp	/^    InconvertibleError$/;"	kind:e	enum:__anondf7d4ec00110::ErrorErrorCode	file:	access:public
__anondf7d4ec00110::MultipleErrors	Error.cpp	/^    MultipleErrors = 1,$/;"	kind:e	enum:__anondf7d4ec00110::ErrorErrorCode	file:	access:public
__anondf7d4ec00202	Error.cpp	/^  handleAllErrors(std::move(E), [&](const ErrorInfoBase &EI) {$/;"	kind:f	function:llvm::logAllUnhandledErrors	file:	signature:(const ErrorInfoBase &EI)
__anondf7d4ec00302	Error.cpp	/^  handleAllErrors(std::move(Err), [&](const ErrorInfoBase &EI) {$/;"	kind:f	function:llvm::errorToErrorCode	file:	signature:(const ErrorInfoBase &EI)
__anoneadbbe250110	GraphWriter.cpp	/^namespace {$/;"	kind:n	file:
__anoneadbbe250110::GraphSession	GraphWriter.cpp	/^struct GraphSession {$/;"	kind:s	namespace:__anoneadbbe250110	file:
__anoneadbbe250110::GraphSession::LogBuffer	GraphWriter.cpp	/^  std::string LogBuffer;$/;"	kind:m	struct:__anoneadbbe250110::GraphSession	typeref:typename:std::string	file:	access:public
__anoneadbbe250110::GraphSession::TryFindProgram	GraphWriter.cpp	/^  bool TryFindProgram(StringRef Names, std::string &ProgramPath) {$/;"	kind:f	struct:__anoneadbbe250110::GraphSession	typeref:typename:bool	file:	access:public	signature:(StringRef Names,std::string & ProgramPath)
__crashreporter_info__	PrettyStackTrace.cpp	/^static const char *__crashreporter_info__ = 0;$/;"	kind:v	typeref:typename:const char *	file:
acquire	Mutex.cpp	/^MutexImpl::acquire()$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
acquire	Mutex.cpp	/^bool MutexImpl::acquire() { return true; }$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
add	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::add(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
add	APInt.cpp	/^static bool add(uint64_t *dest, const uint64_t *x, const uint64_t *y,$/;"	kind:f	typeref:typename:bool	file:	signature:(uint64_t * dest,const uint64_t * x,const uint64_t * y,unsigned len)
addArgument	CommandLine.cpp	/^void Option::addArgument() {$/;"	kind:f	class:Option	typeref:typename:void	signature:()
addLiteralOption	CommandLine.cpp	/^  void addLiteralOption(Option &Opt, StringRef Name) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option & Opt,StringRef Name)
addLiteralOption	CommandLine.cpp	/^  void addLiteralOption(Option &Opt, SubCommand *SC, StringRef Name) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option & Opt,SubCommand * SC,StringRef Name)
addOccurrence	CommandLine.cpp	/^bool Option::addOccurrence(unsigned pos, StringRef ArgName, StringRef Value,$/;"	kind:f	class:Option	typeref:typename:bool	signature:(unsigned pos,StringRef ArgName,StringRef Value,bool MultiArg)
addOption	CommandLine.cpp	/^  void addOption(Option *O) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O)
addOption	CommandLine.cpp	/^  void addOption(Option *O, SubCommand *SC) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,SubCommand * SC)
addOption	Options.cpp	/^void OptionRegistry::addOption(void *Key, cl::Option *O) {$/;"	kind:f	class:OptionRegistry	typeref:typename:void	signature:(void * Key,cl::Option * O)
addOrSubtract	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::addOrSubtract(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode,bool subtract)
addOrSubtractSignificand	APFloat.cpp	/^lostFraction IEEEFloat::addOrSubtractSignificand(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(const IEEEFloat & rhs,bool subtract)
addOrSubtractSpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::addOrSubtractSpecials(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,bool subtract)
addSignificand	APFloat.cpp	/^integerPart IEEEFloat::addSignificand(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:integerPart	signature:(const IEEEFloat & rhs)
addStatistic	Statistic.cpp	/^  void addStatistic(const Statistic *S) {$/;"	kind:f	class:__anon7a04bdce0110::StatisticInfo	typeref:typename:void	file:	access:public	signature:(const Statistic * S)
addTimer	Timer.cpp	/^void TimerGroup::addTimer(Timer &T) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(Timer & T)
addUncounted	SHA1.cpp	/^void SHA1::addUncounted(uint8_t Data) {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:(uint8_t Data)
add_1	APInt.cpp	/^static bool add_1(uint64_t dest[], uint64_t x[], unsigned len, uint64_t y) {$/;"	kind:f	typeref:typename:bool	file:	signature:(uint64_t dest[],uint64_t x[],unsigned len,uint64_t y)
advance	FoldingSet.cpp	/^void FoldingSetIteratorImpl::advance() {$/;"	kind:f	class:FoldingSetIteratorImpl	typeref:typename:void	signature:()
advance	LineIterator.cpp	/^void line_iterator::advance() {$/;"	kind:f	class:line_iterator	typeref:typename:void	signature:()
advanceWhile	YAMLParser.cpp	/^  void advanceWhile(SkipWhileFunc Func);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(SkipWhileFunc Func)
advanceWhile	YAMLParser.cpp	/^void Scanner::advanceWhile(SkipWhileFunc Func) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(SkipWhileFunc Func)
alias::getOptionWidth	CommandLine.cpp	/^size_t alias::getOptionWidth() const { return ArgStr.size() + 6; }$/;"	kind:f	class:alias	typeref:typename:size_t	signature:() const
alias::printOptionInfo	CommandLine.cpp	/^void alias::printOptionInfo(size_t GlobalWidth) const {$/;"	kind:f	class:alias	typeref:typename:void	signature:(size_t GlobalWidth) const
allocset	regcomp.c	/^allocset(struct parse *p)$/;"	kind:f	typeref:typename:cset *	file:	signature:(struct parse * p)
allocset	regcomp.c	/^static cset *allocset(struct parse *);$/;"	kind:p	typeref:typename:cset *	file:	signature:(struct parse *)
anchor	CommandLine.cpp	/^void GenericOptionValue::anchor() {}$/;"	kind:f	class:GenericOptionValue	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void Option::anchor() {}$/;"	kind:f	class:Option	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void OptionValue<boolOrDefault>::anchor() {}$/;"	kind:f	class:OptionValue	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void OptionValue<std::string>::anchor() {}$/;"	kind:f	class:OptionValue::string	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void basic_parser_impl::anchor() {}$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<bool>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<boolOrDefault>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<char>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<double>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<float>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<int>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<std::string>::anchor() {}$/;"	kind:f	class:parser::string	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<unsigned long long>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	CommandLine.cpp	/^void parser<unsigned>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
anchor	DAGDeltaAlgorithm.cpp	/^void DAGDeltaAlgorithm::anchor() {$/;"	kind:f	class:DAGDeltaAlgorithm	typeref:typename:void	signature:()
anchor	Error.cpp	/^void ErrorInfoBase::anchor() {}$/;"	kind:f	class:llvm::ErrorInfoBase	typeref:typename:void	signature:()
anchor	FoldingSet.cpp	/^void FoldingSetImpl::anchor() {}$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:()
anchor	IntrusiveRefCntPtr.cpp	/^void RefCountedBaseVPTR::anchor() { }$/;"	kind:f	class:RefCountedBaseVPTR	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void AliasNode::anchor() {}$/;"	kind:f	class:llvm::yaml::AliasNode	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void BlockScalarNode::anchor() {}$/;"	kind:f	class:llvm::yaml::BlockScalarNode	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void KeyValueNode::anchor() {}$/;"	kind:f	class:llvm::yaml::KeyValueNode	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void MappingNode::anchor() {}$/;"	kind:f	class:llvm::yaml::MappingNode	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void Node::anchor() {}$/;"	kind:f	class:llvm::yaml::Node	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void NullNode::anchor() {}$/;"	kind:f	class:llvm::yaml::NullNode	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void ScalarNode::anchor() {}$/;"	kind:f	class:llvm::yaml::ScalarNode	typeref:typename:void	signature:()
anchor	YAMLParser.cpp	/^void SequenceNode::anchor() {}$/;"	kind:f	class:llvm::yaml::SequenceNode	typeref:typename:void	signature:()
anchor	YAMLTraits.cpp	/^void Input::EmptyHNode::anchor() {}$/;"	kind:f	class:Input::EmptyHNode	typeref:typename:void	signature:()
anchor	YAMLTraits.cpp	/^void Input::HNode::anchor() {}$/;"	kind:f	class:Input::HNode	typeref:typename:void	signature:()
anchor	YAMLTraits.cpp	/^void Input::MapHNode::anchor() {}$/;"	kind:f	class:Input::MapHNode	typeref:typename:void	signature:()
anchor	YAMLTraits.cpp	/^void Input::ScalarHNode::anchor() {}$/;"	kind:f	class:Input::ScalarHNode	typeref:typename:void	signature:()
anchor	YAMLTraits.cpp	/^void Input::SequenceHNode::anchor() {}$/;"	kind:f	class:Input::SequenceHNode	typeref:typename:void	signature:()
append	APFloat.cpp	/^  void append(SmallVectorImpl<char> &Buffer, StringRef Str) {$/;"	kind:f	namespace:llvm::detail::__anondc20a17d0110	typeref:typename:void	signature:(SmallVectorImpl<char> & Buffer,StringRef Str)
append	Path.cpp	/^void append(SmallVectorImpl<char> &path, const Twine &a,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path,const Twine & a,const Twine & b,const Twine & c,const Twine & d)
append	Path.cpp	/^void append(SmallVectorImpl<char> &path,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path,const_iterator begin,const_iterator end)
appendDigit	ScaledNumber.cpp	/^static void appendDigit(std::string &Str, unsigned D) {$/;"	kind:f	typeref:typename:void	file:	signature:(std::string & Str,unsigned D)
appendNumber	ScaledNumber.cpp	/^static void appendNumber(std::string &Str, uint64_t N) {$/;"	kind:f	typeref:typename:void	file:	signature:(std::string & Str,uint64_t N)
ascii_isdigit	StringRef.cpp	/^static bool ascii_isdigit(char x) {$/;"	kind:f	typeref:typename:bool	file:	signature:(char x)
ascii_strncasecmp	StringRef.cpp	/^static int ascii_strncasecmp(const char *LHS, const char *RHS, size_t Length) {$/;"	kind:f	typeref:typename:int	file:	signature:(const char * LHS,const char * RHS,size_t Length)
ascii_tolower	StringRef.cpp	/^static char ascii_tolower(char x) {$/;"	kind:f	typeref:typename:char	file:	signature:(char x)
ascii_toupper	StringRef.cpp	/^static char ascii_toupper(char x) {$/;"	kind:f	typeref:typename:char	file:	signature:(char x)
ashr	APInt.cpp	/^APInt APInt::ashr(const APInt &shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & shiftAmt) const
ashr	APInt.cpp	/^APInt APInt::ashr(unsigned shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned shiftAmt) const
assign	APFloat.cpp	/^void IEEEFloat::assign(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const IEEEFloat & rhs)
asyncImpl	ThreadPool.cpp	/^std::shared_future<ThreadPool::VoidTy> ThreadPool::asyncImpl(TaskTy Task) {$/;"	kind:f	class:ThreadPool	typeref:typename:std::shared_future<ThreadPool::VoidTy>	signature:(TaskTy Task)
backrefs	regex2.h	/^	int backrefs;		\/* does it use back references? *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
basic_parser	CommandLine.cpp	/^template class basic_parser<bool>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<boolOrDefault>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<char>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<double>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<float>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<int>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<std::string>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<unsigned long long>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser	CommandLine.cpp	/^template class basic_parser<unsigned>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
basic_parser_impl::anchor	CommandLine.cpp	/^void basic_parser_impl::anchor() {}$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:()
basic_parser_impl::getOptionWidth	CommandLine.cpp	/^size_t basic_parser_impl::getOptionWidth(const Option &O) const {$/;"	kind:f	class:basic_parser_impl	typeref:typename:size_t	signature:(const Option & O) const
basic_parser_impl::printOptionInfo	CommandLine.cpp	/^void basic_parser_impl::printOptionInfo(const Option &O,$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
basic_parser_impl::printOptionName	CommandLine.cpp	/^void basic_parser_impl::printOptionName(const Option &O,$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
basic_parser_impl::printOptionNoValue	CommandLine.cpp	/^void basic_parser_impl::printOptionNoValue(const Option &O,$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
begin	Path.cpp	/^const_iterator begin(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:const_iterator	signature:(StringRef path)
begin	YAMLParser.cpp	/^document_iterator Stream::begin() {$/;"	kind:f	class:Stream	typeref:typename:document_iterator	signature:()
beginBitSetScalar	YAMLTraits.cpp	/^bool Input::beginBitSetScalar(bool &DoClear) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(bool & DoClear)
beginBitSetScalar	YAMLTraits.cpp	/^bool Output::beginBitSetScalar(bool &DoClear) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(bool & DoClear)
beginDocuments	YAMLTraits.cpp	/^void Output::beginDocuments() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
beginEnumScalar	YAMLTraits.cpp	/^void Input::beginEnumScalar() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
beginEnumScalar	YAMLTraits.cpp	/^void Output::beginEnumScalar() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
beginFlowMapping	YAMLTraits.cpp	/^void Input::beginFlowMapping() { beginMapping(); }$/;"	kind:f	class:Input	typeref:typename:void	signature:()
beginFlowMapping	YAMLTraits.cpp	/^void Output::beginFlowMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
beginFlowSequence	YAMLTraits.cpp	/^unsigned Input::beginFlowSequence() { return beginSequence(); }$/;"	kind:f	class:Input	typeref:typename:unsigned	signature:()
beginFlowSequence	YAMLTraits.cpp	/^unsigned Output::beginFlowSequence() {$/;"	kind:f	class:Output	typeref:typename:unsigned	signature:()
beginMapping	YAMLTraits.cpp	/^void Input::beginMapping() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
beginMapping	YAMLTraits.cpp	/^void Output::beginMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
beginSequence	YAMLTraits.cpp	/^unsigned Input::beginSequence() {$/;"	kind:f	class:Input	typeref:typename:unsigned	signature:()
beginSequence	YAMLTraits.cpp	/^unsigned Output::beginSequence() {$/;"	kind:f	class:Output	typeref:typename:unsigned	signature:()
bindingsErrorHandler	ErrorHandling.cpp	/^static void bindingsErrorHandler(void *user_data, const std::string& reason,$/;"	kind:f	typeref:typename:void	file:	signature:(void * user_data,const std::string & reason,bool gen_crash_diag)
bitSetMatch	YAMLTraits.cpp	/^bool Input::bitSetMatch(const char *Str, bool) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(const char * Str,bool)
bitSetMatch	YAMLTraits.cpp	/^bool Output::bitSetMatch(const char *Str, bool Matches) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(const char * Str,bool Matches)
bitcastToAPInt	APFloat.cpp	/^APInt IEEEFloat::bitcastToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
bitwiseIsEqual	APFloat.cpp	/^bool IEEEFloat::bitwiseIsEqual(const IEEEFloat &rhs) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(const IEEEFloat & rhs) const
blk	SHA1.cpp	/^static uint32_t blk(uint32_t *Buf, int I) {$/;"	kind:f	typeref:typename:uint32_t	file:	signature:(uint32_t * Buf,int I)
blk0	SHA1.cpp	/^static uint32_t blk0(uint32_t *Buf, int I) { return Buf[I]; }$/;"	kind:f	typeref:typename:uint32_t	file:	signature:(uint32_t * Buf,int I)
blockScalarString	YAMLTraits.cpp	/^void Input::blockScalarString(StringRef &S) { scalarString(S, false); }$/;"	kind:f	class:Input	typeref:typename:void	signature:(StringRef & S)
blockScalarString	YAMLTraits.cpp	/^void Output::blockScalarString(StringRef &S) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef & S)
body	MD5.cpp	/^const uint8_t *MD5::body(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:llvm::MD5	typeref:typename:const uint8_t *	signature:(ArrayRef<uint8_t> Data)
bothcases	regcomp.c	/^bothcases(struct parse *p, int ch)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,int ch)
bothcases	regcomp.c	/^static void bothcases(struct parse *, int);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,int)
buildFixItLine	SourceMgr.cpp	/^static void buildFixItLine(std::string &CaretLine, std::string &FixItLine,$/;"	kind:f	typeref:typename:void	file:	signature:(std::string & CaretLine,std::string & FixItLine,ArrayRef<SMFixIt> FixIts,ArrayRef<char> SourceLine)
byteSwap	APInt.cpp	/^APInt APInt::byteSwap() const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:() const
c	Host.cpp	/^    char c[12];$/;"	kind:m	union:sys::getHostCPUFeatures::__anon6346c934010a	typeref:typename:char[12]	file:	access:public
c_str	Windows/WindowsSupport.h	/^c_str(SmallVectorImpl<T> &str) {$/;"	kind:f	namespace:llvm	typeref:typename:SmallVectorImpl<T>::const_pointer	signature:(SmallVectorImpl<T> & str)
canElideEmptySequence	YAMLTraits.cpp	/^bool Input::canElideEmptySequence() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
canElideEmptySequence	YAMLTraits.cpp	/^bool Output::canElideEmptySequence() {$/;"	kind:f	class:Output	typeref:typename:bool	signature:()
cat_t	regex2.h	/^typedef unsigned char cat_t;$/;"	kind:t	typeref:typename:unsigned char
categories	regex2.h	/^	cat_t *categories;	\/* ->catspace[-CHAR_MIN] *\/$/;"	kind:m	struct:re_guts	typeref:typename:cat_t *	access:public
categorize	regcomp.c	/^categorize(struct parse *p, struct re_guts *g)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,struct re_guts * g)
categorize	regcomp.c	/^static void categorize(struct parse *, struct re_guts *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,struct re_guts *)
catspace	regex2.h	/^	cat_t catspace[1];	\/* actually [NC] *\/$/;"	kind:m	struct:re_guts	typeref:typename:cat_t[1]	access:public
cclass	regcclass.h	/^static struct cclass {$/;"	kind:s
cclass::chars	regcclass.h	/^	const char *chars;$/;"	kind:m	struct:cclass	typeref:typename:const char *	access:public
cclass::multis	regcclass.h	/^	const char *multis;$/;"	kind:m	struct:cclass	typeref:typename:const char *	access:public
cclass::name	regcclass.h	/^	const char *name;$/;"	kind:m	struct:cclass	typeref:typename:const char *	access:public
cflags	regex2.h	/^	int cflags;		\/* copy of llvm_regcomp() cflags argument *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
changeColor	raw_ostream.cpp	/^raw_ostream &raw_fd_ostream::changeColor(enum Colors colors, bool bold,$/;"	kind:f	class:raw_fd_ostream	typeref:typename:raw_ostream &	signature:(enum Colors colors,bool bold,bool bg)
changeSign	APFloat.cpp	/^void IEEEFloat::changeSign() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
change_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::change_ty change_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::change_ty	file:	access:public
changeset_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::changeset_ty changeset_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::changeset_ty	file:	access:public
changesetlist_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::changesetlist_ty changesetlist_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::changesetlist_ty	file:	access:public
charWidth	Unicode.cpp	/^static inline int charWidth(int UCS)$/;"	kind:f	namespace:llvm::sys::unicode	typeref:typename:int	file:	signature:(int UCS)
chars	regcclass.h	/^	const char *chars;$/;"	kind:m	struct:cclass	typeref:typename:const char *	access:public
checkArchVersion	TargetParser.cpp	/^unsigned llvm::AArch64::checkArchVersion(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
circular_raw_ostream::flushBufferWithBanner	circular_raw_ostream.cpp	/^void circular_raw_ostream::flushBufferWithBanner() {$/;"	kind:f	class:circular_raw_ostream	typeref:typename:void	signature:()
circular_raw_ostream::write_impl	circular_raw_ostream.cpp	/^void circular_raw_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:circular_raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
cl	CommandLine.cpp	/^namespace cl {$/;"	kind:n	namespace:llvm	file:
cl::AddExtraVersionPrinter	CommandLine.cpp	/^void cl::AddExtraVersionPrinter(void (*func)()) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(void (* func)())
cl::AddLiteralOption	CommandLine.cpp	/^void cl::AddLiteralOption(Option &O, StringRef Name) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(Option & O,StringRef Name)
cl::ExpandResponseFiles	CommandLine.cpp	/^bool cl::ExpandResponseFiles(StringSaver &Saver, TokenizerCallback Tokenizer,$/;"	kind:f	class:cl	typeref:typename:bool	signature:(StringSaver & Saver,TokenizerCallback Tokenizer,SmallVectorImpl<const char * > & Argv,bool MarkEOLs,bool RelativeNames)
cl::HideUnrelatedOptions	CommandLine.cpp	/^void cl::HideUnrelatedOptions(ArrayRef<const cl::OptionCategory *> Categories,$/;"	kind:f	class:cl	typeref:typename:void	signature:(ArrayRef<const cl::OptionCategory * > Categories,SubCommand & Sub)
cl::HideUnrelatedOptions	CommandLine.cpp	/^void cl::HideUnrelatedOptions(cl::OptionCategory &Category, SubCommand &Sub) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(cl::OptionCategory & Category,SubCommand & Sub)
cl::INIT	CommandLine.cpp	/^  enum { INIT, UNQUOTED, QUOTED } State = INIT;$/;"	kind:e	enum:cl::TokenizeWindowsCommandLine::__anon2c11109d0403	file:	access:public
cl::ParseCommandLineOptions	CommandLine.cpp	/^bool cl::ParseCommandLineOptions(int argc, const char *const *argv,$/;"	kind:f	class:cl	typeref:typename:bool	signature:(int argc,const char * const * argv,StringRef Overview,bool IgnoreErrors)
cl::ParseEnvironmentOptions	CommandLine.cpp	/^void cl::ParseEnvironmentOptions(const char *progName, const char *envVar,$/;"	kind:f	class:cl	typeref:typename:void	signature:(const char * progName,const char * envVar,const char * Overview)
cl::PrintHelpMessage	CommandLine.cpp	/^void cl::PrintHelpMessage(bool Hidden, bool Categorized) {$/;"	kind:f	class:cl	typeref:typename:void	signature:(bool Hidden,bool Categorized)
cl::PrintOptionValues	CommandLine.cpp	/^void cl::PrintOptionValues() { GlobalParser->printOptionValues(); }$/;"	kind:f	class:cl	typeref:typename:void	signature:()
cl::PrintVersionMessage	CommandLine.cpp	/^void cl::PrintVersionMessage() { VersionPrinterInstance.print(); }$/;"	kind:f	class:cl	typeref:typename:void	signature:()
cl::QUOTED	CommandLine.cpp	/^  enum { INIT, UNQUOTED, QUOTED } State = INIT;$/;"	kind:e	enum:cl::TokenizeWindowsCommandLine::__anon2c11109d0403	file:	access:public
cl::ResetAllOptionOccurrences	CommandLine.cpp	/^void cl::ResetAllOptionOccurrences() {$/;"	kind:f	class:cl	typeref:typename:void	signature:()
cl::ResetCommandLineParser	CommandLine.cpp	/^void cl::ResetCommandLineParser() { GlobalParser->reset(); }$/;"	kind:f	class:cl	typeref:typename:void	signature:()
cl::SetVersionPrinter	CommandLine.cpp	/^void cl::SetVersionPrinter(void (*func)()) { OverrideVersionPrinter = func; }$/;"	kind:f	class:cl	typeref:typename:void	signature:(void (* func)())
cl::TokenizeGNUCommandLine	CommandLine.cpp	/^void cl::TokenizeGNUCommandLine(StringRef Src, StringSaver &Saver,$/;"	kind:f	class:cl	typeref:typename:void	signature:(StringRef Src,StringSaver & Saver,SmallVectorImpl<const char * > & NewArgv,bool MarkEOLs)
cl::TokenizeWindowsCommandLine	CommandLine.cpp	/^void cl::TokenizeWindowsCommandLine(StringRef Src, StringSaver &Saver,$/;"	kind:f	class:cl	typeref:typename:void	signature:(StringRef Src,StringSaver & Saver,SmallVectorImpl<const char * > & NewArgv,bool MarkEOLs)
cl::UNQUOTED	CommandLine.cpp	/^  enum { INIT, UNQUOTED, QUOTED } State = INIT;$/;"	kind:e	enum:cl::TokenizeWindowsCommandLine::__anon2c11109d0403	file:	access:public
cl::getRegisteredOptions	CommandLine.cpp	/^StringMap<Option *> &cl::getRegisteredOptions(SubCommand &Sub) {$/;"	kind:f	class:cl	typeref:typename:StringMap<Option * > &	signature:(SubCommand & Sub)
cl::getRegisteredSubcommands	CommandLine.cpp	/^cl::getRegisteredSubcommands() {$/;"	kind:f	class:cl	typeref:typename:iterator_range<typename SmallPtrSet<SubCommand *,4>::iterator>	signature:()
clear	FoldingSet.cpp	/^void FoldingSetImpl::clear() {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:()
clear	Timer.cpp	/^void Timer::clear() {$/;"	kind:f	class:Timer	typeref:typename:void	signature:()
clearBit	APInt.cpp	/^void APInt::clearBit(unsigned bitPosition) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned bitPosition)
clearSign	APFloat.cpp	/^void IEEEFloat::clearSign() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
close	raw_ostream.cpp	/^void raw_fd_ostream::close() {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:void	signature:()
cname	regcname.h	/^static struct cname {$/;"	kind:s
cname::code	regcname.h	/^	char code;$/;"	kind:m	struct:cname	typeref:typename:char	access:public
cname::name	regcname.h	/^	const char *name;$/;"	kind:m	struct:cname	typeref:typename:const char *	access:public
code	regcname.h	/^	char code;$/;"	kind:m	struct:cname	typeref:typename:char	access:public
code	regerror.c	/^	int code;$/;"	kind:m	struct:rerr	typeref:typename:int	file:	access:public
colorcodes	Process.cpp	/^static const char colorcodes[2][2][8][10] = {$/;"	kind:v	typeref:typename:const char[2][2][8][10]	file:
columnWidth	Locale.cpp	/^int columnWidth(StringRef Text) {$/;"	kind:f	namespace:llvm::sys::locale	typeref:typename:int	signature:(StringRef Text)
columnWidthUTF8	Unicode.cpp	/^int columnWidthUTF8(StringRef Text) {$/;"	kind:f	namespace:llvm::sys::unicode	typeref:typename:int	signature:(StringRef Text)
combineLostFractions	APFloat.cpp	/^combineLostFractions(lostFraction moreSignificant,$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(lostFraction moreSignificant,lostFraction lessSignificant)
commit	FileOutputBuffer.cpp	/^std::error_code FileOutputBuffer::commit() {$/;"	kind:f	class:llvm::FileOutputBuffer	typeref:typename:std::error_code	signature:()
compare	APFloat.cpp	/^IEEEFloat::cmpResult IEEEFloat::compare(const IEEEFloat &rhs) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::cmpResult	signature:(const IEEEFloat & rhs) const
compareAbsoluteValue	APFloat.cpp	/^IEEEFloat::compareAbsoluteValue(const IEEEFloat &rhs) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::cmpResult	signature:(const IEEEFloat & rhs) const
compareImpl	ScaledNumber.cpp	/^int ScaledNumbers::compareImpl(uint64_t L, uint64_t R, int ScaleDiff) {$/;"	kind:f	class:ScaledNumbers	typeref:typename:int	signature:(uint64_t L,uint64_t R,int ScaleDiff)
compare_lower	StringRef.cpp	/^int StringRef::compare_lower(StringRef RHS) const {$/;"	kind:f	class:StringRef	typeref:typename:int	signature:(StringRef RHS) const
compare_numeric	StringRef.cpp	/^int StringRef::compare_numeric(StringRef RHS) const {$/;"	kind:f	class:StringRef	typeref:typename:int	signature:(StringRef RHS) const
compile	SpecialCaseList.cpp	/^void SpecialCaseList::compile() {$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:void	signature:()
compress	Compression.cpp	/^zlib::Status zlib::compress(StringRef InputBuffer,$/;"	kind:f	class:zlib	typeref:typename:zlib::Status	signature:(StringRef InputBuffer,SmallVectorImpl<char> & CompressedBuffer,CompressionLevel Level)
compress	IntEqClasses.cpp	/^void IntEqClasses::compress() {$/;"	kind:f	class:IntEqClasses	typeref:typename:void	signature:()
computeHostNumPhysicalCores	Host.cpp	/^static int computeHostNumPhysicalCores() { return -1; }$/;"	kind:f	typeref:typename:int	file:	signature:()
computeHostNumPhysicalCores	Host.cpp	/^static int computeHostNumPhysicalCores() {$/;"	kind:f	typeref:typename:int	file:	signature:()
consume	YAMLParser.cpp	/^  bool consume(uint32_t Expected);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(uint32_t Expected)
consume	YAMLParser.cpp	/^bool Scanner::consume(uint32_t Expected) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(uint32_t Expected)
consumeFieldLayout	FormatVariadic.cpp	/^bool formatv_object_base::consumeFieldLayout(StringRef &Spec, AlignStyle &Where,$/;"	kind:f	class:formatv_object_base	typeref:typename:bool	signature:(StringRef & Spec,AlignStyle & Where,size_t & Align,char & Pad)
consumeLineBreakIfPresent	YAMLParser.cpp	/^  bool consumeLineBreakIfPresent();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
consumeLineBreakIfPresent	YAMLParser.cpp	/^bool Scanner::consumeLineBreakIfPresent() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
consumeSignedInteger	StringRef.cpp	/^bool llvm::consumeSignedInteger(StringRef &Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef & Str,unsigned Radix,long long & Result)
consumeUnsignedInteger	StringRef.cpp	/^bool llvm::consumeUnsignedInteger(StringRef &Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef & Str,unsigned Radix,unsigned long long & Result)
convert	APFloat.cpp	/^APFloat::opStatus APFloat::convert(const fltSemantics &ToSemantics,$/;"	kind:f	class:llvm::APFloat	typeref:typename:APFloat::opStatus	signature:(const fltSemantics & ToSemantics,roundingMode RM,bool * losesInfo)
convert	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convert(const fltSemantics &toSemantics,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const fltSemantics & toSemantics,roundingMode rounding_mode,bool * losesInfo)
convertDoubleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertDoubleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
convertF80LongDoubleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertF80LongDoubleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
convertFloatAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertFloatAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
convertFromAPInt	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertFromAPInt(const APInt &Val, bool isSigned,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const APInt & Val,bool isSigned,roundingMode rounding_mode)
convertFromDecimalString	APFloat.cpp	/^IEEEFloat::convertFromDecimalString(StringRef str, roundingMode rounding_mode) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(StringRef str,roundingMode rounding_mode)
convertFromHexadecimalString	APFloat.cpp	/^IEEEFloat::convertFromHexadecimalString(StringRef s,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(StringRef s,roundingMode rounding_mode)
convertFromSignExtendedInteger	APFloat.cpp	/^IEEEFloat::convertFromSignExtendedInteger(const integerPart *src,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * src,unsigned int srcCount,bool isSigned,roundingMode rounding_mode)
convertFromString	APFloat.cpp	/^APFloat::opStatus APFloat::convertFromString(StringRef Str, roundingMode RM) {$/;"	kind:f	class:llvm::APFloat	typeref:typename:APFloat::opStatus	signature:(StringRef Str,roundingMode RM)
convertFromString	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertFromString(StringRef str,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(StringRef str,roundingMode rounding_mode)
convertFromStringSpecials	APFloat.cpp	/^bool IEEEFloat::convertFromStringSpecials(StringRef str) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(StringRef str)
convertFromUnsignedParts	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertFromUnsignedParts($/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * src,unsigned int srcCount,roundingMode rounding_mode)
convertFromZeroExtendedInteger	APFloat.cpp	/^IEEEFloat::convertFromZeroExtendedInteger(const integerPart *parts,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * parts,unsigned int width,bool isSigned,roundingMode rounding_mode)
convertHalfAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertHalfAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
convertNormalToHexString	APFloat.cpp	/^char *IEEEFloat::convertNormalToHexString(char *dst, unsigned int hexDigits,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:char *	signature:(char * dst,unsigned int hexDigits,bool upperCase,roundingMode rounding_mode) const
convertPPCDoubleDoubleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
convertQuadrupleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertQuadrupleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
convertToDouble	APFloat.cpp	/^double IEEEFloat::convertToDouble() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:double	signature:() const
convertToErrorCode	Error.cpp	/^std::error_code ErrorList::convertToErrorCode() const {$/;"	kind:f	class:llvm::ErrorList	typeref:typename:std::error_code	signature:() const
convertToErrorCode	Error.cpp	/^std::error_code StringError::convertToErrorCode() const {$/;"	kind:f	class:llvm::StringError	typeref:typename:std::error_code	signature:() const
convertToFloat	APFloat.cpp	/^float IEEEFloat::convertToFloat() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:float	signature:() const
convertToHexString	APFloat.cpp	/^unsigned int IEEEFloat::convertToHexString(char *dst, unsigned int hexDigits,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:(char * dst,unsigned int hexDigits,bool upperCase,roundingMode rounding_mode) const
convertToInteger	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertToInteger(APSInt &result,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(APSInt & result,roundingMode rounding_mode,bool * isExact) const
convertToInteger	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertToInteger(integerPart *parts,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(integerPart * parts,unsigned int width,bool isSigned,roundingMode rounding_mode,bool * isExact) const
convertToSignExtendedInteger	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertToSignExtendedInteger($/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(integerPart * parts,unsigned int width,bool isSigned,roundingMode rounding_mode,bool * isExact) const
convertUTF16ToUTF8String	ConvertUTFWrapper.cpp	/^bool convertUTF16ToUTF8String(ArrayRef<UTF16> Src, std::string &Out)$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(ArrayRef<UTF16> Src,std::string & Out)
convertUTF16ToUTF8String	ConvertUTFWrapper.cpp	/^bool convertUTF16ToUTF8String(ArrayRef<char> SrcBytes, std::string &Out) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(ArrayRef<char> SrcBytes,std::string & Out)
convertUTF8ToUTF16String	ConvertUTFWrapper.cpp	/^bool convertUTF8ToUTF16String(StringRef SrcUTF8,$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(StringRef SrcUTF8,SmallVectorImpl<UTF16> & DstUTF16)
convertWideToUTF8	ConvertUTFWrapper.cpp	/^bool convertWideToUTF8(const std::wstring &Source, std::string &Result) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(const std::wstring & Source,std::string & Result)
copySign	APFloat.cpp	/^void IEEEFloat::copySign(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const IEEEFloat & rhs)
copySignificand	APFloat.cpp	/^void IEEEFloat::copySignificand(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const IEEEFloat & rhs)
copy_file	Path.cpp	/^std::error_code copy_file(const Twine &From, const Twine &To) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & From,const Twine & To)
copy_to_buffer	raw_ostream.cpp	/^void raw_ostream::copy_to_buffer(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
coreFilesPrevented	Process.cpp	/^static bool coreFilesPrevented = false;$/;"	kind:v	typeref:typename:bool	file:
count	StringRef.cpp	/^size_t StringRef::count(StringRef Str) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str) const
countLeadingOnes	APInt.cpp	/^unsigned APInt::countLeadingOnes() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
countLeadingZerosSlowCase	APInt.cpp	/^unsigned APInt::countLeadingZerosSlowCase() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
countPopulationSlowCase	APInt.cpp	/^unsigned APInt::countPopulationSlowCase() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
countTrailingOnesSlowCase	APInt.cpp	/^unsigned APInt::countTrailingOnesSlowCase() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
countTrailingZeros	APInt.cpp	/^unsigned APInt::countTrailingZeros() const {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:() const
crc32	Compression.cpp	/^uint32_t zlib::crc32(StringRef Buffer) {$/;"	kind:f	class:zlib	typeref:typename:uint32_t	signature:(StringRef Buffer)
create	FileOutputBuffer.cpp	/^FileOutputBuffer::create(StringRef FilePath, size_t Size, unsigned Flags) {$/;"	kind:f	class:llvm::FileOutputBuffer	typeref:typename:ErrorOr<std::unique_ptr<FileOutputBuffer>>	signature:(StringRef FilePath,size_t Size,unsigned Flags)
create	SpecialCaseList.cpp	/^SpecialCaseList::create(const std::vector<std::string> &Paths,$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:std::unique_ptr<SpecialCaseList>	signature:(const std::vector<std::string> & Paths,std::string & Error)
create	SpecialCaseList.cpp	/^std::unique_ptr<SpecialCaseList> SpecialCaseList::create(const MemoryBuffer *MB,$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:std::unique_ptr<SpecialCaseList>	signature:(const MemoryBuffer * MB,std::string & Error)
createGraphFilename	GraphWriter.cpp	/^std::string llvm::createGraphFilename(const Twine &Name, int &FD) {$/;"	kind:f	class:llvm	typeref:typename:std::string	signature:(const Twine & Name,int & FD)
createHNodes	YAMLTraits.cpp	/^std::unique_ptr<Input::HNode> Input::createHNodes(Node *N) {$/;"	kind:f	class:Input	typeref:typename:std::unique_ptr<Input::HNode>	signature:(Node * N)
createOrDie	SpecialCaseList.cpp	/^SpecialCaseList::createOrDie(const std::vector<std::string> &Paths) {$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:std::unique_ptr<SpecialCaseList>	signature:(const std::vector<std::string> & Paths)
createTemporaryFile	Path.cpp	/^createTemporaryFile(const Twine &Model, int &ResultFD,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	file:	signature:(const Twine & Model,int & ResultFD,llvm::SmallVectorImpl<char> & ResultPath,FSEntity Type)
createTemporaryFile	Path.cpp	/^createTemporaryFile(const Twine &Prefix, StringRef Suffix, int &ResultFD,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	file:	signature:(const Twine & Prefix,StringRef Suffix,int & ResultFD,llvm::SmallVectorImpl<char> & ResultPath,FSEntity Type)
createTemporaryFile	Path.cpp	/^std::error_code createTemporaryFile(const Twine &Prefix, StringRef Suffix,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Prefix,StringRef Suffix,SmallVectorImpl<char> & ResultPath)
createTemporaryFile	Path.cpp	/^std::error_code createTemporaryFile(const Twine &Prefix, StringRef Suffix,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Prefix,StringRef Suffix,int & ResultFD,SmallVectorImpl<char> & ResultPath)
createUniqueDirectory	Path.cpp	/^std::error_code createUniqueDirectory(const Twine &Prefix,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Prefix,SmallVectorImpl<char> & ResultPath)
createUniqueEntity	Path.cpp	/^static std::error_code createUniqueEntity(const Twine &Model, int &ResultFD,$/;"	kind:f	typeref:typename:std::error_code	file:	signature:(const Twine & Model,int & ResultFD,SmallVectorImpl<char> & ResultPath,bool MakeAbsolute,unsigned Mode,FSEntity Type)
createUniqueFile	Path.cpp	/^std::error_code createUniqueFile(const Twine &Model, int &ResultFd,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Model,int & ResultFd,SmallVectorImpl<char> & ResultPath,unsigned Mode)
createUniqueFile	Path.cpp	/^std::error_code createUniqueFile(const Twine &Model,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Model,SmallVectorImpl<char> & ResultPath)
create_directories	Path.cpp	/^std::error_code create_directories(const Twine &Path, bool IgnoreExisting,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Path,bool IgnoreExisting,perms Perms)
cset	regex2.h	/^} cset;$/;"	kind:t	typeref:struct:__anon0767ba880108
csetsize	regex2.h	/^	int csetsize;		\/* number of bits in a cset vector *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
currentInput	YAMLParser.cpp	/^  StringRef currentInput() {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:StringRef	file:	access:private	signature:()
current_pos	raw_os_ostream.cpp	/^uint64_t raw_os_ostream::current_pos() const { return OS.tellp(); }$/;"	kind:f	class:raw_os_ostream	typeref:typename:uint64_t	signature:() const
current_pos	raw_ostream.cpp	/^uint64_t raw_null_ostream::current_pos() const {$/;"	kind:f	class:raw_null_ostream	typeref:typename:uint64_t	signature:() const
current_pos	raw_ostream.cpp	/^uint64_t raw_svector_ostream::current_pos() const { return OS.size(); }$/;"	kind:f	class:raw_svector_ostream	typeref:typename:uint64_t	signature:() const
dbgs	Debug.cpp	/^  raw_ostream &dbgs() {$/;"	kind:f	namespace:llvm	typeref:typename:raw_ostream &	signature:()
dbgs	Debug.cpp	/^raw_ostream &llvm::dbgs() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
dbgstream	Debug.cpp	/^    dbgstream() :$/;"	kind:f	struct:llvm::dbgs::dbgstream	file:	access:public	signature:()
dbgstream	Debug.cpp	/^  static struct dbgstream {$/;"	kind:s	function:llvm::dbgs	file:
debug_user_sig_handler	Debug.cpp	/^static void debug_user_sig_handler(void *Cookie) {$/;"	kind:f	typeref:typename:void	file:	signature:(void * Cookie)
decDigitValue	APFloat.cpp	/^decDigitValue(unsigned int c)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(unsigned int c)
decimalInfo	APFloat.cpp	/^struct decimalInfo {$/;"	kind:s	namespace:llvm	file:
decodeUTF8	YAMLParser.cpp	/^  UTF8Decoded decodeUTF8(StringRef::iterator Position) {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:UTF8Decoded	file:	access:private	signature:(StringRef::iterator Position)
decodeUTF8	YAMLParser.cpp	/^static UTF8Decoded decodeUTF8(StringRef Range) {$/;"	kind:f	typeref:typename:UTF8Decoded	file:	signature:(StringRef Range)
destroy	ManagedStatic.cpp	/^void ManagedStaticBase::destroy() const {$/;"	kind:f	class:ManagedStaticBase	typeref:typename:void	signature:() const
detail	APFloat.cpp	/^namespace detail {$/;"	kind:n	namespace:llvm	file:
detail	Allocator.cpp	/^namespace detail {$/;"	kind:n	namespace:llvm	file:
detectX86FamilyModel	Host.cpp	/^static void detectX86FamilyModel(unsigned EAX, unsigned *Family,$/;"	kind:f	typeref:typename:void	file:	signature:(unsigned EAX,unsigned * Family,unsigned * Model)
distribute	IntervalMap.cpp	/^IdxPair distribute(unsigned Nodes, unsigned Elements, unsigned Capacity,$/;"	kind:f	namespace:llvm::IntervalMapImpl	typeref:typename:IdxPair	signature:(unsigned Nodes,unsigned Elements,unsigned Capacity,const unsigned * CurSize,unsigned NewSize[],unsigned Position,bool Grow)
divide	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::divide(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
divide	APInt.cpp	/^void APInt::divide(const APInt &LHS, unsigned lhsWords, const APInt &RHS,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & LHS,unsigned lhsWords,const APInt & RHS,unsigned rhsWords,APInt * Quotient,APInt * Remainder)
divide32	ScaledNumber.cpp	/^std::pair<uint32_t, int16_t> ScaledNumbers::divide32(uint32_t Dividend,$/;"	kind:f	class:ScaledNumbers	typeref:typename:std::pair<uint32_t,int16_t>	signature:(uint32_t Dividend,uint32_t Divisor)
divide64	ScaledNumber.cpp	/^std::pair<uint64_t, int16_t> ScaledNumbers::divide64(uint64_t Dividend,$/;"	kind:f	class:ScaledNumbers	typeref:typename:std::pair<uint64_t,int16_t>	signature:(uint64_t Dividend,uint64_t Divisor)
divideSignificand	APFloat.cpp	/^lostFraction IEEEFloat::divideSignificand(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(const IEEEFloat & rhs)
divideSpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::divideSpecials(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
doemit	regcomp.c	/^doemit(struct parse *p, sop op, size_t opnd)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,sop op,size_t opnd)
doemit	regcomp.c	/^static void doemit(struct parse *, sop, size_t);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,sop,size_t)
doesRoundUp	ScaledNumber.cpp	/^static bool doesRoundUp(char Digit) {$/;"	kind:f	typeref:typename:bool	file:	signature:(char Digit)
dofwd	regcomp.c	/^dofwd(struct parse *p, sopno pos, sop value)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,sopno pos,sop value)
dofwd	regcomp.c	/^static void dofwd(struct parse *, sopno, sop);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,sopno,sop)
doinsert	regcomp.c	/^doinsert(struct parse *p, sop op, size_t opnd, sopno pos)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,sop op,size_t opnd,sopno pos)
doinsert	regcomp.c	/^static void doinsert(struct parse *, sop, size_t, sopno);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,sop,size_t,sopno)
dump	APInt.cpp	/^LLVM_DUMP_METHOD void APInt::dump() const {$/;"	kind:f	class:APInt	typeref:typename:LLVM_DUMP_METHOD void	signature:() const
dump	BranchProbability.cpp	/^LLVM_DUMP_METHOD void BranchProbability::dump() const { print(dbgs()) << '\\n'; }$/;"	kind:f	class:BranchProbability	typeref:typename:LLVM_DUMP_METHOD void	signature:() const
dump	ScaledNumber.cpp	/^void ScaledNumberBase::dump(uint64_t D, int16_t E, int Width) {$/;"	kind:f	class:ScaledNumberBase	typeref:typename:void	signature:(uint64_t D,int16_t E,int Width)
dump	Twine.cpp	/^LLVM_DUMP_METHOD void Twine::dump() const {$/;"	kind:f	class:Twine	typeref:typename:LLVM_DUMP_METHOD void	signature:() const
dumpRepr	Twine.cpp	/^void Twine::dumpRepr() const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:() const
dumpTokens	YAMLParser.cpp	/^bool yaml::dumpTokens(StringRef Input, raw_ostream &OS) {$/;"	kind:f	class:yaml	typeref:typename:bool	signature:(StringRef Input,raw_ostream & OS)
dupl	regcomp.c	/^dupl(struct parse *p,$/;"	kind:f	typeref:typename:sopno	file:	signature:(struct parse * p,sopno start,sopno finish)
dupl	regcomp.c	/^static sopno dupl(struct parse *, sopno, sopno);$/;"	kind:p	typeref:typename:sopno	file:	signature:(struct parse *,sopno,sopno)
edge_ty	DAGDeltaAlgorithm.cpp	/^  typedef DAGDeltaAlgorithm::edge_ty edge_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:DAGDeltaAlgorithm::edge_ty	file:	access:public
edit_distance	StringRef.cpp	/^unsigned StringRef::edit_distance(llvm::StringRef Other,$/;"	kind:f	class:StringRef	typeref:typename:unsigned	signature:(llvm::StringRef Other,bool AllowReplacements,unsigned MaxEditDistance) const
encodeUTF8	YAMLParser.cpp	/^static void encodeUTF8( uint32_t UnicodeScalarValue$/;"	kind:f	typeref:typename:void	file:	signature:(uint32_t UnicodeScalarValue,SmallVectorImpl<char> & Result)
encodeZlibCompressionLevel	Compression.cpp	/^static int encodeZlibCompressionLevel(zlib::CompressionLevel Level) {$/;"	kind:f	typeref:typename:int	file:	signature:(zlib::CompressionLevel Level)
encodeZlibReturnValue	Compression.cpp	/^static zlib::Status encodeZlibReturnValue(int ReturnValue) {$/;"	kind:f	typeref:typename:zlib::Status	file:	signature:(int ReturnValue)
end	Path.cpp	/^const_iterator end(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:const_iterator	signature:(StringRef path)
end	YAMLParser.cpp	/^document_iterator Stream::end() {$/;"	kind:f	class:Stream	typeref:typename:document_iterator	signature:()
end	regcomp.c	/^	char *end;		\/* end of string (-> NUL normally) *\/$/;"	kind:m	struct:parse	typeref:typename:char *	file:	access:public
endBitSetScalar	YAMLTraits.cpp	/^void Input::endBitSetScalar() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
endBitSetScalar	YAMLTraits.cpp	/^void Output::endBitSetScalar() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
endDocuments	YAMLTraits.cpp	/^void Output::endDocuments() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
endEnumScalar	YAMLTraits.cpp	/^void Input::endEnumScalar() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
endEnumScalar	YAMLTraits.cpp	/^void Output::endEnumScalar() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
endFlowMapping	YAMLTraits.cpp	/^void Input::endFlowMapping() { endMapping(); }$/;"	kind:f	class:Input	typeref:typename:void	signature:()
endFlowMapping	YAMLTraits.cpp	/^void Output::endFlowMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
endFlowSequence	YAMLTraits.cpp	/^void Input::endFlowSequence() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
endFlowSequence	YAMLTraits.cpp	/^void Output::endFlowSequence() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
endMapping	YAMLTraits.cpp	/^void Input::endMapping() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
endMapping	YAMLTraits.cpp	/^void Output::endMapping() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
endSequence	YAMLTraits.cpp	/^void Input::endSequence() {$/;"	kind:f	class:Input	typeref:typename:void	signature:()
endSequence	YAMLTraits.cpp	/^void Output::endSequence() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
endswith_lower	StringRef.cpp	/^bool StringRef::endswith_lower(StringRef Suffix) const {$/;"	kind:f	class:StringRef	typeref:typename:bool	signature:(StringRef Suffix) const
enlarge	regcomp.c	/^enlarge(struct parse *p, sopno size)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,sopno size)
enlarge	regcomp.c	/^static void enlarge(struct parse *, sopno);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,sopno)
erase_imp	SmallPtrSet.cpp	/^bool SmallPtrSetImplBase::erase_imp(const void * Ptr) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:bool	signature:(const void * Ptr)
error	CommandLine.cpp	/^bool Option::error(const Twine &Message, StringRef ArgName) {$/;"	kind:f	class:Option	typeref:typename:bool	signature:(const Twine & Message,StringRef ArgName)
error	YAMLTraits.cpp	/^std::error_code Input::error() { return EC; }$/;"	kind:f	class:Input	typeref:typename:std::error_code	signature:()
error	regcomp.c	/^	int error;		\/* has an error been seen? *\/$/;"	kind:m	struct:parse	typeref:typename:int	file:	access:public
errorCodeToError	Error.cpp	/^Error errorCodeToError(std::error_code EC) {$/;"	kind:f	namespace:llvm	typeref:typename:Error	signature:(std::error_code EC)
errorToErrorCode	Error.cpp	/^std::error_code errorToErrorCode(Error Err) {$/;"	kind:f	namespace:llvm	typeref:typename:std::error_code	signature:(Error Err)
errs	raw_ostream.cpp	/^raw_ostream &llvm::errs() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
escape	Regex.cpp	/^std::string Regex::escape(StringRef String) {$/;"	kind:f	class:Regex	typeref:typename:std::string	signature:(StringRef String)
escape	YAMLParser.cpp	/^std::string yaml::escape(StringRef Input) {$/;"	kind:f	class:yaml	typeref:typename:std::string	signature:(StringRef Input)
exists	Path.cpp	/^bool exists(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
expectToken	YAMLParser.cpp	/^bool Document::expectToken(int TK) {$/;"	kind:f	class:Document	typeref:typename:bool	signature:(int TK)
explain	regerror.c	/^	const char *explain;$/;"	kind:m	struct:rerr	typeref:typename:const char *	file:	access:public
exponent	APFloat.cpp	/^  int exponent;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:int	file:	access:public
extension	Path.cpp	/^StringRef extension(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
extrahelp	CommandLine.cpp	/^extrahelp::extrahelp(StringRef Help) : morehelp(Help) {$/;"	kind:f	class:extrahelp	signature:(StringRef Help)
extrahelp::extrahelp	CommandLine.cpp	/^extrahelp::extrahelp(StringRef Help) : morehelp(Help) {$/;"	kind:f	class:extrahelp	signature:(StringRef Help)
failed	YAMLParser.cpp	/^  bool failed() {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:public	signature:()
failed	YAMLParser.cpp	/^bool Document::failed() const {$/;"	kind:f	class:Document	typeref:typename:bool	signature:() const
failed	YAMLParser.cpp	/^bool Node::failed() const {$/;"	kind:f	class:Node	typeref:typename:bool	signature:() const
failed	YAMLParser.cpp	/^bool Stream::failed() { return scanner->failed(); }$/;"	kind:f	class:Stream	typeref:typename:bool	signature:()
fdbgs	FormattedStream.cpp	/^formatted_raw_ostream &llvm::fdbgs() {$/;"	kind:f	class:llvm	typeref:typename:formatted_raw_ostream &	signature:()
ferrs	FormattedStream.cpp	/^formatted_raw_ostream &llvm::ferrs() {$/;"	kind:f	class:llvm	typeref:typename:formatted_raw_ostream &	signature:()
fetchMoreTokens	YAMLParser.cpp	/^  bool fetchMoreTokens();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
fetchMoreTokens	YAMLParser.cpp	/^bool Scanner::fetchMoreTokens() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
filename	Path.cpp	/^StringRef filename(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
filename_pos	Path.cpp	/^  size_t filename_pos(StringRef str) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:size_t	signature:(StringRef str)
final	MD5.cpp	/^void MD5::final(MD5Result &Result) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(MD5Result & Result)
final	SHA1.cpp	/^StringRef SHA1::final() {$/;"	kind:f	class:SHA1	typeref:typename:StringRef	signature:()
find	StringRef.cpp	/^size_t StringRef::find(StringRef Str, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str,size_t From) const
findBlockScalarIndent	YAMLParser.cpp	/^  bool findBlockScalarIndent(unsigned &BlockIndent, unsigned BlockExitIndent,$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(unsigned & BlockIndent,unsigned BlockExitIndent,unsigned & LineBreaks,bool & IsDone)
findBlockScalarIndent	YAMLParser.cpp	/^bool Scanner::findBlockScalarIndent(unsigned &BlockIndent,$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(unsigned & BlockIndent,unsigned BlockExitIndent,unsigned & LineBreaks,bool & IsDone)
findLeader	IntEqClasses.cpp	/^unsigned IntEqClasses::findLeader(unsigned a) const {$/;"	kind:f	class:IntEqClasses	typeref:typename:unsigned	signature:(unsigned a) const
findMaximalSubpartOfIllFormedUTF8Sequence	ConvertUTF.cpp	/^findMaximalSubpartOfIllFormedUTF8Sequence(const UTF8 *source,$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	file:	signature:(const UTF8 * source,const UTF8 * sourceEnd)
findModulesAndOffsets	Signals.cpp	/^static bool findModulesAndOffsets(void **StackTrace, int Depth,$/;"	kind:p	typeref:typename:bool	file:	signature:(void ** StackTrace,int Depth,const char ** Modules,intptr_t * Offsets,const char * MainExecutableName,StringSaver & StrPool)
findOption	CommandLine.cpp	/^unsigned generic_parser_base::findOption(StringRef Name) {$/;"	kind:f	class:generic_parser_base	typeref:typename:unsigned	signature:(StringRef Name)
find_first_component	Path.cpp	/^  StringRef find_first_component(StringRef path) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:StringRef	signature:(StringRef path)
find_first_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_first_not_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
find_first_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_first_not_of(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(char C,size_t From) const
find_first_of	StringRef.cpp	/^StringRef::size_type StringRef::find_first_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
find_last_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_last_not_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
find_last_not_of	StringRef.cpp	/^StringRef::size_type StringRef::find_last_not_of(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(char C,size_t From) const
find_last_of	StringRef.cpp	/^StringRef::size_type StringRef::find_last_of(StringRef Chars,$/;"	kind:f	class:StringRef	typeref:typename:StringRef::size_type	signature:(StringRef Chars,size_t From) const
find_lower	StringRef.cpp	/^size_t StringRef::find_lower(StringRef Str, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str,size_t From) const
find_lower	StringRef.cpp	/^size_t StringRef::find_lower(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(char C,size_t From) const
findmust	regcomp.c	/^findmust(struct parse *p, struct re_guts *g)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,struct re_guts * g)
findmust	regcomp.c	/^static void findmust(struct parse *, struct re_guts *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,struct re_guts *)
firstByteMark	ConvertUTF.cpp	/^static const UTF8 firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	kind:v	namespace:llvm	typeref:typename:const UTF8[7]	file:
firstSigDigit	APFloat.cpp	/^  const char *firstSigDigit;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:const char *	file:	access:public
firstch	regcomp.c	/^firstch(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:int	file:	signature:(struct parse * p,cset * cs)
firstch	regcomp.c	/^static int firstch(struct parse *, cset *);$/;"	kind:p	typeref:typename:int	file:	signature:(struct parse *,cset *)
firststate	regex2.h	/^	sopno firststate;	\/* the initial OEND (normally 0) *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
fixed_seed_override	Hashing.cpp	/^size_t llvm::hashing::detail::fixed_seed_override = 0;$/;"	kind:m	class:llvm::hashing::detail	typeref:typename:size_t
flipBit	APInt.cpp	/^void APInt::flipBit(unsigned bitPosition) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned bitPosition)
flowKey	YAMLTraits.cpp	/^void Output::flowKey(StringRef Key) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef Key)
fltSemantics	APFloat.cpp	/^  struct fltSemantics {$/;"	kind:s	namespace:llvm	file:
flushBufferWithBanner	circular_raw_ostream.cpp	/^void circular_raw_ostream::flushBufferWithBanner() {$/;"	kind:f	class:circular_raw_ostream	typeref:typename:void	signature:()
flush_nonempty	raw_ostream.cpp	/^void raw_ostream::flush_nonempty() {$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:()
format_object_base::home	raw_ostream.cpp	/^void format_object_base::home() {$/;"	kind:f	class:format_object_base	typeref:typename:void	signature:()
format_ptr	Signals.cpp	/^static FormattedNumber format_ptr(void *PC) {$/;"	kind:f	typeref:typename:FormattedNumber	file:	signature:(void * PC)
format_to_buffer	NativeFormatting.cpp	/^static int format_to_buffer(T Value, char (&Buffer)[N]) {$/;"	kind:f	typeref:typename:int	file:	signature:(T Value,char (& Buffer)[N])
formatted_raw_ostream::ComputePosition	FormattedStream.cpp	/^void formatted_raw_ostream::ComputePosition(const char *Ptr, size_t Size) {$/;"	kind:f	class:formatted_raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
formatted_raw_ostream::PadToColumn	FormattedStream.cpp	/^formatted_raw_ostream &formatted_raw_ostream::PadToColumn(unsigned NewCol) { $/;"	kind:f	class:formatted_raw_ostream	typeref:typename:formatted_raw_ostream &	signature:(unsigned NewCol)
formatted_raw_ostream::write_impl	FormattedStream.cpp	/^void formatted_raw_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:formatted_raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
formatv_object_base::consumeFieldLayout	FormatVariadic.cpp	/^bool formatv_object_base::consumeFieldLayout(StringRef &Spec, AlignStyle &Where,$/;"	kind:f	class:formatv_object_base	typeref:typename:bool	signature:(StringRef & Spec,AlignStyle & Where,size_t & Align,char & Pad)
formatv_object_base::parseFormatString	FormatVariadic.cpp	/^formatv_object_base::parseFormatString(StringRef Fmt) {$/;"	kind:f	class:formatv_object_base	typeref:typename:std::vector<ReplacementItem>	signature:(StringRef Fmt)
formatv_object_base::parseReplacementItem	FormatVariadic.cpp	/^formatv_object_base::parseReplacementItem(StringRef Spec) {$/;"	kind:f	class:formatv_object_base	typeref:typename:Optional<ReplacementItem>	signature:(StringRef Spec)
formatv_object_base::splitLiteralAndReplacement	FormatVariadic.cpp	/^formatv_object_base::splitLiteralAndReplacement(StringRef Fmt) {$/;"	kind:f	class:formatv_object_base	typeref:typename:std::pair<ReplacementItem,StringRef>	signature:(StringRef Fmt)
fouts	FormattedStream.cpp	/^formatted_raw_ostream &llvm::fouts() {$/;"	kind:f	class:llvm	typeref:typename:formatted_raw_ostream &	signature:()
freeSignificand	APFloat.cpp	/^void IEEEFloat::freeSignificand() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
freeset	regcomp.c	/^freeset(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,cset * cs)
freeset	regcomp.c	/^static void freeset(struct parse *, cset *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,cset *)
freezeset	regcomp.c	/^freezeset(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:int	file:	signature:(struct parse * p,cset * cs)
freezeset	regcomp.c	/^static int freezeset(struct parse *, cset *);$/;"	kind:p	typeref:typename:int	file:	signature:(struct parse *,cset *)
frexp	APFloat.cpp	/^IEEEFloat frexp(const IEEEFloat &Val, int &Exp, IEEEFloat::roundingMode RM) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:IEEEFloat	signature:(const IEEEFloat & Val,int & Exp,IEEEFloat::roundingMode RM)
fromString	APInt.cpp	/^void APInt::fromString(unsigned numbits, StringRef str, uint8_t radix) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned numbits,StringRef str,uint8_t radix)
fs	Path.cpp	/^namespace fs {$/;"	kind:n	namespace:llvm::sys	file:
func	Threading.cpp	/^  void (*func)(void*);$/;"	kind:m	struct:ThreadInfo	typeref:typename:void (*)(void *)	file:	access:public
fusedMultiplyAdd	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::fusedMultiplyAdd(const IEEEFloat &multiplicand,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & multiplicand,const IEEEFloat & addend,roundingMode rounding_mode)
g	regcomp.c	/^	struct re_guts *g;$/;"	kind:m	struct:parse	typeref:struct:re_guts *	file:	access:public
gCRAnnotations	PrettyStackTrace.cpp	/^struct crashreporter_annotations_t gCRAnnotations $/;"	kind:v	typeref:struct:crashreporter_annotations_t
gCrashRecoveryContextMutex	CrashRecoveryContext.cpp	/^static ManagedStatic<sys::Mutex> gCrashRecoveryContextMutex;$/;"	kind:v	typeref:typename:ManagedStatic<sys::Mutex>	file:
gCrashRecoveryEnabled	CrashRecoveryContext.cpp	/^static bool gCrashRecoveryEnabled = false;$/;"	kind:v	typeref:typename:bool	file:
generic_parser_base::findOption	CommandLine.cpp	/^unsigned generic_parser_base::findOption(StringRef Name) {$/;"	kind:f	class:generic_parser_base	typeref:typename:unsigned	signature:(StringRef Name)
generic_parser_base::getOptionWidth	CommandLine.cpp	/^size_t generic_parser_base::getOptionWidth(const Option &O) const {$/;"	kind:f	class:generic_parser_base	typeref:typename:size_t	signature:(const Option & O) const
generic_parser_base::printGenericOptionDiff	CommandLine.cpp	/^void generic_parser_base::printGenericOptionDiff($/;"	kind:f	class:generic_parser_base	typeref:typename:void	signature:(const Option & O,const GenericOptionValue & Value,const GenericOptionValue & Default,size_t GlobalWidth) const
generic_parser_base::printOptionInfo	CommandLine.cpp	/^void generic_parser_base::printOptionInfo(const Option &O,$/;"	kind:f	class:generic_parser_base	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
get	Timer.cpp	/^  Timer &get(StringRef Name, StringRef Description, StringRef GroupName,$/;"	kind:f	class:__anoncc40abd70210::Name2PairMap	typeref:typename:Timer &	file:	access:public	signature:(StringRef Name,StringRef Description,StringRef GroupName,StringRef GroupDescription)
get32BitArchVariant	Triple.cpp	/^Triple Triple::get32BitArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
get64BitArchVariant	Triple.cpp	/^Triple Triple::get64BitArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
getAMDProcessorTypeAndSubtype	Host.cpp	/^static void getAMDProcessorTypeAndSubtype(unsigned int Family,$/;"	kind:f	typeref:typename:void	file:	signature:(unsigned int Family,unsigned int Model,unsigned int Features,unsigned * Type,unsigned * Subtype)
getARMCPUForArch	Triple.cpp	/^StringRef Triple::getARMCPUForArch(StringRef MArch) const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(StringRef MArch) const
getActiveSubCommand	CommandLine.cpp	/^  SubCommand *getActiveSubCommand() { return ActiveSubCommand; }$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:SubCommand *	file:	access:public	signature:()
getAddressOfSymbol	DynamicLibrary.cpp	/^void *DynamicLibrary::getAddressOfSymbol(const char *symbolName) {$/;"	kind:f	class:DynamicLibrary	typeref:typename:void *	signature:(const char * symbolName)
getAllOnesValue	APFloat.cpp	/^APFloat APFloat::getAllOnesValue(unsigned BitWidth, bool isIEEE) {$/;"	kind:f	class:llvm::APFloat	typeref:typename:APFloat	signature:(unsigned BitWidth,bool isIEEE)
getAllocator	YAMLParser.cpp	/^BumpPtrAllocator &Node::getAllocator() {$/;"	kind:f	class:Node	typeref:typename:BumpPtrAllocator &	signature:()
getArchAttr	TargetParser.cpp	/^unsigned llvm::AArch64::getArchAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned ArchKind)
getArchAttr	TargetParser.cpp	/^unsigned llvm::ARM::getArchAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned ArchKind)
getArchExtFeature	TargetParser.cpp	/^StringRef llvm::AArch64::getArchExtFeature(StringRef ArchExt) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(StringRef ArchExt)
getArchExtFeature	TargetParser.cpp	/^StringRef llvm::ARM::getArchExtFeature(StringRef ArchExt) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(StringRef ArchExt)
getArchExtName	TargetParser.cpp	/^StringRef llvm::AArch64::getArchExtName(unsigned ArchExtKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchExtKind)
getArchExtName	TargetParser.cpp	/^StringRef llvm::ARM::getArchExtName(unsigned ArchExtKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchExtKind)
getArchFeatures	TargetParser.cpp	/^bool llvm::AArch64::getArchFeatures(unsigned ArchKind,$/;"	kind:f	class:llvm::AArch64	typeref:typename:bool	signature:(unsigned ArchKind,std::vector<StringRef> & Features)
getArchName	TargetParser.cpp	/^StringRef llvm::AArch64::getArchName(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchKind)
getArchName	TargetParser.cpp	/^StringRef llvm::ARM::getArchName(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchKind)
getArchName	Triple.cpp	/^StringRef Triple::getArchName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
getArchPointerBitWidth	Triple.cpp	/^static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {$/;"	kind:f	typeref:typename:unsigned	file:	signature:(llvm::Triple::ArchType Arch)
getArchSynonym	TargetParser.cpp	/^static StringRef getArchSynonym(StringRef Arch) {$/;"	kind:f	typeref:typename:StringRef	file:	signature:(StringRef Arch)
getArchTypeForLLVMName	Triple.cpp	/^Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {$/;"	kind:f	class:Triple	typeref:typename:Triple::ArchType	signature:(StringRef Name)
getArchTypeName	Triple.cpp	/^StringRef Triple::getArchTypeName(ArchType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(ArchType Kind)
getArchTypePrefix	Triple.cpp	/^StringRef Triple::getArchTypePrefix(ArchType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(ArchType Kind)
getAsInteger	StringRef.cpp	/^bool StringRef::getAsInteger(unsigned Radix, APInt &Result) const {$/;"	kind:f	class:StringRef	typeref:typename:bool	signature:(unsigned Radix,APInt & Result) const
getAsSignedInteger	StringRef.cpp	/^bool llvm::getAsSignedInteger(StringRef Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef Str,unsigned Radix,long long & Result)
getAsUnsignedInteger	StringRef.cpp	/^bool llvm::getAsUnsignedInteger(StringRef Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef Str,unsigned Radix,unsigned long long & Result)
getAttributeEncoding	Dwarf.cpp	/^unsigned llvm::dwarf::getAttributeEncoding(StringRef EncodingString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef EncodingString)
getAvailableFeatures	Host.cpp	/^static unsigned getAvailableFeatures(unsigned int ECX, unsigned int EDX,$/;"	kind:f	typeref:typename:unsigned	file:	signature:(unsigned int ECX,unsigned int EDX,unsigned MaxLeaf)
getBigEndianArchVariant	Triple.cpp	/^Triple Triple::getBigEndianArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
getBitsNeeded	APInt.cpp	/^unsigned APInt::getBitsNeeded(StringRef str, uint8_t radix) {$/;"	kind:f	class:APInt	typeref:typename:unsigned	signature:(StringRef str,uint8_t radix)
getBranchProbability	BranchProbability.cpp	/^BranchProbability::getBranchProbability(uint64_t Numerator,$/;"	kind:f	class:BranchProbability	typeref:typename:BranchProbability	signature:(uint64_t Numerator,uint64_t Denominator)
getBufferIdentifier	MemoryBuffer.cpp	/^  StringRef getBufferIdentifier() const override {$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	typeref:typename:StringRef	file:	access:public	signature:() const
getBufferIdentifier	MemoryBuffer.cpp	/^  StringRef getBufferIdentifier() const override {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:StringRef	file:	access:public	signature:() const
getBufferKind	MemoryBuffer.cpp	/^  BufferKind getBufferKind() const override {$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	typeref:typename:BufferKind	file:	access:public	signature:() const
getBufferKind	MemoryBuffer.cpp	/^  BufferKind getBufferKind() const override {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:BufferKind	file:	access:public	signature:() const
getCPUAttr	TargetParser.cpp	/^  StringRef getCPUAttr() const { return StringRef(CPUAttrCStr, CPUAttrLength); }$/;"	kind:f	struct:__anond11a194a0110::ArchNames	typeref:typename:StringRef	file:	access:public	signature:() const
getCPUAttr	TargetParser.cpp	/^StringRef llvm::AArch64::getCPUAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchKind)
getCPUAttr	TargetParser.cpp	/^StringRef llvm::ARM::getCPUAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchKind)
getCStr	DataExtractor.cpp	/^const char *DataExtractor::getCStr(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:const char *	signature:(uint32_t * offset_ptr) const
getCache	SourceMgr.cpp	/^static LineNoCacheTy *getCache(void *Ptr) {$/;"	kind:f	typeref:typename:LineNoCacheTy *	file:	signature:(void * Ptr)
getCallingConvention	Dwarf.cpp	/^unsigned llvm::dwarf::getCallingConvention(StringRef CCString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef CCString)
getCanonicalArchName	TargetParser.cpp	/^StringRef llvm::AArch64::getCanonicalArchName(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(StringRef Arch)
getCanonicalArchName	TargetParser.cpp	/^StringRef llvm::ARM::getCanonicalArchName(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(StringRef Arch)
getChompedLineBreaks	YAMLParser.cpp	/^static unsigned getChompedLineBreaks(char ChompingIndicator,$/;"	kind:f	typeref:typename:unsigned	file:	signature:(char ChompingIndicator,unsigned LineBreaks,StringRef Str)
getClearedMemory	APInt.cpp	/^inline static uint64_t* getClearedMemory(unsigned numWords) {$/;"	kind:f	typeref:typename:uint64_t *	file:	signature:(unsigned numWords)
getColorString	GraphWriter.cpp	/^StringRef llvm::DOT::getColorString(unsigned ColorNumber) {$/;"	kind:f	class:llvm::DOT	typeref:typename:StringRef	signature:(unsigned ColorNumber)
getContext	YAMLTraits.cpp	/^void *IO::getContext() {$/;"	kind:f	class:IO	typeref:typename:void *	signature:()
getCurrentNode	YAMLTraits.cpp	/^const Node *Input::getCurrentNode() const {$/;"	kind:f	class:Input	typeref:typename:const Node *	signature:() const
getCurrentTime	Timer.cpp	/^TimeRecord TimeRecord::getCurrentTime(bool Start) {$/;"	kind:f	class:TimeRecord	typeref:typename:TimeRecord	signature:(bool Start)
getDefaultCPU	TargetParser.cpp	/^StringRef llvm::AArch64::getDefaultCPU(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(StringRef Arch)
getDefaultCPU	TargetParser.cpp	/^StringRef llvm::ARM::getDefaultCPU(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(StringRef Arch)
getDefaultExtensions	TargetParser.cpp	/^unsigned llvm::AArch64::getDefaultExtensions(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
getDefaultExtensions	TargetParser.cpp	/^unsigned llvm::ARM::getDefaultExtensions(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
getDefaultFPU	TargetParser.cpp	/^unsigned llvm::AArch64::getDefaultFPU(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
getDefaultFPU	TargetParser.cpp	/^unsigned llvm::ARM::getDefaultFPU(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
getDefaultFormat	Triple.cpp	/^static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {$/;"	kind:f	typeref:typename:Triple::ObjectFormatType	file:	signature:(const Triple & T)
getDefaultPrecision	NativeFormatting.cpp	/^size_t llvm::getDefaultPrecision(FloatStyle Style) {$/;"	kind:f	class:llvm	typeref:typename:size_t	signature:(FloatStyle Style)
getDefaultTimerGroup	Timer.cpp	/^static TimerGroup *getDefaultTimerGroup() {$/;"	kind:f	typeref:typename:TimerGroup *	file:	signature:()
getDigit	APInt.cpp	/^inline static unsigned getDigit(char cdigit, uint8_t radix) {$/;"	kind:f	typeref:typename:unsigned	file:	signature:(char cdigit,uint8_t radix)
getEnvironmentName	Triple.cpp	/^StringRef Triple::getEnvironmentName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
getEnvironmentTypeName	Triple.cpp	/^StringRef Triple::getEnvironmentTypeName(EnvironmentType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(EnvironmentType Kind)
getEnvironmentVersion	Triple.cpp	/^void Triple::getEnvironmentVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
getErrorMessage	LockFileManager.cpp	/^std::string LockFileManager::getErrorMessage() const {$/;"	kind:f	class:LockFileManager	typeref:typename:std::string	signature:() const
getExactInverse	APFloat.cpp	/^bool IEEEFloat::getExactInverse(IEEEFloat *inv) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(IEEEFloat * inv) const
getExtensionFeatures	TargetParser.cpp	/^bool llvm::AArch64::getExtensionFeatures(unsigned Extensions,$/;"	kind:f	class:llvm::AArch64	typeref:typename:bool	signature:(unsigned Extensions,std::vector<StringRef> & Features)
getExtensionFeatures	TargetParser.cpp	/^bool llvm::ARM::getExtensionFeatures(unsigned Extensions,$/;"	kind:f	class:llvm::ARM	typeref:typename:bool	signature:(unsigned Extensions,std::vector<StringRef> & Features)
getFD	raw_ostream.cpp	/^static int getFD(StringRef Filename, std::error_code &EC,$/;"	kind:f	typeref:typename:int	file:	signature:(StringRef Filename,std::error_code & EC,sys::fs::OpenFlags Flags)
getFPUFeatures	TargetParser.cpp	/^bool llvm::AArch64::getFPUFeatures(unsigned FPUKind,$/;"	kind:f	class:llvm::AArch64	typeref:typename:bool	signature:(unsigned FPUKind,std::vector<StringRef> & Features)
getFPUFeatures	TargetParser.cpp	/^bool llvm::ARM::getFPUFeatures(unsigned FPUKind,$/;"	kind:f	class:llvm::ARM	typeref:typename:bool	signature:(unsigned FPUKind,std::vector<StringRef> & Features)
getFPUName	TargetParser.cpp	/^StringRef llvm::AArch64::getFPUName(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned FPUKind)
getFPUName	TargetParser.cpp	/^StringRef llvm::ARM::getFPUName(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned FPUKind)
getFPUNeonSupportLevel	TargetParser.cpp	/^unsigned llvm::AArch64::getFPUNeonSupportLevel(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned FPUKind)
getFPUNeonSupportLevel	TargetParser.cpp	/^unsigned llvm::ARM::getFPUNeonSupportLevel(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned FPUKind)
getFPURestriction	TargetParser.cpp	/^unsigned llvm::AArch64::getFPURestriction(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned FPUKind)
getFPURestriction	TargetParser.cpp	/^unsigned llvm::ARM::getFPURestriction(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned FPUKind)
getFPUSynonym	TargetParser.cpp	/^static StringRef getFPUSynonym(StringRef FPU) {$/;"	kind:f	typeref:typename:StringRef	file:	signature:(StringRef FPU)
getFPUVersion	TargetParser.cpp	/^unsigned llvm::AArch64::getFPUVersion(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned FPUKind)
getFPUVersion	TargetParser.cpp	/^unsigned llvm::ARM::getFPUVersion(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned FPUKind)
getFile	MemoryBuffer.cpp	/^MemoryBuffer::getFile(const Twine &Filename, int64_t FileSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & Filename,int64_t FileSize,bool RequiresNullTerminator,bool IsVolatileSize)
getFileAsStream	MemoryBuffer.cpp	/^MemoryBuffer::getFileAsStream(const Twine &Filename) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & Filename)
getFileAux	MemoryBuffer.cpp	/^getFileAux(const Twine &Filename, int64_t FileSize, uint64_t MapSize, $/;"	kind:p	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	file:	signature:(const Twine & Filename,int64_t FileSize,uint64_t MapSize,uint64_t Offset,bool RequiresNullTerminator,bool IsVolatileSize)
getFileAux	MemoryBuffer.cpp	/^getFileAux(const Twine &Filename, int64_t FileSize, uint64_t MapSize,$/;"	kind:f	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	file:	signature:(const Twine & Filename,int64_t FileSize,uint64_t MapSize,uint64_t Offset,bool RequiresNullTerminator,bool IsVolatileSize)
getFileOrSTDIN	MemoryBuffer.cpp	/^MemoryBuffer::getFileOrSTDIN(const Twine &Filename, int64_t FileSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & Filename,int64_t FileSize,bool RequiresNullTerminator)
getFileSlice	MemoryBuffer.cpp	/^MemoryBuffer::getFileSlice(const Twine &FilePath, uint64_t MapSize, $/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(const Twine & FilePath,uint64_t MapSize,uint64_t Offset)
getHWDivFeatures	TargetParser.cpp	/^bool llvm::ARM::getHWDivFeatures(unsigned HWDivKind,$/;"	kind:f	class:llvm::ARM	typeref:typename:bool	signature:(unsigned HWDivKind,std::vector<StringRef> & Features)
getHWDivName	TargetParser.cpp	/^StringRef llvm::ARM::getHWDivName(unsigned HWDivKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned HWDivKind)
getHWDivSynonym	TargetParser.cpp	/^static StringRef getHWDivSynonym(StringRef HWDiv) {$/;"	kind:f	typeref:typename:StringRef	file:	signature:(StringRef HWDiv)
getHalf	ScaledNumber.cpp	/^static uint64_t getHalf(uint64_t N) { return (N >> 1) + (N & 1); }$/;"	kind:f	typeref:typename:uint64_t	file:	signature:(uint64_t N)
getHiBits	APInt.cpp	/^APInt APInt::getHiBits(unsigned numBits) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned numBits) const
getHostCPUFeatures	Host.cpp	/^bool sys::getHostCPUFeatures(StringMap<bool> &Features) { return false; }$/;"	kind:f	class:sys	typeref:typename:bool	signature:(StringMap<bool> & Features)
getHostCPUFeatures	Host.cpp	/^bool sys::getHostCPUFeatures(StringMap<bool> &Features) {$/;"	kind:f	class:sys	typeref:typename:bool	signature:(StringMap<bool> & Features)
getHostCPUName	Host.cpp	/^StringRef sys::getHostCPUName() { return "generic"; }$/;"	kind:f	class:sys	typeref:typename:StringRef	signature:()
getHostCPUName	Host.cpp	/^StringRef sys::getHostCPUName() {$/;"	kind:f	class:sys	typeref:typename:StringRef	signature:()
getHostID	LockFileManager.cpp	/^static std::error_code getHostID(SmallVectorImpl<char> &HostID) {$/;"	kind:f	typeref:typename:std::error_code	file:	signature:(SmallVectorImpl<char> & HostID)
getHostNumPhysicalCores	Host.cpp	/^int sys::getHostNumPhysicalCores() {$/;"	kind:f	class:sys	typeref:typename:int	signature:()
getInstance	ThreadLocal.cpp	/^void *ThreadLocalImpl::getInstance() {$/;"	kind:f	class:llvm::ThreadLocalImpl	typeref:typename:void *	signature:()
getIntelProcessorTypeAndSubtype	Host.cpp	/^getIntelProcessorTypeAndSubtype(unsigned int Family, unsigned int Model,$/;"	kind:f	typeref:typename:void	file:	signature:(unsigned int Family,unsigned int Model,unsigned int Brand_id,unsigned int Features,unsigned * Type,unsigned * Subtype)
getKey	YAMLParser.cpp	/^Node *KeyValueNode::getKey() {$/;"	kind:f	class:KeyValueNode	typeref:typename:Node *	signature:()
getLanguage	Dwarf.cpp	/^unsigned llvm::dwarf::getLanguage(StringRef LanguageString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef LanguageString)
getLeftSibling	IntervalMap.cpp	/^NodeRef Path::getLeftSibling(unsigned Level) const {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:NodeRef	signature:(unsigned Level) const
getLegalMapOffset	MemoryBuffer.cpp	/^  static uint64_t getLegalMapOffset(uint64_t Offset) {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:uint64_t	file:	access:private	signature:(uint64_t Offset)
getLegalMapSize	MemoryBuffer.cpp	/^  static uint64_t getLegalMapSize(uint64_t Len, uint64_t Offset) {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:uint64_t	file:	access:private	signature:(uint64_t Len,uint64_t Offset)
getLibSupportInfoOutputFilename	Timer.cpp	/^static std::string &getLibSupportInfoOutputFilename() {$/;"	kind:f	typeref:typename:std::string &	file:	signature:()
getLineAndColumn	SourceMgr.cpp	/^SourceMgr::getLineAndColumn(SMLoc Loc, unsigned BufferID) const {$/;"	kind:f	class:SourceMgr	typeref:typename:std::pair<unsigned,unsigned>	signature:(SMLoc Loc,unsigned BufferID) const
getLittleEndianArchVariant	Triple.cpp	/^Triple Triple::getLittleEndianArchVariant() const {$/;"	kind:f	class:Triple	typeref:typename:Triple	signature:() const
getLoBits	APInt.cpp	/^APInt APInt::getLoBits(unsigned numBits) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned numBits) const
getMacOSXVersion	Triple.cpp	/^bool Triple::getMacOSXVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:bool	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
getMacinfo	Dwarf.cpp	/^unsigned llvm::dwarf::getMacinfo(StringRef MacinfoString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef MacinfoString)
getManagedStaticMutex	ManagedStatic.cpp	/^static sys::Mutex* getManagedStaticMutex() {$/;"	kind:f	typeref:typename:sys::Mutex *	file:	signature:()
getMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getMemBuffer(MemoryBufferRef Ref, bool RequiresNullTerminator) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(MemoryBufferRef Ref,bool RequiresNullTerminator)
getMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getMemBuffer(StringRef InputData, StringRef BufferName,$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(StringRef InputData,StringRef BufferName,bool RequiresNullTerminator)
getMemBufferCopy	MemoryBuffer.cpp	/^MemoryBuffer::getMemBufferCopy(StringRef InputData, const Twine &BufferName) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(StringRef InputData,const Twine & BufferName)
getMemBufferRef	MemoryBuffer.cpp	/^MemoryBufferRef MemoryBuffer::getMemBufferRef() const {$/;"	kind:f	class:MemoryBuffer	typeref:typename:MemoryBufferRef	signature:() const
getMemUsage	Timer.cpp	/^static inline size_t getMemUsage() {$/;"	kind:f	typeref:typename:size_t	file:	signature:()
getMemory	APInt.cpp	/^inline static uint64_t* getMemory(unsigned numWords) {$/;"	kind:f	typeref:typename:uint64_t *	file:	signature:(unsigned numWords)
getMemoryBufferForStream	MemoryBuffer.cpp	/^getMemoryBufferForStream(int FD, const Twine &BufferName) {$/;"	kind:f	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	file:	signature:(int FD,const Twine & BufferName)
getMinBucketToReserveForEntries	StringMap.cpp	/^static unsigned getMinBucketToReserveForEntries(unsigned NumEntries) {$/;"	kind:f	typeref:typename:unsigned	file:	signature:(unsigned NumEntries)
getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::ArchNames	typeref:typename:StringRef	file:	access:public	signature:() const
getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::CpuNames	typeref:typename:StringRef	file:	access:public	signature:() const
getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::__anond11a194a0208	typeref:typename:StringRef	file:	access:public	signature:() const
getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::__anond11a194a0308	typeref:typename:StringRef	file:	access:public	signature:() const
getName	TargetParser.cpp	/^  StringRef getName() const { return StringRef(NameCStr, NameLength); }$/;"	kind:f	struct:__anond11a194a0110::__anond11a194a0408	typeref:typename:StringRef	file:	access:public	signature:() const
getNewMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getNewMemBuffer(size_t Size, StringRef BufferName) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(size_t Size,StringRef BufferName)
getNewUninitMemBuffer	MemoryBuffer.cpp	/^MemoryBuffer::getNewUninitMemBuffer(size_t Size, const Twine &BufferName) {$/;"	kind:f	class:MemoryBuffer	typeref:typename:std::unique_ptr<MemoryBuffer>	signature:(size_t Size,const Twine & BufferName)
getNext	YAMLParser.cpp	/^  Token getNext();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:Token	file:	access:public	signature:()
getNext	YAMLParser.cpp	/^Token Document::getNext() {$/;"	kind:f	class:Document	typeref:typename:Token	signature:()
getNext	YAMLParser.cpp	/^Token Node::getNext() {$/;"	kind:f	class:Node	typeref:typename:Token	signature:()
getNext	YAMLParser.cpp	/^Token Scanner::getNext() {$/;"	kind:f	class:Scanner	typeref:typename:Token	signature:()
getNumBytesForUTF8	ConvertUTF.cpp	/^unsigned getNumBytesForUTF8(UTF8 first) {$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	signature:(UTF8 first)
getNumMatches	Regex.cpp	/^unsigned Regex::getNumMatches() const {$/;"	kind:f	class:Regex	typeref:typename:unsigned	signature:() const
getNumPlugins	PluginLoader.cpp	/^unsigned PluginLoader::getNumPlugins() {$/;"	kind:f	class:PluginLoader	typeref:typename:unsigned	signature:()
getOSAndEnvironmentName	Triple.cpp	/^StringRef Triple::getOSAndEnvironmentName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
getOSName	Triple.cpp	/^StringRef Triple::getOSName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
getOSTypeName	Triple.cpp	/^StringRef Triple::getOSTypeName(OSType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(OSType Kind)
getOSVersion	Triple.cpp	/^void Triple::getOSVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
getObjectFormatTypeName	Triple.cpp	/^static StringRef getObjectFormatTypeName(Triple::ObjectFormatType Kind) {$/;"	kind:f	typeref:typename:StringRef	file:	signature:(Triple::ObjectFormatType Kind)
getOpenFile	MemoryBuffer.cpp	/^MemoryBuffer::getOpenFile(int FD, const Twine &Filename, uint64_t FileSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(int FD,const Twine & Filename,uint64_t FileSize,bool RequiresNullTerminator,bool IsVolatileSize)
getOpenFileImpl	MemoryBuffer.cpp	/^getOpenFileImpl(int FD, const Twine &Filename, uint64_t FileSize,$/;"	kind:f	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	file:	signature:(int FD,const Twine & Filename,uint64_t FileSize,uint64_t MapSize,int64_t Offset,bool RequiresNullTerminator,bool IsVolatileSize)
getOpenFileImpl	MemoryBuffer.cpp	/^getOpenFileImpl(int FD, const Twine &Filename, uint64_t FileSize,$/;"	kind:p	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	file:	signature:(int FD,const Twine & Filename,uint64_t FileSize,uint64_t MapSize,int64_t Offset,bool RequiresNullTerminator,bool IsVolatileSize)
getOpenFileSlice	MemoryBuffer.cpp	/^MemoryBuffer::getOpenFileSlice(int FD, const Twine &Filename, uint64_t MapSize,$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:(int FD,const Twine & Filename,uint64_t MapSize,int64_t Offset)
getOperationEncoding	Dwarf.cpp	/^unsigned llvm::dwarf::getOperationEncoding(StringRef OperationEncodingString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef OperationEncodingString)
getOptionPred	CommandLine.cpp	/^static Option *getOptionPred(StringRef Name, size_t &Length,$/;"	kind:f	typeref:typename:Option *	file:	signature:(StringRef Name,size_t & Length,bool (* Pred)(const Option *),const StringMap<Option * > & OptionsMap)
getOptionWidth	CommandLine.cpp	/^size_t alias::getOptionWidth() const { return ArgStr.size() + 6; }$/;"	kind:f	class:alias	typeref:typename:size_t	signature:() const
getOptionWidth	CommandLine.cpp	/^size_t basic_parser_impl::getOptionWidth(const Option &O) const {$/;"	kind:f	class:basic_parser_impl	typeref:typename:size_t	signature:(const Option & O) const
getOptionWidth	CommandLine.cpp	/^size_t generic_parser_base::getOptionWidth(const Option &O) const {$/;"	kind:f	class:generic_parser_base	typeref:typename:size_t	signature:(const Option & O) const
getPermanentLibrary	DynamicLibrary.cpp	/^DynamicLibrary DynamicLibrary::getPermanentLibrary(const char *filename,$/;"	kind:f	class:DynamicLibrary	typeref:typename:DynamicLibrary	signature:(const char * filename,std::string * errMsg)
getPlugin	PluginLoader.cpp	/^std::string &PluginLoader::getPlugin(unsigned num) {$/;"	kind:f	class:PluginLoader	typeref:typename:std::string &	signature:(unsigned num)
getProcessTriple	Host.cpp	/^std::string sys::getProcessTriple() {$/;"	kind:f	class:sys	typeref:typename:std::string	signature:()
getProgramName	GraphWriter.cpp	/^static const char *getProgramName(GraphProgram::Name program) {$/;"	kind:f	typeref:typename:const char *	file:	signature:(GraphProgram::Name program)
getRandomBytes	RandomNumberGenerator.cpp	/^std::error_code llvm::getRandomBytes(void *Buffer, size_t Size) {$/;"	kind:f	class:llvm	typeref:typename:std::error_code	signature:(void * Buffer,size_t Size)
getRegisteredOptions	CommandLine.cpp	/^StringMap<Option *> &cl::getRegisteredOptions(SubCommand &Sub) {$/;"	kind:f	class:cl	typeref:typename:StringMap<Option * > &	signature:(SubCommand & Sub)
getRegisteredSubcommands	CommandLine.cpp	/^  getRegisteredSubcommands() {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:iterator_range<typename SmallPtrSet<SubCommand *,4>::iterator>	file:	access:public	signature:()
getRegisteredSubcommands	CommandLine.cpp	/^cl::getRegisteredSubcommands() {$/;"	kind:f	class:cl	typeref:typename:iterator_range<typename SmallPtrSet<SubCommand *,4>::iterator>	signature:()
getRightSibling	IntervalMap.cpp	/^NodeRef Path::getRightSibling(unsigned Level) const {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:NodeRef	signature:(unsigned Level) const
getSLEB128	DataExtractor.cpp	/^int64_t DataExtractor::getSLEB128(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:int64_t	signature:(uint32_t * offset_ptr) const
getSLEB128Size	LEB128.cpp	/^unsigned getSLEB128Size(int64_t Value) {$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	signature:(int64_t Value)
getSTDIN	MemoryBuffer.cpp	/^ErrorOr<std::unique_ptr<MemoryBuffer>> MemoryBuffer::getSTDIN() {$/;"	kind:f	class:MemoryBuffer	typeref:typename:ErrorOr<std::unique_ptr<MemoryBuffer>>	signature:()
getSigned	DataExtractor.cpp	/^DataExtractor::getSigned(uint32_t *offset_ptr, uint32_t byte_size) const {$/;"	kind:f	class:DataExtractor	typeref:typename:int64_t	signature:(uint32_t * offset_ptr,uint32_t byte_size) const
getSizeInBits	APFloat.cpp	/^  unsigned APFloatBase::getSizeInBits(const fltSemantics &Sem) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:unsigned	signature:(const fltSemantics & Sem)
getStart	MemoryBuffer.cpp	/^  const char *getStart(uint64_t Len, uint64_t Offset) {$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:const char *	file:	access:private	signature:(uint64_t Len,uint64_t Offset)
getState	LockFileManager.cpp	/^LockFileManager::LockFileState LockFileManager::getState() const {$/;"	kind:f	class:LockFileManager	typeref:typename:LockFileManager::LockFileState	signature:() const
getStructTM	Chrono.cpp	/^static inline struct tm getStructTM(TimePoint<> TP) {$/;"	kind:f	namespace:llvm	typeref:struct:tm	file:	signature:(TimePoint<> TP)
getSubArch	TargetParser.cpp	/^  StringRef getSubArch() const { return StringRef(SubArchCStr, SubArchLength); }$/;"	kind:f	struct:__anond11a194a0110::ArchNames	typeref:typename:StringRef	file:	access:public	signature:() const
getSubArch	TargetParser.cpp	/^StringRef llvm::AArch64::getSubArch(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchKind)
getSubArch	TargetParser.cpp	/^StringRef llvm::ARM::getSubArch(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchKind)
getTag	Dwarf.cpp	/^unsigned llvm::dwarf::getTag(StringRef TagString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef TagString)
getToken	StringExtras.cpp	/^std::pair<StringRef, StringRef> llvm::getToken(StringRef Source,$/;"	kind:f	class:llvm	typeref:typename:std::pair<StringRef,StringRef>	signature:(StringRef Source,StringRef Delimiters)
getU	DataExtractor.cpp	/^static T getU(uint32_t *offset_ptr, const DataExtractor *de,$/;"	kind:f	typeref:typename:T	file:	signature:(uint32_t * offset_ptr,const DataExtractor * de,bool isLittleEndian,const char * Data)
getU16	DataExtractor.cpp	/^uint16_t *DataExtractor::getU16(uint32_t *offset_ptr, uint16_t *dst,$/;"	kind:f	class:DataExtractor	typeref:typename:uint16_t *	signature:(uint32_t * offset_ptr,uint16_t * dst,uint32_t count) const
getU16	DataExtractor.cpp	/^uint16_t DataExtractor::getU16(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint16_t	signature:(uint32_t * offset_ptr) const
getU32	DataExtractor.cpp	/^uint32_t *DataExtractor::getU32(uint32_t *offset_ptr, uint32_t *dst,$/;"	kind:f	class:DataExtractor	typeref:typename:uint32_t *	signature:(uint32_t * offset_ptr,uint32_t * dst,uint32_t count) const
getU32	DataExtractor.cpp	/^uint32_t DataExtractor::getU32(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint32_t	signature:(uint32_t * offset_ptr) const
getU64	DataExtractor.cpp	/^uint64_t *DataExtractor::getU64(uint32_t *offset_ptr, uint64_t *dst,$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t *	signature:(uint32_t * offset_ptr,uint64_t * dst,uint32_t count) const
getU64	DataExtractor.cpp	/^uint64_t DataExtractor::getU64(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t	signature:(uint32_t * offset_ptr) const
getU8	DataExtractor.cpp	/^DataExtractor::getU8(uint32_t *offset_ptr, uint8_t *dst, uint32_t count) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint8_t *	signature:(uint32_t * offset_ptr,uint8_t * dst,uint32_t count) const
getU8	DataExtractor.cpp	/^uint8_t DataExtractor::getU8(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint8_t	signature:(uint32_t * offset_ptr) const
getULEB128	DataExtractor.cpp	/^uint64_t DataExtractor::getULEB128(uint32_t *offset_ptr) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t	signature:(uint32_t * offset_ptr) const
getULEB128Size	LEB128.cpp	/^unsigned getULEB128Size(uint64_t Value) {$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	signature:(uint64_t Value)
getUnicodeEncoding	YAMLParser.cpp	/^static EncodingInfo getUnicodeEncoding(StringRef Input) {$/;"	kind:f	typeref:typename:EncodingInfo	file:	signature:(StringRef Input)
getUniqueID	Path.cpp	/^std::error_code getUniqueID(const Twine Path, UniqueID &Result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine Path,UniqueID & Result)
getUnsigned	DataExtractor.cpp	/^DataExtractor::getUnsigned(uint32_t *offset_ptr, uint32_t byte_size) const {$/;"	kind:f	class:DataExtractor	typeref:typename:uint64_t	signature:(uint32_t * offset_ptr,uint32_t byte_size) const
getUs	DataExtractor.cpp	/^static T *getUs(uint32_t *offset_ptr, T *dst, uint32_t count,$/;"	kind:f	typeref:typename:T *	file:	signature:(uint32_t * offset_ptr,T * dst,uint32_t count,const DataExtractor * de,bool isLittleEndian,const char * Data)
getValue	YAMLParser.cpp	/^Node *KeyValueNode::getValue() {$/;"	kind:f	class:KeyValueNode	typeref:typename:Node *	signature:()
getValue	YAMLParser.cpp	/^StringRef ScalarNode::getValue(SmallVectorImpl<char> &Storage) const {$/;"	kind:f	class:ScalarNode	typeref:typename:StringRef	signature:(SmallVectorImpl<char> & Storage) const
getValueStr	CommandLine.cpp	/^static StringRef getValueStr(const Option &O, StringRef DefaultMsg) {$/;"	kind:f	typeref:typename:StringRef	file:	signature:(const Option & O,StringRef DefaultMsg)
getVendorName	Triple.cpp	/^StringRef Triple::getVendorName() const {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:() const
getVendorTypeName	Triple.cpp	/^StringRef Triple::getVendorTypeName(VendorType Kind) {$/;"	kind:f	class:Triple	typeref:typename:StringRef	signature:(VendorType Kind)
getVerbatimTag	YAMLParser.cpp	/^std::string Node::getVerbatimTag() const {$/;"	kind:f	class:Node	typeref:typename:std::string	signature:() const
getVirtuality	Dwarf.cpp	/^unsigned llvm::dwarf::getVirtuality(StringRef VirtualityString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef VirtualityString)
getWatchOSVersion	Triple.cpp	/^void Triple::getWatchOSVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
getX86CpuIDAndInfo	Host.cpp	/^static bool getX86CpuIDAndInfo(unsigned value, unsigned *rEAX, unsigned *rEBX,$/;"	kind:f	typeref:typename:bool	file:	signature:(unsigned value,unsigned * rEAX,unsigned * rEBX,unsigned * rECX,unsigned * rEDX)
getX86CpuIDAndInfoEx	Host.cpp	/^static bool getX86CpuIDAndInfoEx(unsigned value, unsigned subleaf,$/;"	kind:f	typeref:typename:bool	file:	signature:(unsigned value,unsigned subleaf,unsigned * rEAX,unsigned * rEBX,unsigned * rECX,unsigned * rEDX)
getX86XCR0	Host.cpp	/^static bool getX86XCR0(unsigned *rEAX, unsigned *rEDX) {$/;"	kind:f	typeref:typename:bool	file:	signature:(unsigned * rEAX,unsigned * rEDX)
get_separator	Path.cpp	/^StringRef get_separator() {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:()
getiOSVersion	Triple.cpp	/^void Triple::getiOSVersion(unsigned &Major, unsigned &Minor,$/;"	kind:f	class:Triple	typeref:typename:void	signature:(unsigned & Major,unsigned & Minor,unsigned & Micro) const
grow	IntEqClasses.cpp	/^void IntEqClasses::grow(unsigned N) {$/;"	kind:f	class:IntEqClasses	typeref:typename:void	signature:(unsigned N)
grow_pod	SmallVector.cpp	/^void SmallVectorBase::grow_pod(void *FirstEl, size_t MinSizeInBytes,$/;"	kind:f	class:SmallVectorBase	typeref:typename:void	signature:(void * FirstEl,size_t MinSizeInBytes,size_t TSize)
halfBase	ConvertUTF.cpp	/^static const UTF32 halfBase = 0x0010000UL;$/;"	kind:v	namespace:llvm	typeref:typename:const UTF32	file:
halfMask	ConvertUTF.cpp	/^static const UTF32 halfMask = 0x3FFUL;$/;"	kind:v	namespace:llvm	typeref:typename:const UTF32	file:
halfShift	ConvertUTF.cpp	/^static const int halfShift  = 10; \/* used for shifting by 10 bits *\/$/;"	kind:v	namespace:llvm	typeref:typename:const int	file:
handle	raw_ostream.cpp	/^void raw_ostream::handle() {}$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:()
handleOverflow	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::handleOverflow(roundingMode rounding_mode) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(roundingMode rounding_mode)
handle_type	Windows/WindowsSupport.h	/^  typedef HANDLE handle_type;$/;"	kind:t	struct:CommonHandleTraits	typeref:typename:HANDLE	access:public
handle_type	Windows/WindowsSupport.h	/^  typedef HCRYPTPROV handle_type;$/;"	kind:t	struct:CryptContextTraits	typeref:typename:HCRYPTPROV	access:public
handle_type	Windows/WindowsSupport.h	/^  typedef HKEY handle_type;$/;"	kind:t	struct:RegTraits	typeref:typename:HKEY	access:public
handle_type	Windows/WindowsSupport.h	/^  typedef typename HandleTraits::handle_type handle_type;$/;"	kind:t	class:ScopedHandle	typeref:typename:HandleTraits::handle_type	access:private
hasOptions	CommandLine.cpp	/^  bool hasOptions() const {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:bool	file:	access:public	signature:() const
hasOptions	CommandLine.cpp	/^  bool hasOptions(const SubCommand &Sub) const {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:bool	file:	access:public	signature:(const SubCommand & Sub) const
hasThreadBackgroundPriority	CrashRecoveryContext.cpp	/^static bool hasThreadBackgroundPriority() {$/;"	kind:f	typeref:typename:bool	file:	signature:()
hasUTF16ByteOrderMark	ConvertUTFWrapper.cpp	/^bool hasUTF16ByteOrderMark(ArrayRef<char> S) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(ArrayRef<char> S)
hasUTF8ByteOrderMark	CommandLine.cpp	/^static bool hasUTF8ByteOrderMark(ArrayRef<char> S) {$/;"	kind:f	typeref:typename:bool	file:	signature:(ArrayRef<char> S)
has_colors	raw_ostream.cpp	/^bool raw_fd_ostream::has_colors() const {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:bool	signature:() const
has_extension	Path.cpp	/^bool has_extension(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
has_filename	Path.cpp	/^bool has_filename(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
has_parent_path	Path.cpp	/^bool has_parent_path(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
has_relative_path	Path.cpp	/^bool has_relative_path(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
has_root_directory	Path.cpp	/^bool has_root_directory(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
has_root_name	Path.cpp	/^bool has_root_name(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
has_root_path	Path.cpp	/^bool has_root_path(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
has_stem	Path.cpp	/^bool has_stem(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
hash	MD5.cpp	/^std::array<uint8_t, 16> MD5::hash(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:llvm::MD5	typeref:typename:std::array<uint8_t,16>	signature:(ArrayRef<uint8_t> Data)
hash	SHA1.cpp	/^std::array<uint8_t, 20> SHA1::hash(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:SHA1	typeref:typename:std::array<uint8_t,20>	signature:(ArrayRef<uint8_t> Data)
hash	regex2.h	/^	uch hash;		\/* hash code *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:uch	access:public
hashBlock	SHA1.cpp	/^void SHA1::hashBlock() {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:()
hash_value	APFloat.cpp	/^hash_code hash_value(const APFloat &Arg) { return hash_value(Arg.getIEEE()); }$/;"	kind:f	namespace:llvm	typeref:typename:hash_code	signature:(const APFloat & Arg)
hash_value	APFloat.cpp	/^hash_code hash_value(const IEEEFloat &Arg) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:hash_code	signature:(const IEEEFloat & Arg)
hash_value	APInt.cpp	/^hash_code llvm::hash_value(const APInt &Arg) {$/;"	kind:f	class:llvm	typeref:typename:hash_code	signature:(const APInt & Arg)
hash_value	StringRef.cpp	/^hash_code llvm::hash_value(StringRef S) {$/;"	kind:f	class:llvm	typeref:typename:hash_code	signature:(StringRef S)
heavyweight_hardware_concurrency	Threading.cpp	/^unsigned llvm::heavyweight_hardware_concurrency() {$/;"	kind:f	class:llvm	typeref:typename:unsigned	signature:()
hexDigitsLower	APFloat.cpp	/^static const char hexDigitsLower[] = "0123456789abcdef0";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
hexDigitsUpper	APFloat.cpp	/^static const char hexDigitsUpper[] = "0123456789ABCDEF0";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
highHalf	APInt.cpp	/^  highHalf(integerPart part)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:integerPart	file:	signature:(integerPart part)
home	raw_ostream.cpp	/^void format_object_base::home() {$/;"	kind:f	class:format_object_base	typeref:typename:void	signature:()
huge_valf	MathExtras.cpp	/^  const float huge_valf = std::numeric_limits<float>::infinity();$/;"	kind:v	namespace:llvm	typeref:typename:const float
identify_magic	Path.cpp	/^file_magic identify_magic(StringRef Magic) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:file_magic	signature:(StringRef Magic)
identify_magic	Path.cpp	/^std::error_code identify_magic(const Twine &Path, file_magic &Result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Path,file_magic & Result)
iflags	regex2.h	/^	int iflags;		\/* internal flags *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
ilogb	APFloat.cpp	/^int ilogb(const IEEEFloat &Arg) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:int	signature:(const IEEEFloat & Arg)
inSection	SpecialCaseList.cpp	/^bool SpecialCaseList::inSection(StringRef Section, StringRef Query,$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:bool	signature:(StringRef Section,StringRef Query,StringRef Category) const
inconvertibleErrorCode	Error.cpp	/^std::error_code inconvertibleErrorCode() {$/;"	kind:f	namespace:llvm	typeref:typename:std::error_code	signature:()
increment	YAMLParser.cpp	/^void MappingNode::increment() {$/;"	kind:f	class:MappingNode	typeref:typename:void	signature:()
increment	YAMLParser.cpp	/^void SequenceNode::increment() {$/;"	kind:f	class:SequenceNode	typeref:typename:void	signature:()
incrementSignificand	APFloat.cpp	/^void IEEEFloat::incrementSignificand() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
indent	raw_ostream.cpp	/^raw_ostream &raw_ostream::indent(unsigned NumSpaces) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned NumSpaces)
infinityL	APFloat.cpp	/^static const char infinityL[] = "infinity";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
infinityU	APFloat.cpp	/^static const char infinityU[] = "INFINITY";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
init	MemoryBuffer.cpp	/^void MemoryBuffer::init(const char *BufStart, const char *BufEnd,$/;"	kind:f	class:MemoryBuffer	typeref:typename:void	signature:(const char * BufStart,const char * BufEnd,bool RequiresNullTerminator)
init	SHA1.cpp	/^void SHA1::init() {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:()
init	StringMap.cpp	/^void StringMapImpl::init(unsigned InitSize) {$/;"	kind:f	class:StringMapImpl	typeref:typename:void	signature:(unsigned InitSize)
init	Timer.cpp	/^void Timer::init(StringRef Name, StringRef Description) {$/;"	kind:f	class:Timer	typeref:typename:void	signature:(StringRef Name,StringRef Description)
init	Timer.cpp	/^void Timer::init(StringRef Name, StringRef Description, TimerGroup &tg) {$/;"	kind:f	class:Timer	typeref:typename:void	signature:(StringRef Name,StringRef Description,TimerGroup & tg)
init	YAMLParser.cpp	/^  void init(MemoryBufferRef Buffer);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(MemoryBufferRef Buffer)
init	YAMLParser.cpp	/^void Scanner::init(MemoryBufferRef Buffer) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(MemoryBufferRef Buffer)
initFromAPInt	APFloat.cpp	/^void IEEEFloat::initFromAPInt(const fltSemantics *Sem, const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const fltSemantics * Sem,const APInt & api)
initFromArray	APInt.cpp	/^void APInt::initFromArray(ArrayRef<uint64_t> bigVal) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(ArrayRef<uint64_t> bigVal)
initFromDoubleAPInt	APFloat.cpp	/^void IEEEFloat::initFromDoubleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
initFromF80LongDoubleAPInt	APFloat.cpp	/^void IEEEFloat::initFromF80LongDoubleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
initFromFloatAPInt	APFloat.cpp	/^void IEEEFloat::initFromFloatAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
initFromHalfAPInt	APFloat.cpp	/^void IEEEFloat::initFromHalfAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
initFromPPCDoubleDoubleAPInt	APFloat.cpp	/^void IEEEFloat::initFromPPCDoubleDoubleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
initFromQuadrupleAPInt	APFloat.cpp	/^void IEEEFloat::initFromQuadrupleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
initSlowCase	APInt.cpp	/^void APInt::initSlowCase(const APInt& that) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & that)
initSlowCase	APInt.cpp	/^void APInt::initSlowCase(uint64_t val, bool isSigned) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(uint64_t val,bool isSigned)
initialize	APFloat.cpp	/^void IEEEFloat::initialize(const fltSemantics *ourSemantics) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const fltSemantics * ourSemantics)
initializeMutex	ManagedStatic.cpp	/^static void initializeMutex() {$/;"	kind:f	typeref:typename:void	file:	signature:()
input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex16>::input(StringRef Scalar, void *, Hex16 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex16 & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex32>::input(StringRef Scalar, void *, Hex32 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex32 & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex64>::input(StringRef Scalar, void *, Hex64 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex64 & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<Hex8>::input(StringRef Scalar, void *, Hex8 &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,Hex8 & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<StringRef>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,StringRef & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<bool>::input(StringRef Scalar, void *, bool &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,bool & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<double>::input(StringRef Scalar, void *, double &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,double & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<float>::input(StringRef Scalar, void *, float &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,float & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<int16_t>::input(StringRef Scalar, void *, int16_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int16_t & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<int32_t>::input(StringRef Scalar, void *, int32_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int32_t & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<int64_t>::input(StringRef Scalar, void *, int64_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int64_t & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<int8_t>::input(StringRef Scalar, void *, int8_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,int8_t & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<std::string>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits::string	typeref:typename:StringRef	signature:(StringRef Scalar,void *,std::string & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint16_t>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint16_t & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint32_t>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint32_t & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint64_t>::input(StringRef Scalar, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint64_t & Val)
input	YAMLTraits.cpp	/^StringRef ScalarTraits<uint8_t>::input(StringRef Scalar, void *, uint8_t &Val) {$/;"	kind:f	class:ScalarTraits	typeref:typename:StringRef	signature:(StringRef Scalar,void *,uint8_t & Val)
insert_imp_big	SmallPtrSet.cpp	/^SmallPtrSetImplBase::insert_imp_big(const void *Ptr) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:std::pair<const void * const *,bool>	signature:(const void * Ptr)
install_fatal_error_handler	ErrorHandling.cpp	/^void llvm::install_fatal_error_handler(fatal_error_handler_t handler,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(fatal_error_handler_t handler,void * user_data)
instance	Options.cpp	/^OptionRegistry &OptionRegistry::instance() { return *OR; }$/;"	kind:f	class:OptionRegistry	typeref:typename:OptionRegistry &	signature:()
intern	StringPool.cpp	/^PooledStringPtr StringPool::intern(StringRef Key) {$/;"	kind:f	class:StringPool	typeref:typename:PooledStringPtr	signature:(StringRef Key)
interpretDecimal	APFloat.cpp	/^interpretDecimal(StringRef::iterator begin, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:void	file:	signature:(StringRef::iterator begin,StringRef::iterator end,decimalInfo * D)
isArch16Bit	Triple.cpp	/^bool Triple::isArch16Bit() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
isArch32Bit	Triple.cpp	/^bool Triple::isArch32Bit() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
isArch64Bit	Triple.cpp	/^bool Triple::isArch64Bit() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
isAtLineEnd	LineIterator.cpp	/^static bool isAtLineEnd(const char *P) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const char * P)
isAvailable	Compression.cpp	/^bool zlib::isAvailable() { return false; }$/;"	kind:f	class:zlib	typeref:typename:bool	signature:()
isAvailable	Compression.cpp	/^bool zlib::isAvailable() { return true; }$/;"	kind:f	class:zlib	typeref:typename:bool	signature:()
isBlankOrBreak	YAMLParser.cpp	/^  bool isBlankOrBreak(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(StringRef::iterator Position)
isBlankOrBreak	YAMLParser.cpp	/^bool Scanner::isBlankOrBreak(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(StringRef::iterator Position)
isCpuIdSupported	Host.cpp	/^static bool isCpuIdSupported() {$/;"	kind:f	typeref:typename:bool	file:	signature:()
isCurrentDebugType	Debug.cpp	/^bool isCurrentDebugType(const char *DebugType) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(const char * DebugType)
isDenormal	APFloat.cpp	/^bool IEEEFloat::isDenormal() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
isExponentChar	FileUtilities.cpp	/^static bool isExponentChar(char C) {$/;"	kind:f	typeref:typename:bool	file:	signature:(char C)
isGrouping	CommandLine.cpp	/^static inline bool isGrouping(const Option *O) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const Option * O)
isInteger	APFloat.cpp	/^bool IEEEFloat::isInteger() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
isLargest	APFloat.cpp	/^bool IEEEFloat::isLargest() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
isLegalUTF8	ConvertUTF.cpp	/^static Boolean isLegalUTF8(const UTF8 *source, int length) {$/;"	kind:f	namespace:llvm	typeref:typename:Boolean	file:	signature:(const UTF8 * source,int length)
isLegalUTF8Sequence	ConvertUTF.cpp	/^Boolean isLegalUTF8Sequence(const UTF8 *source, const UTF8 *sourceEnd) {$/;"	kind:f	namespace:llvm	typeref:typename:Boolean	signature:(const UTF8 * source,const UTF8 * sourceEnd)
isLegalUTF8String	ConvertUTF.cpp	/^Boolean isLegalUTF8String(const UTF8 **source, const UTF8 *sourceEnd) {$/;"	kind:f	namespace:llvm	typeref:typename:Boolean	signature:(const UTF8 ** source,const UTF8 * sourceEnd)
isLiteralERE	Regex.cpp	/^bool Regex::isLiteralERE(StringRef Str) {$/;"	kind:f	class:Regex	typeref:typename:bool	signature:(StringRef Str)
isLittleEndian	Triple.cpp	/^bool Triple::isLittleEndian() const {$/;"	kind:f	class:Triple	typeref:typename:bool	signature:() const
isNonASCII	SourceMgr.cpp	/^static bool isNonASCII(char c) {$/;"	kind:f	typeref:typename:bool	file:	signature:(char c)
isNumberChar	FileUtilities.cpp	/^static bool isNumberChar(char C) {$/;"	kind:f	typeref:typename:bool	file:	signature:(char C)
isPrefixedHexStyle	NativeFormatting.cpp	/^bool llvm::isPrefixedHexStyle(HexPrintStyle S) {$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(HexPrintStyle S)
isPrefixedOrGrouping	CommandLine.cpp	/^static inline bool isPrefixedOrGrouping(const Option *O) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const Option * O)
isPrint	Locale.cpp	/^bool isPrint(int UCS) {$/;"	kind:f	namespace:llvm::sys::locale	typeref:typename:bool	signature:(int UCS)
isPrintable	Unicode.cpp	/^bool isPrintable(int UCS) {$/;"	kind:f	namespace:llvm::sys::unicode	typeref:typename:bool	signature:(int UCS)
isQuote	CommandLine.cpp	/^static bool isQuote(char C) { return C == '\\"' || C == '\\''; }$/;"	kind:f	typeref:typename:bool	file:	signature:(char C)
isRecoveringFromCrash	CrashRecoveryContext.cpp	/^bool CrashRecoveryContext::isRecoveringFromCrash() {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:bool	signature:()
isSignaling	APFloat.cpp	/^bool IEEEFloat::isSignaling() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
isSignedChar	FileUtilities.cpp	/^static bool isSignedChar(char C) {$/;"	kind:f	typeref:typename:bool	file:	signature:(char C)
isSignificandAllOnes	APFloat.cpp	/^bool IEEEFloat::isSignificandAllOnes() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
isSignificandAllZeros	APFloat.cpp	/^bool IEEEFloat::isSignificandAllZeros() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
isSmallest	APFloat.cpp	/^bool IEEEFloat::isSmallest() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
isSplat	APInt.cpp	/^bool APInt::isSplat(unsigned SplatSizeInBits) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(unsigned SplatSizeInBits) const
isValid	Regex.cpp	/^bool Regex::isValid(std::string &Error) {$/;"	kind:f	class:Regex	typeref:typename:bool	signature:(std::string & Error)
isValidKey	YAMLTraits.cpp	/^bool Input::MapHNode::isValidKey(StringRef Key) {$/;"	kind:f	class:Input::MapHNode	typeref:typename:bool	signature:(StringRef Key)
isWhitespace	CommandLine.cpp	/^static bool isWhitespace(char C) { return strchr(" \\t\\n\\r\\f\\v", C); }$/;"	kind:f	typeref:typename:bool	file:	signature:(char C)
is_absolute	Path.cpp	/^bool is_absolute(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
is_directory	Path.cpp	/^bool is_directory(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
is_directory	Path.cpp	/^std::error_code is_directory(const Twine &path, bool &result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & path,bool & result)
is_displayed	raw_ostream.cpp	/^bool raw_fd_ostream::is_displayed() const {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:bool	signature:() const
is_ns_hex_digit	YAMLParser.cpp	/^static bool is_ns_hex_digit(const char C) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const char C)
is_ns_word_char	YAMLParser.cpp	/^static bool is_ns_word_char(const char C) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const char C)
is_other	Path.cpp	/^bool is_other(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
is_other	Path.cpp	/^std::error_code is_other(const Twine &Path, bool &Result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Path,bool & Result)
is_regular_file	Path.cpp	/^bool is_regular_file(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
is_regular_file	Path.cpp	/^std::error_code is_regular_file(const Twine &path, bool &result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & path,bool & result)
is_relative	Path.cpp	/^bool is_relative(const Twine &path) { return !is_absolute(path); }$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
is_separator	Path.cpp	/^bool is_separator(char value) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(char value)
isinsets	regcomp.c	/^isinsets(struct re_guts *g, int c)$/;"	kind:f	typeref:typename:int	file:	signature:(struct re_guts * g,int c)
isinsets	regcomp.c	/^static int isinsets(struct re_guts *, int);$/;"	kind:p	typeref:typename:int	file:	signature:(struct re_guts *,int)
join	IntEqClasses.cpp	/^unsigned IntEqClasses::join(unsigned a, unsigned b) {$/;"	kind:f	class:IntEqClasses	typeref:typename:unsigned	signature:(unsigned a,unsigned b)
lastSigDigit	APFloat.cpp	/^  const char *lastSigDigit;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:const char *	file:	access:public
laststate	regex2.h	/^	sopno laststate;	\/* the final OEND *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
line_iterator	LineIterator.cpp	/^line_iterator::line_iterator(const MemoryBuffer &Buffer, bool SkipBlanks,$/;"	kind:f	class:line_iterator	signature:(const MemoryBuffer & Buffer,bool SkipBlanks,char CommentMarker)
line_iterator::advance	LineIterator.cpp	/^void line_iterator::advance() {$/;"	kind:f	class:line_iterator	typeref:typename:void	signature:()
line_iterator::line_iterator	LineIterator.cpp	/^line_iterator::line_iterator(const MemoryBuffer &Buffer, bool SkipBlanks,$/;"	kind:f	class:line_iterator	signature:(const MemoryBuffer & Buffer,bool SkipBlanks,char CommentMarker)
llvm	APFloat.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	ARMBuildAttrs.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	ARMWinEH.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Allocator.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Chrono.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	CommandLine.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	ConvertUTF.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	ConvertUTFWrapper.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Debug.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	DynamicLibrary.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Errno.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Error.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	FileOutputBuffer.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	IntervalMap.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	LEB128.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Locale.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	MD5.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	MathExtras.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Mutex.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Path.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	PrettyStackTrace.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	RWMutex.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	ScopedPrinter.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	SearchForAddressOfSpecialSymbol.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Signals.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	SpecialCaseList.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	ThreadLocal.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Unicode.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm	Unix/Unix.h	/^namespace llvm {$/;"	kind:n
llvm	Windows/WindowsSupport.h	/^namespace llvm {$/;"	kind:n
llvm	YAMLParser.cpp	/^namespace llvm {$/;"	kind:n	file:
llvm::AArch64::checkArchVersion	TargetParser.cpp	/^unsigned llvm::AArch64::checkArchVersion(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::AArch64::getArchAttr	TargetParser.cpp	/^unsigned llvm::AArch64::getArchAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned ArchKind)
llvm::AArch64::getArchExtFeature	TargetParser.cpp	/^StringRef llvm::AArch64::getArchExtFeature(StringRef ArchExt) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(StringRef ArchExt)
llvm::AArch64::getArchExtName	TargetParser.cpp	/^StringRef llvm::AArch64::getArchExtName(unsigned ArchExtKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchExtKind)
llvm::AArch64::getArchFeatures	TargetParser.cpp	/^bool llvm::AArch64::getArchFeatures(unsigned ArchKind,$/;"	kind:f	class:llvm::AArch64	typeref:typename:bool	signature:(unsigned ArchKind,std::vector<StringRef> & Features)
llvm::AArch64::getArchName	TargetParser.cpp	/^StringRef llvm::AArch64::getArchName(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchKind)
llvm::AArch64::getCPUAttr	TargetParser.cpp	/^StringRef llvm::AArch64::getCPUAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchKind)
llvm::AArch64::getCanonicalArchName	TargetParser.cpp	/^StringRef llvm::AArch64::getCanonicalArchName(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(StringRef Arch)
llvm::AArch64::getDefaultCPU	TargetParser.cpp	/^StringRef llvm::AArch64::getDefaultCPU(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(StringRef Arch)
llvm::AArch64::getDefaultExtensions	TargetParser.cpp	/^unsigned llvm::AArch64::getDefaultExtensions(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
llvm::AArch64::getDefaultFPU	TargetParser.cpp	/^unsigned llvm::AArch64::getDefaultFPU(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
llvm::AArch64::getExtensionFeatures	TargetParser.cpp	/^bool llvm::AArch64::getExtensionFeatures(unsigned Extensions,$/;"	kind:f	class:llvm::AArch64	typeref:typename:bool	signature:(unsigned Extensions,std::vector<StringRef> & Features)
llvm::AArch64::getFPUFeatures	TargetParser.cpp	/^bool llvm::AArch64::getFPUFeatures(unsigned FPUKind,$/;"	kind:f	class:llvm::AArch64	typeref:typename:bool	signature:(unsigned FPUKind,std::vector<StringRef> & Features)
llvm::AArch64::getFPUName	TargetParser.cpp	/^StringRef llvm::AArch64::getFPUName(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned FPUKind)
llvm::AArch64::getFPUNeonSupportLevel	TargetParser.cpp	/^unsigned llvm::AArch64::getFPUNeonSupportLevel(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned FPUKind)
llvm::AArch64::getFPURestriction	TargetParser.cpp	/^unsigned llvm::AArch64::getFPURestriction(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned FPUKind)
llvm::AArch64::getFPUVersion	TargetParser.cpp	/^unsigned llvm::AArch64::getFPUVersion(unsigned FPUKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(unsigned FPUKind)
llvm::AArch64::getSubArch	TargetParser.cpp	/^StringRef llvm::AArch64::getSubArch(unsigned ArchKind) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:StringRef	signature:(unsigned ArchKind)
llvm::AArch64::parseArch	TargetParser.cpp	/^unsigned llvm::AArch64::parseArch(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::AArch64::parseArchEndian	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchEndian(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::AArch64::parseArchExt	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchExt(StringRef ArchExt) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef ArchExt)
llvm::AArch64::parseArchISA	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchISA(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::AArch64::parseArchProfile	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchProfile(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::AArch64::parseArchVersion	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchVersion(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::AArch64::parseCPUArch	TargetParser.cpp	/^unsigned llvm::AArch64::parseCPUArch(StringRef CPU) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef CPU)
llvm::AArch64::parseFPU	TargetParser.cpp	/^unsigned llvm::AArch64::parseFPU(StringRef FPU) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef FPU)
llvm::APFloat::APFloat	APFloat.cpp	/^APFloat::APFloat(const fltSemantics &Semantics, StringRef S)$/;"	kind:f	class:llvm::APFloat	signature:(const fltSemantics & Semantics,StringRef S)
llvm::APFloat::Storage::Storage	APFloat.cpp	/^APFloat::Storage::Storage(IEEEFloat F, const fltSemantics &Semantics) {$/;"	kind:f	class:llvm::APFloat::Storage	signature:(IEEEFloat F,const fltSemantics & Semantics)
llvm::APFloat::convert	APFloat.cpp	/^APFloat::opStatus APFloat::convert(const fltSemantics &ToSemantics,$/;"	kind:f	class:llvm::APFloat	typeref:typename:APFloat::opStatus	signature:(const fltSemantics & ToSemantics,roundingMode RM,bool * losesInfo)
llvm::APFloat::convertFromString	APFloat.cpp	/^APFloat::opStatus APFloat::convertFromString(StringRef Str, roundingMode RM) {$/;"	kind:f	class:llvm::APFloat	typeref:typename:APFloat::opStatus	signature:(StringRef Str,roundingMode RM)
llvm::APFloat::getAllOnesValue	APFloat.cpp	/^APFloat APFloat::getAllOnesValue(unsigned BitWidth, bool isIEEE) {$/;"	kind:f	class:llvm::APFloat	typeref:typename:APFloat	signature:(unsigned BitWidth,bool isIEEE)
llvm::APFloatBase::Bogus	APFloat.cpp	/^  const fltSemantics APFloatBase::Bogus = {0, 0, 0, 0};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
llvm::APFloatBase::IEEEdouble	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEdouble = {1023, -1022, 53, 64};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
llvm::APFloatBase::IEEEhalf	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEhalf = {15, -14, 11, 16};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
llvm::APFloatBase::IEEEquad	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEquad = {16383, -16382, 113, 128};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
llvm::APFloatBase::IEEEsingle	APFloat.cpp	/^  const fltSemantics APFloatBase::IEEEsingle = {127, -126, 24, 32};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
llvm::APFloatBase::PPCDoubleDouble	APFloat.cpp	/^  const fltSemantics APFloatBase::PPCDoubleDouble = {0, 0, 0, 0};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
llvm::APFloatBase::getSizeInBits	APFloat.cpp	/^  unsigned APFloatBase::getSizeInBits(const fltSemantics &Sem) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:unsigned	signature:(const fltSemantics & Sem)
llvm::APFloatBase::semanticsMaxExponent	APFloat.cpp	/^  APFloatBase::semanticsMaxExponent(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:APFloatBase::ExponentType	signature:(const fltSemantics & semantics)
llvm::APFloatBase::semanticsMinExponent	APFloat.cpp	/^  APFloatBase::semanticsMinExponent(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:APFloatBase::ExponentType	signature:(const fltSemantics & semantics)
llvm::APFloatBase::semanticsPrecision	APFloat.cpp	/^  unsigned int APFloatBase::semanticsPrecision(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:unsigned int	signature:(const fltSemantics & semantics)
llvm::APFloatBase::semanticsSizeInBits	APFloat.cpp	/^  unsigned int APFloatBase::semanticsSizeInBits(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:unsigned int	signature:(const fltSemantics & semantics)
llvm::APFloatBase::x87DoubleExtended	APFloat.cpp	/^  const fltSemantics APFloatBase::x87DoubleExtended = {16383, -16382, 64, 80};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
llvm::APIntOps::GreatestCommonDivisor	APInt.cpp	/^APInt llvm::APIntOps::GreatestCommonDivisor(const APInt& API1,$/;"	kind:f	class:llvm::APIntOps	typeref:typename:APInt	signature:(const APInt & API1,const APInt & API2)
llvm::APIntOps::RoundDoubleToAPInt	APInt.cpp	/^APInt llvm::APIntOps::RoundDoubleToAPInt(double Double, unsigned width) {$/;"	kind:f	class:llvm::APIntOps	typeref:typename:APInt	signature:(double Double,unsigned width)
llvm::APIntOps::RoundDoubleToAPInt::__anon56889252010a::D	APInt.cpp	/^    double D;$/;"	kind:m	union:llvm::APIntOps::RoundDoubleToAPInt::__anon56889252010a	typeref:typename:double	file:	access:public
llvm::APIntOps::RoundDoubleToAPInt::__anon56889252010a::I	APInt.cpp	/^    uint64_t I;$/;"	kind:m	union:llvm::APIntOps::RoundDoubleToAPInt::__anon56889252010a	typeref:typename:uint64_t	file:	access:public
llvm::ARM	ARMWinEH.cpp	/^namespace ARM {$/;"	kind:n	namespace:llvm	file:
llvm::ARM::WinEH	ARMWinEH.cpp	/^namespace WinEH {$/;"	kind:n	namespace:llvm::ARM	file:
llvm::ARM::WinEH::SavedRegisterMask	ARMWinEH.cpp	/^std::pair<uint16_t, uint32_t> SavedRegisterMask(const RuntimeFunction &RF) {$/;"	kind:f	namespace:llvm::ARM::WinEH	typeref:typename:std::pair<uint16_t,uint32_t>	signature:(const RuntimeFunction & RF)
llvm::ARM::getArchAttr	TargetParser.cpp	/^unsigned llvm::ARM::getArchAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned ArchKind)
llvm::ARM::getArchExtFeature	TargetParser.cpp	/^StringRef llvm::ARM::getArchExtFeature(StringRef ArchExt) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(StringRef ArchExt)
llvm::ARM::getArchExtName	TargetParser.cpp	/^StringRef llvm::ARM::getArchExtName(unsigned ArchExtKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchExtKind)
llvm::ARM::getArchName	TargetParser.cpp	/^StringRef llvm::ARM::getArchName(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchKind)
llvm::ARM::getCPUAttr	TargetParser.cpp	/^StringRef llvm::ARM::getCPUAttr(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchKind)
llvm::ARM::getCanonicalArchName	TargetParser.cpp	/^StringRef llvm::ARM::getCanonicalArchName(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(StringRef Arch)
llvm::ARM::getDefaultCPU	TargetParser.cpp	/^StringRef llvm::ARM::getDefaultCPU(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(StringRef Arch)
llvm::ARM::getDefaultExtensions	TargetParser.cpp	/^unsigned llvm::ARM::getDefaultExtensions(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
llvm::ARM::getDefaultFPU	TargetParser.cpp	/^unsigned llvm::ARM::getDefaultFPU(StringRef CPU, unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef CPU,unsigned ArchKind)
llvm::ARM::getExtensionFeatures	TargetParser.cpp	/^bool llvm::ARM::getExtensionFeatures(unsigned Extensions,$/;"	kind:f	class:llvm::ARM	typeref:typename:bool	signature:(unsigned Extensions,std::vector<StringRef> & Features)
llvm::ARM::getFPUFeatures	TargetParser.cpp	/^bool llvm::ARM::getFPUFeatures(unsigned FPUKind,$/;"	kind:f	class:llvm::ARM	typeref:typename:bool	signature:(unsigned FPUKind,std::vector<StringRef> & Features)
llvm::ARM::getFPUName	TargetParser.cpp	/^StringRef llvm::ARM::getFPUName(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned FPUKind)
llvm::ARM::getFPUNeonSupportLevel	TargetParser.cpp	/^unsigned llvm::ARM::getFPUNeonSupportLevel(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned FPUKind)
llvm::ARM::getFPURestriction	TargetParser.cpp	/^unsigned llvm::ARM::getFPURestriction(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned FPUKind)
llvm::ARM::getFPUVersion	TargetParser.cpp	/^unsigned llvm::ARM::getFPUVersion(unsigned FPUKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(unsigned FPUKind)
llvm::ARM::getHWDivFeatures	TargetParser.cpp	/^bool llvm::ARM::getHWDivFeatures(unsigned HWDivKind,$/;"	kind:f	class:llvm::ARM	typeref:typename:bool	signature:(unsigned HWDivKind,std::vector<StringRef> & Features)
llvm::ARM::getHWDivName	TargetParser.cpp	/^StringRef llvm::ARM::getHWDivName(unsigned HWDivKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned HWDivKind)
llvm::ARM::getSubArch	TargetParser.cpp	/^StringRef llvm::ARM::getSubArch(unsigned ArchKind) {$/;"	kind:f	class:llvm::ARM	typeref:typename:StringRef	signature:(unsigned ArchKind)
llvm::ARM::parseArch	TargetParser.cpp	/^unsigned llvm::ARM::parseArch(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::ARM::parseArchEndian	TargetParser.cpp	/^unsigned llvm::ARM::parseArchEndian(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::ARM::parseArchExt	TargetParser.cpp	/^unsigned llvm::ARM::parseArchExt(StringRef ArchExt) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef ArchExt)
llvm::ARM::parseArchISA	TargetParser.cpp	/^unsigned llvm::ARM::parseArchISA(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::ARM::parseArchProfile	TargetParser.cpp	/^unsigned llvm::ARM::parseArchProfile(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::ARM::parseArchVersion	TargetParser.cpp	/^unsigned llvm::ARM::parseArchVersion(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
llvm::ARM::parseCPUArch	TargetParser.cpp	/^unsigned llvm::ARM::parseCPUArch(StringRef CPU) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef CPU)
llvm::ARM::parseFPU	TargetParser.cpp	/^unsigned llvm::ARM::parseFPU(StringRef FPU) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef FPU)
llvm::ARM::parseHWDiv	TargetParser.cpp	/^unsigned llvm::ARM::parseHWDiv(StringRef HWDiv) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef HWDiv)
llvm::ARMBuildAttrs	ARMBuildAttrs.cpp	/^namespace ARMBuildAttrs {$/;"	kind:n	namespace:llvm	file:
llvm::ARMBuildAttrs::AttrTypeAsString	ARMBuildAttrs.cpp	/^StringRef AttrTypeAsString(AttrType Attr, bool HasTagPrefix) {$/;"	kind:f	namespace:llvm::ARMBuildAttrs	typeref:typename:StringRef	signature:(AttrType Attr,bool HasTagPrefix)
llvm::ARMBuildAttrs::AttrTypeAsString	ARMBuildAttrs.cpp	/^StringRef AttrTypeAsString(unsigned Attr, bool HasTagPrefix) {$/;"	kind:f	namespace:llvm::ARMBuildAttrs	typeref:typename:StringRef	signature:(unsigned Attr,bool HasTagPrefix)
llvm::ARMBuildAttrs::AttrTypeFromString	ARMBuildAttrs.cpp	/^int AttrTypeFromString(StringRef Tag) {$/;"	kind:f	namespace:llvm::ARMBuildAttrs	typeref:typename:int	signature:(StringRef Tag)
llvm::AreStatisticsEnabled	Statistic.cpp	/^bool llvm::AreStatisticsEnabled() {$/;"	kind:f	class:llvm	typeref:typename:bool	signature:()
llvm::CallBacksToRun	Signals.cpp	/^    CallBacksToRun;$/;"	kind:v	namespace:llvm	typeref:typename:ManagedStatic<std::vector<std::pair<void (*)(void *),void * >>>	file:
llvm::CheckBitcodeOutputToConsole	SystemUtils.cpp	/^bool llvm::CheckBitcodeOutputToConsole(raw_ostream &stream_to_check,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(raw_ostream & stream_to_check,bool print_warning)
llvm::ConvertCodePointToUTF8	ConvertUTFWrapper.cpp	/^bool ConvertCodePointToUTF8(unsigned Source, char *&ResultPtr) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(unsigned Source,char * & ResultPtr)
llvm::ConvertUTF16toUTF32	ConvertUTF.cpp	/^ConversionResult ConvertUTF16toUTF32 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF16 ** sourceStart,const UTF16 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags)
llvm::ConvertUTF16toUTF8	ConvertUTF.cpp	/^ConversionResult ConvertUTF16toUTF8 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF16 ** sourceStart,const UTF16 * sourceEnd,UTF8 ** targetStart,UTF8 * targetEnd,ConversionFlags flags)
llvm::ConvertUTF32toUTF16	ConvertUTF.cpp	/^ConversionResult ConvertUTF32toUTF16 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF32 ** sourceStart,const UTF32 * sourceEnd,UTF16 ** targetStart,UTF16 * targetEnd,ConversionFlags flags)
llvm::ConvertUTF32toUTF8	ConvertUTF.cpp	/^ConversionResult ConvertUTF32toUTF8 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF32 ** sourceStart,const UTF32 * sourceEnd,UTF8 ** targetStart,UTF8 * targetEnd,ConversionFlags flags)
llvm::ConvertUTF8toUTF16	ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF16 ($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF16 ** targetStart,UTF16 * targetEnd,ConversionFlags flags)
llvm::ConvertUTF8toUTF32	ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF32(const UTF8 **sourceStart,$/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags)
llvm::ConvertUTF8toUTF32Impl	ConvertUTF.cpp	/^static ConversionResult ConvertUTF8toUTF32Impl($/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	file:	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags,Boolean InputIsPartial)
llvm::ConvertUTF8toUTF32Partial	ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF32Partial(const UTF8 **sourceStart,$/;"	kind:f	namespace:llvm	typeref:typename:ConversionResult	signature:(const UTF8 ** sourceStart,const UTF8 * sourceEnd,UTF32 ** targetStart,UTF32 * targetEnd,ConversionFlags flags)
llvm::ConvertUTF8toWide	ConvertUTFWrapper.cpp	/^bool ConvertUTF8toWide(const char *Source, std::wstring &Result) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(const char * Source,std::wstring & Result)
llvm::ConvertUTF8toWide	ConvertUTFWrapper.cpp	/^bool ConvertUTF8toWide(llvm::StringRef Source, std::wstring &Result) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(llvm::StringRef Source,std::wstring & Result)
llvm::ConvertUTF8toWide	ConvertUTFWrapper.cpp	/^bool ConvertUTF8toWide(unsigned WideCharWidth, llvm::StringRef Source,$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(unsigned WideCharWidth,llvm::StringRef Source,char * & ResultPtr,const UTF8 * & ErrorPtr)
llvm::ConvertUTF8toWideInternal	ConvertUTFWrapper.cpp	/^static inline bool ConvertUTF8toWideInternal(llvm::StringRef Source,$/;"	kind:f	namespace:llvm	typeref:typename:bool	file:	signature:(llvm::StringRef Source,TResult & Result)
llvm::CreateInfoOutputFile	Timer.cpp	/^std::unique_ptr<raw_fd_ostream> llvm::CreateInfoOutputFile() {$/;"	kind:f	class:llvm	typeref:typename:std::unique_ptr<raw_fd_ostream>	signature:()
llvm::CurrentDebugType	Debug.cpp	/^static ManagedStatic<std::vector<std::string>> CurrentDebugType;$/;"	kind:v	namespace:llvm	typeref:typename:ManagedStatic<std::vector<std::string>>	file:
llvm::DOT::EscapeString	GraphWriter.cpp	/^std::string llvm::DOT::EscapeString(const std::string &Label) {$/;"	kind:f	class:llvm::DOT	typeref:typename:std::string	signature:(const std::string & Label)
llvm::DOT::getColorString	GraphWriter.cpp	/^StringRef llvm::DOT::getColorString(unsigned ColorNumber) {$/;"	kind:f	class:llvm::DOT	typeref:typename:StringRef	signature:(unsigned ColorNumber)
llvm::DebugFlag	Debug.cpp	/^bool DebugFlag = false;$/;"	kind:v	namespace:llvm	typeref:typename:bool
llvm::DiffFilesWithTolerance	FileUtilities.cpp	/^int llvm::DiffFilesWithTolerance(StringRef NameA,$/;"	kind:f	class:llvm	typeref:typename:int	signature:(StringRef NameA,StringRef NameB,double AbsTol,double RelTol,std::string * Error)
llvm::DisplayGraph	GraphWriter.cpp	/^bool llvm::DisplayGraph(StringRef FilenameRef, bool wait,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef FilenameRef,bool wait,GraphProgram::Name program)
llvm::ECError::ID	Error.cpp	/^char ECError::ID = 0;$/;"	kind:m	class:llvm::ECError	typeref:typename:char
llvm::EnableABIBreakingChecks	Error.cpp	/^int EnableABIBreakingChecks;$/;"	kind:v	namespace:llvm	typeref:typename:int
llvm::EnableDebugBuffering	Debug.cpp	/^bool llvm::EnableDebugBuffering = false;$/;"	kind:m	class:llvm	typeref:typename:bool
llvm::EnablePrettyStackTrace	PrettyStackTrace.cpp	/^void llvm::EnablePrettyStackTrace() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
llvm::EnableStatistics	Statistic.cpp	/^void llvm::EnableStatistics(bool PrintOnExit) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(bool PrintOnExit)
llvm::ErrorInfoBase::ID	Error.cpp	/^char ErrorInfoBase::ID = 0;$/;"	kind:m	class:llvm::ErrorInfoBase	typeref:typename:char
llvm::ErrorInfoBase::anchor	Error.cpp	/^void ErrorInfoBase::anchor() {}$/;"	kind:f	class:llvm::ErrorInfoBase	typeref:typename:void	signature:()
llvm::ErrorList::ID	Error.cpp	/^char ErrorList::ID = 0;$/;"	kind:m	class:llvm::ErrorList	typeref:typename:char
llvm::ErrorList::convertToErrorCode	Error.cpp	/^std::error_code ErrorList::convertToErrorCode() const {$/;"	kind:f	class:llvm::ErrorList	typeref:typename:std::error_code	signature:() const
llvm::FileOutputBuffer::FileOutputBuffer	FileOutputBuffer.cpp	/^FileOutputBuffer::FileOutputBuffer(std::unique_ptr<mapped_file_region> R,$/;"	kind:f	class:llvm::FileOutputBuffer	signature:(std::unique_ptr<mapped_file_region> R,StringRef Path,StringRef TmpPath)
llvm::FileOutputBuffer::commit	FileOutputBuffer.cpp	/^std::error_code FileOutputBuffer::commit() {$/;"	kind:f	class:llvm::FileOutputBuffer	typeref:typename:std::error_code	signature:()
llvm::FileOutputBuffer::create	FileOutputBuffer.cpp	/^FileOutputBuffer::create(StringRef FilePath, size_t Size, unsigned Flags) {$/;"	kind:f	class:llvm::FileOutputBuffer	typeref:typename:ErrorOr<std::unique_ptr<FileOutputBuffer>>	signature:(StringRef FilePath,size_t Size,unsigned Flags)
llvm::FileOutputBuffer::~FileOutputBuffer	FileOutputBuffer.cpp	/^FileOutputBuffer::~FileOutputBuffer() {$/;"	kind:f	class:llvm::FileOutputBuffer	signature:()
llvm::HUerrBound	APFloat.cpp	/^HUerrBound(bool inexactMultiply, unsigned int HUerr1, unsigned int HUerr2)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(bool inexactMultiply,unsigned int HUerr1,unsigned int HUerr2)
llvm::IntervalMapImpl	IntervalMap.cpp	/^namespace IntervalMapImpl {$/;"	kind:n	namespace:llvm	file:
llvm::IntervalMapImpl::Path::getLeftSibling	IntervalMap.cpp	/^NodeRef Path::getLeftSibling(unsigned Level) const {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:NodeRef	signature:(unsigned Level) const
llvm::IntervalMapImpl::Path::getRightSibling	IntervalMap.cpp	/^NodeRef Path::getRightSibling(unsigned Level) const {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:NodeRef	signature:(unsigned Level) const
llvm::IntervalMapImpl::Path::moveLeft	IntervalMap.cpp	/^void Path::moveLeft(unsigned Level) {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:void	signature:(unsigned Level)
llvm::IntervalMapImpl::Path::moveRight	IntervalMap.cpp	/^void Path::moveRight(unsigned Level) {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:void	signature:(unsigned Level)
llvm::IntervalMapImpl::Path::replaceRoot	IntervalMap.cpp	/^void Path::replaceRoot(void *Root, unsigned Size, IdxPair Offsets) {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:void	signature:(void * Root,unsigned Size,IdxPair Offsets)
llvm::IntervalMapImpl::distribute	IntervalMap.cpp	/^IdxPair distribute(unsigned Nodes, unsigned Elements, unsigned Capacity,$/;"	kind:f	namespace:llvm::IntervalMapImpl	typeref:typename:IdxPair	signature:(unsigned Nodes,unsigned Elements,unsigned Capacity,const unsigned * CurSize,unsigned NewSize[],unsigned Position,bool Grow)
llvm::MD5::MD5	MD5.cpp	/^MD5::MD5()$/;"	kind:f	class:llvm::MD5	signature:()
llvm::MD5::body	MD5.cpp	/^const uint8_t *MD5::body(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:llvm::MD5	typeref:typename:const uint8_t *	signature:(ArrayRef<uint8_t> Data)
llvm::MD5::final	MD5.cpp	/^void MD5::final(MD5Result &Result) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(MD5Result & Result)
llvm::MD5::hash	MD5.cpp	/^std::array<uint8_t, 16> MD5::hash(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:llvm::MD5	typeref:typename:std::array<uint8_t,16>	signature:(ArrayRef<uint8_t> Data)
llvm::MD5::stringifyResult	MD5.cpp	/^void MD5::stringifyResult(MD5Result &Result, SmallString<32> &Str) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(MD5Result & Result,SmallString<32> & Str)
llvm::MD5::update	MD5.cpp	/^void MD5::update(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(ArrayRef<uint8_t> Data)
llvm::MD5::update	MD5.cpp	/^void MD5::update(StringRef Str) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(StringRef Str)
llvm::MutexImpl::MutexImpl	Mutex.cpp	/^MutexImpl::MutexImpl( bool recursive) { }$/;"	kind:f	class:llvm::MutexImpl	signature:(bool recursive)
llvm::MutexImpl::MutexImpl	Mutex.cpp	/^MutexImpl::MutexImpl( bool recursive)$/;"	kind:f	class:llvm::MutexImpl	signature:(bool recursive)
llvm::MutexImpl::acquire	Mutex.cpp	/^MutexImpl::acquire()$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
llvm::MutexImpl::acquire	Mutex.cpp	/^bool MutexImpl::acquire() { return true; }$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
llvm::MutexImpl::release	Mutex.cpp	/^MutexImpl::release()$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
llvm::MutexImpl::release	Mutex.cpp	/^bool MutexImpl::release() { return true; }$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
llvm::MutexImpl::tryacquire	Mutex.cpp	/^MutexImpl::tryacquire()$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
llvm::MutexImpl::tryacquire	Mutex.cpp	/^bool MutexImpl::tryacquire() { return true; }$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
llvm::MutexImpl::~MutexImpl	Mutex.cpp	/^MutexImpl::~MutexImpl() { }$/;"	kind:f	class:llvm::MutexImpl	signature:()
llvm::MutexImpl::~MutexImpl	Mutex.cpp	/^MutexImpl::~MutexImpl()$/;"	kind:f	class:llvm::MutexImpl	signature:()
llvm::NaNL	APFloat.cpp	/^static const char NaNL[] = "nan";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
llvm::NaNU	APFloat.cpp	/^static const char NaNU[] = "NAN";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
llvm::PPCDoubleDoubleImpl	APFloat.cpp	/^  static const fltSemantics PPCDoubleDoubleImpl = {1023, -1022 + 53, 53 + 53,$/;"	kind:v	namespace:llvm	typeref:typename:const fltSemantics	file:
llvm::PrintRecyclerStats	Allocator.cpp	/^void PrintRecyclerStats(size_t Size,$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(size_t Size,size_t Align,size_t FreeListSize)
llvm::PrintStatistics	Statistic.cpp	/^void llvm::PrintStatistics() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
llvm::PrintStatistics	Statistic.cpp	/^void llvm::PrintStatistics(raw_ostream &OS) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & OS)
llvm::PrintStatisticsJSON	Statistic.cpp	/^void llvm::PrintStatisticsJSON(raw_ostream &OS) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & OS)
llvm::RWMutexImpl::RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::RWMutexImpl() { }$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
llvm::RWMutexImpl::RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::RWMutexImpl()$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
llvm::RWMutexImpl::reader_acquire	RWMutex.cpp	/^RWMutexImpl::reader_acquire()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::reader_acquire	RWMutex.cpp	/^bool RWMutexImpl::reader_acquire() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::reader_release	RWMutex.cpp	/^RWMutexImpl::reader_release()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::reader_release	RWMutex.cpp	/^bool RWMutexImpl::reader_release() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::writer_acquire	RWMutex.cpp	/^RWMutexImpl::writer_acquire()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::writer_acquire	RWMutex.cpp	/^bool RWMutexImpl::writer_acquire() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::writer_release	RWMutex.cpp	/^RWMutexImpl::writer_release()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::writer_release	RWMutex.cpp	/^bool RWMutexImpl::writer_release() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
llvm::RWMutexImpl::~RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::~RWMutexImpl() { }$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
llvm::RWMutexImpl::~RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::~RWMutexImpl()$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
llvm::RestorePrettyStackState	PrettyStackTrace.cpp	/^void llvm::RestorePrettyStackState(const void *Top) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const void * Top)
llvm::ReverseStackTrace	PrettyStackTrace.cpp	/^PrettyStackTraceEntry *ReverseStackTrace(PrettyStackTraceEntry *Head) {$/;"	kind:f	namespace:llvm	typeref:typename:PrettyStackTraceEntry *	signature:(PrettyStackTraceEntry * Head)
llvm::SavePrettyStackState	PrettyStackTrace.cpp	/^const void *llvm::SavePrettyStackState() {$/;"	kind:f	class:llvm	typeref:typename:const void *	signature:()
llvm::ScopedPrinter::printBinaryImpl	ScopedPrinter.cpp	/^void ScopedPrinter::printBinaryImpl(StringRef Label, StringRef Str,$/;"	kind:f	class:llvm::ScopedPrinter	typeref:typename:void	signature:(StringRef Label,StringRef Str,ArrayRef<uint8_t> Data,bool Block)
llvm::SearchForAddressOfSpecialSymbol	DynamicLibrary.cpp	/^void *SearchForAddressOfSpecialSymbol(const char* symbolName);$/;"	kind:p	namespace:llvm	typeref:typename:void *	file:	signature:(const char * symbolName)
llvm::SearchForAddressOfSpecialSymbol	SearchForAddressOfSpecialSymbol.cpp	/^void *SearchForAddressOfSpecialSymbol(const char* symbolName) {$/;"	kind:f	namespace:llvm	typeref:typename:void *	signature:(const char * symbolName)
llvm::SpecialCaseList::Entry	SpecialCaseList.cpp	/^struct SpecialCaseList::Entry {$/;"	kind:s	class:llvm::SpecialCaseList	file:
llvm::SpecialCaseList::Entry::RegEx	SpecialCaseList.cpp	/^  std::unique_ptr<Regex> RegEx;$/;"	kind:m	struct:llvm::SpecialCaseList::Entry	typeref:typename:std::unique_ptr<Regex>	file:	access:public
llvm::SpecialCaseList::Entry::Strings	SpecialCaseList.cpp	/^  StringSet<> Strings;$/;"	kind:m	struct:llvm::SpecialCaseList::Entry	typeref:typename:StringSet<>	file:	access:public
llvm::SpecialCaseList::Entry::match	SpecialCaseList.cpp	/^  bool match(StringRef Query) const {$/;"	kind:f	struct:llvm::SpecialCaseList::Entry	typeref:typename:bool	file:	access:public	signature:(StringRef Query) const
llvm::SpecialCaseList::SpecialCaseList	SpecialCaseList.cpp	/^SpecialCaseList::SpecialCaseList() : Entries(), Regexps(), IsCompiled(false) {}$/;"	kind:f	class:llvm::SpecialCaseList	signature:()
llvm::SpecialCaseList::compile	SpecialCaseList.cpp	/^void SpecialCaseList::compile() {$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:void	signature:()
llvm::SpecialCaseList::create	SpecialCaseList.cpp	/^SpecialCaseList::create(const std::vector<std::string> &Paths,$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:std::unique_ptr<SpecialCaseList>	signature:(const std::vector<std::string> & Paths,std::string & Error)
llvm::SpecialCaseList::create	SpecialCaseList.cpp	/^std::unique_ptr<SpecialCaseList> SpecialCaseList::create(const MemoryBuffer *MB,$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:std::unique_ptr<SpecialCaseList>	signature:(const MemoryBuffer * MB,std::string & Error)
llvm::SpecialCaseList::createOrDie	SpecialCaseList.cpp	/^SpecialCaseList::createOrDie(const std::vector<std::string> &Paths) {$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:std::unique_ptr<SpecialCaseList>	signature:(const std::vector<std::string> & Paths)
llvm::SpecialCaseList::inSection	SpecialCaseList.cpp	/^bool SpecialCaseList::inSection(StringRef Section, StringRef Query,$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:bool	signature:(StringRef Section,StringRef Query,StringRef Category) const
llvm::SpecialCaseList::parse	SpecialCaseList.cpp	/^bool SpecialCaseList::parse(const MemoryBuffer *MB, std::string &Error) {$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:bool	signature:(const MemoryBuffer * MB,std::string & Error)
llvm::SpecialCaseList::~SpecialCaseList	SpecialCaseList.cpp	/^SpecialCaseList::~SpecialCaseList() {}$/;"	kind:f	class:llvm::SpecialCaseList	signature:()
llvm::SplitString	StringExtras.cpp	/^void llvm::SplitString(StringRef Source,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(StringRef Source,SmallVectorImpl<StringRef> & OutFragments,StringRef Delimiters)
llvm::StrInStrNoCase	StringExtras.cpp	/^StringRef::size_type llvm::StrInStrNoCase(StringRef s1, StringRef s2) {$/;"	kind:f	class:llvm	typeref:typename:StringRef::size_type	signature:(StringRef s1,StringRef s2)
llvm::StringError::ID	Error.cpp	/^char StringError::ID = 0;$/;"	kind:m	class:llvm::StringError	typeref:typename:char
llvm::StringError::StringError	Error.cpp	/^StringError::StringError(const Twine &S, std::error_code EC)$/;"	kind:f	class:llvm::StringError	signature:(const Twine & S,std::error_code EC)
llvm::StringError::convertToErrorCode	Error.cpp	/^std::error_code StringError::convertToErrorCode() const {$/;"	kind:f	class:llvm::StringError	typeref:typename:std::error_code	signature:() const
llvm::StringError::log	Error.cpp	/^void StringError::log(raw_ostream &OS) const { OS << Msg; }$/;"	kind:f	class:llvm::StringError	typeref:typename:void	signature:(raw_ostream & OS) const
llvm::TK_Alias	YAMLParser.cpp	/^    TK_Alias,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_Anchor	YAMLParser.cpp	/^    TK_Anchor,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_BlockEnd	YAMLParser.cpp	/^    TK_BlockEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_BlockEntry	YAMLParser.cpp	/^    TK_BlockEntry,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_BlockMappingStart	YAMLParser.cpp	/^    TK_BlockMappingStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_BlockScalar	YAMLParser.cpp	/^    TK_BlockScalar,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_BlockSequenceStart	YAMLParser.cpp	/^    TK_BlockSequenceStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_DocumentEnd	YAMLParser.cpp	/^    TK_DocumentEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_DocumentStart	YAMLParser.cpp	/^    TK_DocumentStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_Error	YAMLParser.cpp	/^    TK_Error, \/\/ Uninitialized token.$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_FlowEntry	YAMLParser.cpp	/^    TK_FlowEntry,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_FlowMappingEnd	YAMLParser.cpp	/^    TK_FlowMappingEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_FlowMappingStart	YAMLParser.cpp	/^    TK_FlowMappingStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_FlowSequenceEnd	YAMLParser.cpp	/^    TK_FlowSequenceEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_FlowSequenceStart	YAMLParser.cpp	/^    TK_FlowSequenceStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_Key	YAMLParser.cpp	/^    TK_Key,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_Scalar	YAMLParser.cpp	/^    TK_Scalar,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_StreamEnd	YAMLParser.cpp	/^    TK_StreamEnd,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_StreamStart	YAMLParser.cpp	/^    TK_StreamStart,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_Tag	YAMLParser.cpp	/^    TK_Tag$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_TagDirective	YAMLParser.cpp	/^    TK_TagDirective,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_Value	YAMLParser.cpp	/^    TK_Value,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::TK_VersionDirective	YAMLParser.cpp	/^    TK_VersionDirective,$/;"	kind:e	enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::ThreadLocalImpl::ThreadLocalImpl	ThreadLocal.cpp	/^ThreadLocalImpl::ThreadLocalImpl() : data() { }$/;"	kind:f	class:llvm::ThreadLocalImpl	signature:()
llvm::ThreadLocalImpl::getInstance	ThreadLocal.cpp	/^void *ThreadLocalImpl::getInstance() {$/;"	kind:f	class:llvm::ThreadLocalImpl	typeref:typename:void *	signature:()
llvm::ThreadLocalImpl::removeInstance	ThreadLocal.cpp	/^void ThreadLocalImpl::removeInstance() {$/;"	kind:f	class:llvm::ThreadLocalImpl	typeref:typename:void	signature:()
llvm::ThreadLocalImpl::setInstance	ThreadLocal.cpp	/^void ThreadLocalImpl::setInstance(const void* d) {$/;"	kind:f	class:llvm::ThreadLocalImpl	typeref:typename:void	signature:(const void * d)
llvm::ThreadLocalImpl::~ThreadLocalImpl	ThreadLocal.cpp	/^ThreadLocalImpl::~ThreadLocalImpl() { }$/;"	kind:f	class:llvm::ThreadLocalImpl	signature:()
llvm::VK_CmdStart	GraphWriter.cpp	/^    VK_CmdStart$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
llvm::VK_Ghostview	GraphWriter.cpp	/^    VK_Ghostview,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
llvm::VK_None	GraphWriter.cpp	/^    VK_None,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
llvm::VK_OSXOpen	GraphWriter.cpp	/^    VK_OSXOpen,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
llvm::VK_XDGOpen	GraphWriter.cpp	/^    VK_XDGOpen,$/;"	kind:e	enum:llvm::DisplayGraph::ViewerKind	file:	access:public
llvm::c_str	Windows/WindowsSupport.h	/^c_str(SmallVectorImpl<T> &str) {$/;"	kind:f	namespace:llvm	typeref:typename:SmallVectorImpl<T>::const_pointer	signature:(SmallVectorImpl<T> & str)
llvm::cl	CommandLine.cpp	/^namespace cl {$/;"	kind:n	namespace:llvm	file:
llvm::cl::AllSubCommands	CommandLine.cpp	/^ManagedStatic<SubCommand> llvm::cl::AllSubCommands;$/;"	kind:m	class:llvm::cl	typeref:typename:ManagedStatic<SubCommand>
llvm::cl::GeneralCategory	CommandLine.cpp	/^OptionCategory llvm::cl::GeneralCategory("General options");$/;"	kind:m	class:llvm::cl	typeref:typename:OptionCategory
llvm::cl::TopLevelSubCommand	CommandLine.cpp	/^ManagedStatic<SubCommand> llvm::cl::TopLevelSubCommand;$/;"	kind:m	class:llvm::cl	typeref:typename:ManagedStatic<SubCommand>
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<bool>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<boolOrDefault>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<char>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<double>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<float>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<int>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<std::string>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<unsigned long long>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::basic_parser	CommandLine.cpp	/^template class basic_parser<unsigned>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::opt	CommandLine.cpp	/^template class opt<bool>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::opt	CommandLine.cpp	/^template class opt<char>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::opt	CommandLine.cpp	/^template class opt<int>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::opt	CommandLine.cpp	/^template class opt<std::string>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::cl::opt	CommandLine.cpp	/^template class opt<unsigned>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
llvm::combineLostFractions	APFloat.cpp	/^combineLostFractions(lostFraction moreSignificant,$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(lostFraction moreSignificant,lostFraction lessSignificant)
llvm::consumeSignedInteger	StringRef.cpp	/^bool llvm::consumeSignedInteger(StringRef &Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef & Str,unsigned Radix,long long & Result)
llvm::consumeUnsignedInteger	StringRef.cpp	/^bool llvm::consumeUnsignedInteger(StringRef &Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef & Str,unsigned Radix,unsigned long long & Result)
llvm::convertUTF16ToUTF8String	ConvertUTFWrapper.cpp	/^bool convertUTF16ToUTF8String(ArrayRef<UTF16> Src, std::string &Out)$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(ArrayRef<UTF16> Src,std::string & Out)
llvm::convertUTF16ToUTF8String	ConvertUTFWrapper.cpp	/^bool convertUTF16ToUTF8String(ArrayRef<char> SrcBytes, std::string &Out) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(ArrayRef<char> SrcBytes,std::string & Out)
llvm::convertUTF8ToUTF16String	ConvertUTFWrapper.cpp	/^bool convertUTF8ToUTF16String(StringRef SrcUTF8,$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(StringRef SrcUTF8,SmallVectorImpl<UTF16> & DstUTF16)
llvm::convertWideToUTF8	ConvertUTFWrapper.cpp	/^bool convertWideToUTF8(const std::wstring &Source, std::string &Result) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(const std::wstring & Source,std::string & Result)
llvm::createGraphFilename	GraphWriter.cpp	/^std::string llvm::createGraphFilename(const Twine &Name, int &FD) {$/;"	kind:f	class:llvm	typeref:typename:std::string	signature:(const Twine & Name,int & FD)
llvm::dbgs	Debug.cpp	/^  raw_ostream &dbgs() {$/;"	kind:f	namespace:llvm	typeref:typename:raw_ostream &	signature:()
llvm::dbgs	Debug.cpp	/^raw_ostream &llvm::dbgs() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
llvm::dbgs::dbgstream::dbgstream	Debug.cpp	/^    dbgstream() :$/;"	kind:f	struct:llvm::dbgs::dbgstream	file:	access:public	signature:()
llvm::dbgs::dbgstream::strm	Debug.cpp	/^    circular_raw_ostream strm;$/;"	kind:m	struct:llvm::dbgs::dbgstream	typeref:typename:circular_raw_ostream	file:	access:public
llvm::decDigitValue	APFloat.cpp	/^decDigitValue(unsigned int c)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(unsigned int c)
llvm::decimalInfo	APFloat.cpp	/^struct decimalInfo {$/;"	kind:s	namespace:llvm	file:
llvm::decimalInfo::exponent	APFloat.cpp	/^  int exponent;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:int	file:	access:public
llvm::decimalInfo::firstSigDigit	APFloat.cpp	/^  const char *firstSigDigit;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:const char *	file:	access:public
llvm::decimalInfo::lastSigDigit	APFloat.cpp	/^  const char *lastSigDigit;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:const char *	file:	access:public
llvm::decimalInfo::normalizedExponent	APFloat.cpp	/^  int normalizedExponent;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:int	file:	access:public
llvm::detail	APFloat.cpp	/^namespace detail {$/;"	kind:n	namespace:llvm	file:
llvm::detail	Allocator.cpp	/^namespace detail {$/;"	kind:n	namespace:llvm	file:
llvm::detail::DoubleAPFloat::DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(DoubleAPFloat &&RHS)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(DoubleAPFloat && RHS)
llvm::detail::DoubleAPFloat::DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const DoubleAPFloat &RHS)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const DoubleAPFloat & RHS)
llvm::detail::DoubleAPFloat::DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S)
llvm::detail::DoubleAPFloat::DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, APFloat &&First,$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,APFloat && First,APFloat && Second)
llvm::detail::DoubleAPFloat::DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, const APInt &I)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,const APInt & I)
llvm::detail::DoubleAPFloat::DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, integerPart I)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,integerPart I)
llvm::detail::DoubleAPFloat::DoubleAPFloat	APFloat.cpp	/^DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, uninitializedTag)$/;"	kind:f	class:llvm::detail::DoubleAPFloat	signature:(const fltSemantics & S,uninitializedTag)
llvm::detail::DoubleAPFloat::operator =	APFloat.cpp	/^DoubleAPFloat &DoubleAPFloat::operator=(const DoubleAPFloat &RHS) {$/;"	kind:f	class:llvm::detail::DoubleAPFloat	typeref:typename:DoubleAPFloat &	signature:(const DoubleAPFloat & RHS)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(IEEEFloat &&rhs) : semantics(&Bogus) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(IEEEFloat && rhs)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &Sem, const APInt &API) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & Sem,const APInt & API)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & ourSemantics)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, integerPart value) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & ourSemantics,integerPart value)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, uninitializedTag tag)$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(const fltSemantics & ourSemantics,uninitializedTag tag)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(double d) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(double d)
llvm::detail::IEEEFloat::IEEEFloat	APFloat.cpp	/^IEEEFloat::IEEEFloat(float f) {$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:(float f)
llvm::detail::IEEEFloat::Profile	APFloat.cpp	/^void IEEEFloat::Profile(FoldingSetNodeID &ID) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(FoldingSetNodeID & ID) const
llvm::detail::IEEEFloat::add	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::add(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
llvm::detail::IEEEFloat::addOrSubtract	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::addOrSubtract(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode,bool subtract)
llvm::detail::IEEEFloat::addOrSubtractSignificand	APFloat.cpp	/^lostFraction IEEEFloat::addOrSubtractSignificand(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(const IEEEFloat & rhs,bool subtract)
llvm::detail::IEEEFloat::addOrSubtractSpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::addOrSubtractSpecials(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,bool subtract)
llvm::detail::IEEEFloat::addSignificand	APFloat.cpp	/^integerPart IEEEFloat::addSignificand(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:integerPart	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::assign	APFloat.cpp	/^void IEEEFloat::assign(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::bitcastToAPInt	APFloat.cpp	/^APInt IEEEFloat::bitcastToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
llvm::detail::IEEEFloat::bitwiseIsEqual	APFloat.cpp	/^bool IEEEFloat::bitwiseIsEqual(const IEEEFloat &rhs) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(const IEEEFloat & rhs) const
llvm::detail::IEEEFloat::changeSign	APFloat.cpp	/^void IEEEFloat::changeSign() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
llvm::detail::IEEEFloat::clearSign	APFloat.cpp	/^void IEEEFloat::clearSign() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
llvm::detail::IEEEFloat::compare	APFloat.cpp	/^IEEEFloat::cmpResult IEEEFloat::compare(const IEEEFloat &rhs) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::cmpResult	signature:(const IEEEFloat & rhs) const
llvm::detail::IEEEFloat::compareAbsoluteValue	APFloat.cpp	/^IEEEFloat::compareAbsoluteValue(const IEEEFloat &rhs) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::cmpResult	signature:(const IEEEFloat & rhs) const
llvm::detail::IEEEFloat::convert	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convert(const fltSemantics &toSemantics,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const fltSemantics & toSemantics,roundingMode rounding_mode,bool * losesInfo)
llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertDoubleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertF80LongDoubleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
llvm::detail::IEEEFloat::convertFloatAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertFloatAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
llvm::detail::IEEEFloat::convertFromAPInt	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertFromAPInt(const APInt &Val, bool isSigned,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const APInt & Val,bool isSigned,roundingMode rounding_mode)
llvm::detail::IEEEFloat::convertFromDecimalString	APFloat.cpp	/^IEEEFloat::convertFromDecimalString(StringRef str, roundingMode rounding_mode) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(StringRef str,roundingMode rounding_mode)
llvm::detail::IEEEFloat::convertFromHexadecimalString	APFloat.cpp	/^IEEEFloat::convertFromHexadecimalString(StringRef s,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(StringRef s,roundingMode rounding_mode)
llvm::detail::IEEEFloat::convertFromSignExtendedInteger	APFloat.cpp	/^IEEEFloat::convertFromSignExtendedInteger(const integerPart *src,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * src,unsigned int srcCount,bool isSigned,roundingMode rounding_mode)
llvm::detail::IEEEFloat::convertFromString	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertFromString(StringRef str,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(StringRef str,roundingMode rounding_mode)
llvm::detail::IEEEFloat::convertFromStringSpecials	APFloat.cpp	/^bool IEEEFloat::convertFromStringSpecials(StringRef str) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(StringRef str)
llvm::detail::IEEEFloat::convertFromUnsignedParts	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertFromUnsignedParts($/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * src,unsigned int srcCount,roundingMode rounding_mode)
llvm::detail::IEEEFloat::convertFromZeroExtendedInteger	APFloat.cpp	/^IEEEFloat::convertFromZeroExtendedInteger(const integerPart *parts,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * parts,unsigned int width,bool isSigned,roundingMode rounding_mode)
llvm::detail::IEEEFloat::convertHalfAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertHalfAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
llvm::detail::IEEEFloat::convertNormalToHexString	APFloat.cpp	/^char *IEEEFloat::convertNormalToHexString(char *dst, unsigned int hexDigits,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:char *	signature:(char * dst,unsigned int hexDigits,bool upperCase,roundingMode rounding_mode) const
llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt	APFloat.cpp	/^APInt IEEEFloat::convertQuadrupleAPFloatToAPInt() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:APInt	signature:() const
llvm::detail::IEEEFloat::convertToDouble	APFloat.cpp	/^double IEEEFloat::convertToDouble() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:double	signature:() const
llvm::detail::IEEEFloat::convertToFloat	APFloat.cpp	/^float IEEEFloat::convertToFloat() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:float	signature:() const
llvm::detail::IEEEFloat::convertToHexString	APFloat.cpp	/^unsigned int IEEEFloat::convertToHexString(char *dst, unsigned int hexDigits,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:(char * dst,unsigned int hexDigits,bool upperCase,roundingMode rounding_mode) const
llvm::detail::IEEEFloat::convertToInteger	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertToInteger(APSInt &result,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(APSInt & result,roundingMode rounding_mode,bool * isExact) const
llvm::detail::IEEEFloat::convertToInteger	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertToInteger(integerPart *parts,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(integerPart * parts,unsigned int width,bool isSigned,roundingMode rounding_mode,bool * isExact) const
llvm::detail::IEEEFloat::convertToSignExtendedInteger	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::convertToSignExtendedInteger($/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(integerPart * parts,unsigned int width,bool isSigned,roundingMode rounding_mode,bool * isExact) const
llvm::detail::IEEEFloat::copySign	APFloat.cpp	/^void IEEEFloat::copySign(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::copySignificand	APFloat.cpp	/^void IEEEFloat::copySignificand(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::divide	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::divide(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
llvm::detail::IEEEFloat::divideSignificand	APFloat.cpp	/^lostFraction IEEEFloat::divideSignificand(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::divideSpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::divideSpecials(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::freeSignificand	APFloat.cpp	/^void IEEEFloat::freeSignificand() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
llvm::detail::IEEEFloat::fusedMultiplyAdd	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::fusedMultiplyAdd(const IEEEFloat &multiplicand,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & multiplicand,const IEEEFloat & addend,roundingMode rounding_mode)
llvm::detail::IEEEFloat::getExactInverse	APFloat.cpp	/^bool IEEEFloat::getExactInverse(IEEEFloat *inv) const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(IEEEFloat * inv) const
llvm::detail::IEEEFloat::handleOverflow	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::handleOverflow(roundingMode rounding_mode) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(roundingMode rounding_mode)
llvm::detail::IEEEFloat::incrementSignificand	APFloat.cpp	/^void IEEEFloat::incrementSignificand() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
llvm::detail::IEEEFloat::initFromAPInt	APFloat.cpp	/^void IEEEFloat::initFromAPInt(const fltSemantics *Sem, const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const fltSemantics * Sem,const APInt & api)
llvm::detail::IEEEFloat::initFromDoubleAPInt	APFloat.cpp	/^void IEEEFloat::initFromDoubleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt	APFloat.cpp	/^void IEEEFloat::initFromF80LongDoubleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
llvm::detail::IEEEFloat::initFromFloatAPInt	APFloat.cpp	/^void IEEEFloat::initFromFloatAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
llvm::detail::IEEEFloat::initFromHalfAPInt	APFloat.cpp	/^void IEEEFloat::initFromHalfAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt	APFloat.cpp	/^void IEEEFloat::initFromPPCDoubleDoubleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
llvm::detail::IEEEFloat::initFromQuadrupleAPInt	APFloat.cpp	/^void IEEEFloat::initFromQuadrupleAPInt(const APInt &api) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const APInt & api)
llvm::detail::IEEEFloat::initialize	APFloat.cpp	/^void IEEEFloat::initialize(const fltSemantics *ourSemantics) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(const fltSemantics * ourSemantics)
llvm::detail::IEEEFloat::isDenormal	APFloat.cpp	/^bool IEEEFloat::isDenormal() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
llvm::detail::IEEEFloat::isInteger	APFloat.cpp	/^bool IEEEFloat::isInteger() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
llvm::detail::IEEEFloat::isLargest	APFloat.cpp	/^bool IEEEFloat::isLargest() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
llvm::detail::IEEEFloat::isSignaling	APFloat.cpp	/^bool IEEEFloat::isSignaling() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
llvm::detail::IEEEFloat::isSignificandAllOnes	APFloat.cpp	/^bool IEEEFloat::isSignificandAllOnes() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
llvm::detail::IEEEFloat::isSignificandAllZeros	APFloat.cpp	/^bool IEEEFloat::isSignificandAllZeros() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
llvm::detail::IEEEFloat::isSmallest	APFloat.cpp	/^bool IEEEFloat::isSmallest() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:() const
llvm::detail::IEEEFloat::makeInf	APFloat.cpp	/^void IEEEFloat::makeInf(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
llvm::detail::IEEEFloat::makeLargest	APFloat.cpp	/^void IEEEFloat::makeLargest(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
llvm::detail::IEEEFloat::makeNaN	APFloat.cpp	/^void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool SNaN,bool Negative,const APInt * fill)
llvm::detail::IEEEFloat::makeQuiet	APFloat.cpp	/^void IEEEFloat::makeQuiet() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
llvm::detail::IEEEFloat::makeSmallest	APFloat.cpp	/^void IEEEFloat::makeSmallest(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
llvm::detail::IEEEFloat::makeSmallestNormalized	APFloat.cpp	/^void IEEEFloat::makeSmallestNormalized(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
llvm::detail::IEEEFloat::makeZero	APFloat.cpp	/^void IEEEFloat::makeZero(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
llvm::detail::IEEEFloat::mod	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::mod(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::modSpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::modSpecials(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::multiply	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::multiply(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
llvm::detail::IEEEFloat::multiplySignificand	APFloat.cpp	/^lostFraction IEEEFloat::multiplySignificand(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(const IEEEFloat & rhs,const IEEEFloat * addend)
llvm::detail::IEEEFloat::multiplySpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::multiplySpecials(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::next	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::next(bool nextDown) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(bool nextDown)
llvm::detail::IEEEFloat::normalize	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::normalize(roundingMode rounding_mode,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(roundingMode rounding_mode,lostFraction lost_fraction)
llvm::detail::IEEEFloat::operator =	APFloat.cpp	/^IEEEFloat &IEEEFloat::operator=(IEEEFloat &&rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat &	signature:(IEEEFloat && rhs)
llvm::detail::IEEEFloat::operator =	APFloat.cpp	/^IEEEFloat &IEEEFloat::operator=(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat &	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::partCount	APFloat.cpp	/^unsigned int IEEEFloat::partCount() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:() const
llvm::detail::IEEEFloat::remainder	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::remainder(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
llvm::detail::IEEEFloat::roundAwayFromZero	APFloat.cpp	/^bool IEEEFloat::roundAwayFromZero(roundingMode rounding_mode,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(roundingMode rounding_mode,lostFraction lost_fraction,unsigned int bit) const
llvm::detail::IEEEFloat::roundSignificandWithExponent	APFloat.cpp	/^IEEEFloat::roundSignificandWithExponent(const integerPart *decSigParts,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * decSigParts,unsigned sigPartCount,int exp,roundingMode rounding_mode)
llvm::detail::IEEEFloat::roundToIntegral	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::roundToIntegral(roundingMode rounding_mode) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(roundingMode rounding_mode)
llvm::detail::IEEEFloat::shiftSignificandLeft	APFloat.cpp	/^void IEEEFloat::shiftSignificandLeft(unsigned int bits) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(unsigned int bits)
llvm::detail::IEEEFloat::shiftSignificandRight	APFloat.cpp	/^lostFraction IEEEFloat::shiftSignificandRight(unsigned int bits) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(unsigned int bits)
llvm::detail::IEEEFloat::significandLSB	APFloat.cpp	/^unsigned int IEEEFloat::significandLSB() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:() const
llvm::detail::IEEEFloat::significandMSB	APFloat.cpp	/^unsigned int IEEEFloat::significandMSB() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:() const
llvm::detail::IEEEFloat::significandParts	APFloat.cpp	/^const integerPart *IEEEFloat::significandParts() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:const integerPart *	signature:() const
llvm::detail::IEEEFloat::significandParts	APFloat.cpp	/^integerPart *IEEEFloat::significandParts() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:integerPart *	signature:()
llvm::detail::IEEEFloat::subtract	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::subtract(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
llvm::detail::IEEEFloat::subtractSignificand	APFloat.cpp	/^integerPart IEEEFloat::subtractSignificand(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:integerPart	signature:(const IEEEFloat & rhs,integerPart borrow)
llvm::detail::IEEEFloat::toString	APFloat.cpp	/^void IEEEFloat::toString(SmallVectorImpl<char> &Str, unsigned FormatPrecision,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(SmallVectorImpl<char> & Str,unsigned FormatPrecision,unsigned FormatMaxPadding) const
llvm::detail::IEEEFloat::zeroSignificand	APFloat.cpp	/^void IEEEFloat::zeroSignificand() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
llvm::detail::IEEEFloat::~IEEEFloat	APFloat.cpp	/^IEEEFloat::~IEEEFloat() { freeSignificand(); }$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:()
llvm::detail::__anondc20a17d0110	APFloat.cpp	/^namespace {$/;"	kind:n	namespace:llvm::detail	file:
llvm::detail::__anondc20a17d0110::AdjustToPrecision	APFloat.cpp	/^  void AdjustToPrecision(APInt &significand,$/;"	kind:f	namespace:llvm::detail::__anondc20a17d0110	typeref:typename:void	signature:(APInt & significand,int & exp,unsigned FormatPrecision)
llvm::detail::__anondc20a17d0110::AdjustToPrecision	APFloat.cpp	/^  void AdjustToPrecision(SmallVectorImpl<char> &buffer,$/;"	kind:f	namespace:llvm::detail::__anondc20a17d0110	typeref:typename:void	signature:(SmallVectorImpl<char> & buffer,int & exp,unsigned FormatPrecision)
llvm::detail::__anondc20a17d0110::append	APFloat.cpp	/^  void append(SmallVectorImpl<char> &Buffer, StringRef Str) {$/;"	kind:f	namespace:llvm::detail::__anondc20a17d0110	typeref:typename:void	signature:(SmallVectorImpl<char> & Buffer,StringRef Str)
llvm::detail::frexp	APFloat.cpp	/^IEEEFloat frexp(const IEEEFloat &Val, int &Exp, IEEEFloat::roundingMode RM) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:IEEEFloat	signature:(const IEEEFloat & Val,int & Exp,IEEEFloat::roundingMode RM)
llvm::detail::hash_value	APFloat.cpp	/^hash_code hash_value(const IEEEFloat &Arg) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:hash_code	signature:(const IEEEFloat & Arg)
llvm::detail::ilogb	APFloat.cpp	/^int ilogb(const IEEEFloat &Arg) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:int	signature:(const IEEEFloat & Arg)
llvm::detail::printBumpPtrAllocatorStats	Allocator.cpp	/^void printBumpPtrAllocatorStats(unsigned NumSlabs, size_t BytesAllocated,$/;"	kind:f	namespace:llvm::detail	typeref:typename:void	signature:(unsigned NumSlabs,size_t BytesAllocated,size_t TotalMemory)
llvm::detail::scalbn	APFloat.cpp	/^IEEEFloat scalbn(IEEEFloat X, int Exp, IEEEFloat::roundingMode RoundingMode) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:IEEEFloat	signature:(IEEEFloat X,int Exp,IEEEFloat::roundingMode RoundingMode)
llvm::dwarf::AccessibilityString	Dwarf.cpp	/^StringRef llvm::dwarf::AccessibilityString(unsigned Access) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Access)
llvm::dwarf::ApplePropertyString	Dwarf.cpp	/^StringRef llvm::dwarf::ApplePropertyString(unsigned Prop) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Prop)
llvm::dwarf::ArrayOrderString	Dwarf.cpp	/^StringRef llvm::dwarf::ArrayOrderString(unsigned Order) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Order)
llvm::dwarf::AtomTypeString	Dwarf.cpp	/^StringRef llvm::dwarf::AtomTypeString(unsigned AT) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned AT)
llvm::dwarf::AttributeEncodingString	Dwarf.cpp	/^StringRef llvm::dwarf::AttributeEncodingString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
llvm::dwarf::AttributeString	Dwarf.cpp	/^StringRef llvm::dwarf::AttributeString(unsigned Attribute) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Attribute)
llvm::dwarf::AttributeValueString	Dwarf.cpp	/^StringRef llvm::dwarf::AttributeValueString(uint16_t Attr, unsigned Val) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(uint16_t Attr,unsigned Val)
llvm::dwarf::CallFrameString	Dwarf.cpp	/^StringRef llvm::dwarf::CallFrameString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
llvm::dwarf::CaseString	Dwarf.cpp	/^StringRef llvm::dwarf::CaseString(unsigned Case) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Case)
llvm::dwarf::ChildrenString	Dwarf.cpp	/^StringRef llvm::dwarf::ChildrenString(unsigned Children) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Children)
llvm::dwarf::ConventionString	Dwarf.cpp	/^StringRef llvm::dwarf::ConventionString(unsigned CC) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned CC)
llvm::dwarf::DecimalSignString	Dwarf.cpp	/^StringRef llvm::dwarf::DecimalSignString(unsigned Sign) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Sign)
llvm::dwarf::DiscriminantString	Dwarf.cpp	/^StringRef llvm::dwarf::DiscriminantString(unsigned Discriminant) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Discriminant)
llvm::dwarf::EndianityString	Dwarf.cpp	/^StringRef llvm::dwarf::EndianityString(unsigned Endian) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Endian)
llvm::dwarf::FormEncodingString	Dwarf.cpp	/^StringRef llvm::dwarf::FormEncodingString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
llvm::dwarf::GDBIndexEntryKindString	Dwarf.cpp	/^StringRef llvm::dwarf::GDBIndexEntryKindString(GDBIndexEntryKind Kind) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(GDBIndexEntryKind Kind)
llvm::dwarf::GDBIndexEntryLinkageString	Dwarf.cpp	/^llvm::dwarf::GDBIndexEntryLinkageString(GDBIndexEntryLinkage Linkage) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(GDBIndexEntryLinkage Linkage)
llvm::dwarf::InlineCodeString	Dwarf.cpp	/^StringRef llvm::dwarf::InlineCodeString(unsigned Code) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Code)
llvm::dwarf::LNExtendedString	Dwarf.cpp	/^StringRef llvm::dwarf::LNExtendedString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
llvm::dwarf::LNStandardString	Dwarf.cpp	/^StringRef llvm::dwarf::LNStandardString(unsigned Standard) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Standard)
llvm::dwarf::LanguageString	Dwarf.cpp	/^StringRef llvm::dwarf::LanguageString(unsigned Language) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Language)
llvm::dwarf::MacinfoString	Dwarf.cpp	/^StringRef llvm::dwarf::MacinfoString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
llvm::dwarf::OperationEncodingString	Dwarf.cpp	/^StringRef llvm::dwarf::OperationEncodingString(unsigned Encoding) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Encoding)
llvm::dwarf::TagString	Dwarf.cpp	/^StringRef llvm::dwarf::TagString(unsigned Tag) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Tag)
llvm::dwarf::VirtualityString	Dwarf.cpp	/^StringRef llvm::dwarf::VirtualityString(unsigned Virtuality) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Virtuality)
llvm::dwarf::VisibilityString	Dwarf.cpp	/^StringRef llvm::dwarf::VisibilityString(unsigned Visibility) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:StringRef	signature:(unsigned Visibility)
llvm::dwarf::getAttributeEncoding	Dwarf.cpp	/^unsigned llvm::dwarf::getAttributeEncoding(StringRef EncodingString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef EncodingString)
llvm::dwarf::getCallingConvention	Dwarf.cpp	/^unsigned llvm::dwarf::getCallingConvention(StringRef CCString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef CCString)
llvm::dwarf::getLanguage	Dwarf.cpp	/^unsigned llvm::dwarf::getLanguage(StringRef LanguageString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef LanguageString)
llvm::dwarf::getMacinfo	Dwarf.cpp	/^unsigned llvm::dwarf::getMacinfo(StringRef MacinfoString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef MacinfoString)
llvm::dwarf::getOperationEncoding	Dwarf.cpp	/^unsigned llvm::dwarf::getOperationEncoding(StringRef OperationEncodingString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef OperationEncodingString)
llvm::dwarf::getTag	Dwarf.cpp	/^unsigned llvm::dwarf::getTag(StringRef TagString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef TagString)
llvm::dwarf::getVirtuality	Dwarf.cpp	/^unsigned llvm::dwarf::getVirtuality(StringRef VirtualityString) {$/;"	kind:f	class:llvm::dwarf	typeref:typename:unsigned	signature:(StringRef VirtualityString)
llvm::errorCodeToError	Error.cpp	/^Error errorCodeToError(std::error_code EC) {$/;"	kind:f	namespace:llvm	typeref:typename:Error	signature:(std::error_code EC)
llvm::errorToErrorCode	Error.cpp	/^std::error_code errorToErrorCode(Error Err) {$/;"	kind:f	namespace:llvm	typeref:typename:std::error_code	signature:(Error Err)
llvm::errs	raw_ostream.cpp	/^raw_ostream &llvm::errs() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
llvm::fdbgs	FormattedStream.cpp	/^formatted_raw_ostream &llvm::fdbgs() {$/;"	kind:f	class:llvm	typeref:typename:formatted_raw_ostream &	signature:()
llvm::ferrs	FormattedStream.cpp	/^formatted_raw_ostream &llvm::ferrs() {$/;"	kind:f	class:llvm	typeref:typename:formatted_raw_ostream &	signature:()
llvm::findMaximalSubpartOfIllFormedUTF8Sequence	ConvertUTF.cpp	/^findMaximalSubpartOfIllFormedUTF8Sequence(const UTF8 *source,$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	file:	signature:(const UTF8 * source,const UTF8 * sourceEnd)
llvm::firstByteMark	ConvertUTF.cpp	/^static const UTF8 firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	kind:v	namespace:llvm	typeref:typename:const UTF8[7]	file:
llvm::fltSemantics	APFloat.cpp	/^  struct fltSemantics {$/;"	kind:s	namespace:llvm	file:
llvm::fltSemantics::maxExponent	APFloat.cpp	/^    APFloatBase::ExponentType maxExponent;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:APFloatBase::ExponentType	file:	access:public
llvm::fltSemantics::minExponent	APFloat.cpp	/^    APFloatBase::ExponentType minExponent;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:APFloatBase::ExponentType	file:	access:public
llvm::fltSemantics::precision	APFloat.cpp	/^    unsigned int precision;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:unsigned int	file:	access:public
llvm::fltSemantics::sizeInBits	APFloat.cpp	/^    unsigned int sizeInBits;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:unsigned int	file:	access:public
llvm::fouts	FormattedStream.cpp	/^formatted_raw_ostream &llvm::fouts() {$/;"	kind:f	class:llvm	typeref:typename:formatted_raw_ostream &	signature:()
llvm::getAsSignedInteger	StringRef.cpp	/^bool llvm::getAsSignedInteger(StringRef Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef Str,unsigned Radix,long long & Result)
llvm::getAsUnsignedInteger	StringRef.cpp	/^bool llvm::getAsUnsignedInteger(StringRef Str, unsigned Radix,$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(StringRef Str,unsigned Radix,unsigned long long & Result)
llvm::getDefaultPrecision	NativeFormatting.cpp	/^size_t llvm::getDefaultPrecision(FloatStyle Style) {$/;"	kind:f	class:llvm	typeref:typename:size_t	signature:(FloatStyle Style)
llvm::getNumBytesForUTF8	ConvertUTF.cpp	/^unsigned getNumBytesForUTF8(UTF8 first) {$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	signature:(UTF8 first)
llvm::getRandomBytes	RandomNumberGenerator.cpp	/^std::error_code llvm::getRandomBytes(void *Buffer, size_t Size) {$/;"	kind:f	class:llvm	typeref:typename:std::error_code	signature:(void * Buffer,size_t Size)
llvm::getSLEB128Size	LEB128.cpp	/^unsigned getSLEB128Size(int64_t Value) {$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	signature:(int64_t Value)
llvm::getStructTM	Chrono.cpp	/^static inline struct tm getStructTM(TimePoint<> TP) {$/;"	kind:f	namespace:llvm	typeref:struct:tm	file:	signature:(TimePoint<> TP)
llvm::getToken	StringExtras.cpp	/^std::pair<StringRef, StringRef> llvm::getToken(StringRef Source,$/;"	kind:f	class:llvm	typeref:typename:std::pair<StringRef,StringRef>	signature:(StringRef Source,StringRef Delimiters)
llvm::getULEB128Size	LEB128.cpp	/^unsigned getULEB128Size(uint64_t Value) {$/;"	kind:f	namespace:llvm	typeref:typename:unsigned	signature:(uint64_t Value)
llvm::halfBase	ConvertUTF.cpp	/^static const UTF32 halfBase = 0x0010000UL;$/;"	kind:v	namespace:llvm	typeref:typename:const UTF32	file:
llvm::halfMask	ConvertUTF.cpp	/^static const UTF32 halfMask = 0x3FFUL;$/;"	kind:v	namespace:llvm	typeref:typename:const UTF32	file:
llvm::halfShift	ConvertUTF.cpp	/^static const int halfShift  = 10; \/* used for shifting by 10 bits *\/$/;"	kind:v	namespace:llvm	typeref:typename:const int	file:
llvm::hasUTF16ByteOrderMark	ConvertUTFWrapper.cpp	/^bool hasUTF16ByteOrderMark(ArrayRef<char> S) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(ArrayRef<char> S)
llvm::hash_value	APFloat.cpp	/^hash_code hash_value(const APFloat &Arg) { return hash_value(Arg.getIEEE()); }$/;"	kind:f	namespace:llvm	typeref:typename:hash_code	signature:(const APFloat & Arg)
llvm::hash_value	APInt.cpp	/^hash_code llvm::hash_value(const APInt &Arg) {$/;"	kind:f	class:llvm	typeref:typename:hash_code	signature:(const APInt & Arg)
llvm::hash_value	StringRef.cpp	/^hash_code llvm::hash_value(StringRef S) {$/;"	kind:f	class:llvm	typeref:typename:hash_code	signature:(StringRef S)
llvm::hashing::detail::fixed_seed_override	Hashing.cpp	/^size_t llvm::hashing::detail::fixed_seed_override = 0;$/;"	kind:m	class:llvm::hashing::detail	typeref:typename:size_t
llvm::heavyweight_hardware_concurrency	Threading.cpp	/^unsigned llvm::heavyweight_hardware_concurrency() {$/;"	kind:f	class:llvm	typeref:typename:unsigned	signature:()
llvm::hexDigitsLower	APFloat.cpp	/^static const char hexDigitsLower[] = "0123456789abcdef0";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
llvm::hexDigitsUpper	APFloat.cpp	/^static const char hexDigitsUpper[] = "0123456789ABCDEF0";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
llvm::huge_valf	MathExtras.cpp	/^  const float huge_valf = std::numeric_limits<float>::infinity();$/;"	kind:v	namespace:llvm	typeref:typename:const float
llvm::inconvertibleErrorCode	Error.cpp	/^std::error_code inconvertibleErrorCode() {$/;"	kind:f	namespace:llvm	typeref:typename:std::error_code	signature:()
llvm::infinityL	APFloat.cpp	/^static const char infinityL[] = "infinity";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
llvm::infinityU	APFloat.cpp	/^static const char infinityU[] = "INFINITY";$/;"	kind:v	namespace:llvm	typeref:typename:const char[]	file:
llvm::install_fatal_error_handler	ErrorHandling.cpp	/^void llvm::install_fatal_error_handler(fatal_error_handler_t handler,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(fatal_error_handler_t handler,void * user_data)
llvm::interpretDecimal	APFloat.cpp	/^interpretDecimal(StringRef::iterator begin, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:void	file:	signature:(StringRef::iterator begin,StringRef::iterator end,decimalInfo * D)
llvm::isCurrentDebugType	Debug.cpp	/^bool isCurrentDebugType(const char *DebugType) {$/;"	kind:f	namespace:llvm	typeref:typename:bool	signature:(const char * DebugType)
llvm::isLegalUTF8	ConvertUTF.cpp	/^static Boolean isLegalUTF8(const UTF8 *source, int length) {$/;"	kind:f	namespace:llvm	typeref:typename:Boolean	file:	signature:(const UTF8 * source,int length)
llvm::isLegalUTF8Sequence	ConvertUTF.cpp	/^Boolean isLegalUTF8Sequence(const UTF8 *source, const UTF8 *sourceEnd) {$/;"	kind:f	namespace:llvm	typeref:typename:Boolean	signature:(const UTF8 * source,const UTF8 * sourceEnd)
llvm::isLegalUTF8String	ConvertUTF.cpp	/^Boolean isLegalUTF8String(const UTF8 **source, const UTF8 *sourceEnd) {$/;"	kind:f	namespace:llvm	typeref:typename:Boolean	signature:(const UTF8 ** source,const UTF8 * sourceEnd)
llvm::isPrefixedHexStyle	NativeFormatting.cpp	/^bool llvm::isPrefixedHexStyle(HexPrintStyle S) {$/;"	kind:f	class:llvm	typeref:typename:bool	signature:(HexPrintStyle S)
llvm::llvm_execute_on_thread	Threading.cpp	/^void llvm::llvm_execute_on_thread(void (*Fn)(void*), void *UserData,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(void (* Fn)(void *),void * UserData,unsigned RequestedStackSize)
llvm::llvm_is_multithreaded	Threading.cpp	/^bool llvm::llvm_is_multithreaded() {$/;"	kind:f	class:llvm	typeref:typename:bool	signature:()
llvm::llvm_shutdown	ManagedStatic.cpp	/^void llvm::llvm_shutdown() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
llvm::llvm_unreachable_internal	ErrorHandling.cpp	/^void llvm::llvm_unreachable_internal(const char *msg, const char *file,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const char * msg,const char * file,unsigned line)
llvm::logAllUnhandledErrors	Error.cpp	/^void logAllUnhandledErrors(Error E, raw_ostream &OS, Twine ErrorBanner) {$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(Error E,raw_ostream & OS,Twine ErrorBanner)
llvm::lostFractionThroughTruncation	APFloat.cpp	/^lostFractionThroughTruncation(const integerPart *parts,$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(const integerPart * parts,unsigned int partCount,unsigned int bits)
llvm::mapWindowsError	ErrorHandling.cpp	/^std::error_code llvm::mapWindowsError(unsigned EV) {$/;"	kind:f	class:llvm	typeref:typename:std::error_code	signature:(unsigned EV)
llvm::maxExponent	APFloat.cpp	/^  const unsigned int maxExponent = 16383;$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
llvm::maxPowerOfFiveExponent	APFloat.cpp	/^  const unsigned int maxPowerOfFiveExponent = maxExponent + maxPrecision - 1;$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
llvm::maxPowerOfFiveParts	APFloat.cpp	/^  const unsigned int maxPowerOfFiveParts = 2 + ((maxPowerOfFiveExponent * 815)$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
llvm::maxPrecision	APFloat.cpp	/^  const unsigned int maxPrecision = 113;$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
llvm::nulls	raw_ostream.cpp	/^raw_ostream &llvm::nulls() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
llvm::offsetsFromUTF8	ConvertUTF.cpp	/^static const UTF32 offsetsFromUTF8[6] = { 0x00000000UL, 0x00003080UL, 0x000E2080UL, $/;"	kind:v	namespace:llvm	typeref:typename:const UTF32[6]	file:
llvm::operator <<	Chrono.cpp	/^raw_ostream &operator<<(raw_ostream &OS, TimePoint<> TP) {$/;"	kind:f	namespace:llvm	typeref:typename:raw_ostream &	signature:(raw_ostream & OS,TimePoint<> TP)
llvm::operator <<	ScopedPrinter.cpp	/^raw_ostream &operator<<(raw_ostream &OS, const HexNumber &Value) {$/;"	kind:f	namespace:llvm	typeref:typename:raw_ostream &	signature:(raw_ostream & OS,const HexNumber & Value)
llvm::outs	raw_ostream.cpp	/^raw_ostream &llvm::outs() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
llvm::partAsHex	APFloat.cpp	/^partAsHex (char *dst, integerPart part, unsigned int count,$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(char * dst,integerPart part,unsigned int count,const char * hexDigitChars)
llvm::partCountForBits	APFloat.cpp	/^partCountForBits(unsigned int bits)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(unsigned int bits)
llvm::powerOf5	APFloat.cpp	/^powerOf5(integerPart *dst, unsigned int power)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(integerPart * dst,unsigned int power)
llvm::readExponent	APFloat.cpp	/^readExponent(StringRef::iterator begin, StringRef::iterator end)$/;"	kind:f	namespace:llvm	typeref:typename:int	file:	signature:(StringRef::iterator begin,StringRef::iterator end)
llvm::remove_fatal_error_handler	ErrorHandling.cpp	/^void llvm::remove_fatal_error_handler() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
llvm::report_fatal_error	Error.cpp	/^void report_fatal_error(Error Err, bool GenCrashDiag) {$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(Error Err,bool GenCrashDiag)
llvm::report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(StringRef Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(StringRef Reason,bool GenCrashDiag)
llvm::report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(const Twine &Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const Twine & Reason,bool GenCrashDiag)
llvm::report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(const char *Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const char * Reason,bool GenCrashDiag)
llvm::report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(const std::string &Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const std::string & Reason,bool GenCrashDiag)
llvm::setCurrentDebugType	Debug.cpp	/^void setCurrentDebugType(const char *Type) {$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(const char * Type)
llvm::set_fixed_execution_hash_seed	Hashing.cpp	/^void llvm::set_fixed_execution_hash_seed(size_t fixed_value) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(size_t fixed_value)
llvm::shiftRight	APFloat.cpp	/^shiftRight(integerPart *dst, unsigned int parts, unsigned int bits)$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(integerPart * dst,unsigned int parts,unsigned int bits)
llvm::skipLeadingZeroesAndAnyDot	APFloat.cpp	/^skipLeadingZeroesAndAnyDot(StringRef::iterator begin, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:StringRef::iterator	file:	signature:(StringRef::iterator begin,StringRef::iterator end,StringRef::iterator * dot)
llvm::sys	Errno.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
llvm::sys	Locale.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
llvm::sys	Path.cpp	/^namespace sys  {$/;"	kind:n	namespace:llvm	file:
llvm::sys	Path.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
llvm::sys	Unicode.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
llvm::sys	Unix/Unix.h	/^namespace sys {$/;"	kind:n	namespace:llvm
llvm::sys	Windows/WindowsSupport.h	/^namespace sys {$/;"	kind:n	namespace:llvm
llvm::sys::DynamicLibrary::AddSymbol	DynamicLibrary.cpp	/^void llvm::sys::DynamicLibrary::AddSymbol(StringRef symbolName,$/;"	kind:f	class:llvm::sys::DynamicLibrary	typeref:typename:void	signature:(StringRef symbolName,void * symbolValue)
llvm::sys::DynamicLibrary::Invalid	DynamicLibrary.cpp	/^char llvm::sys::DynamicLibrary::Invalid = 0;$/;"	kind:m	class:llvm::sys::DynamicLibrary	typeref:typename:char
llvm::sys::RunSignalHandlers	Signals.cpp	/^void sys::RunSignalHandlers() {$/;"	kind:f	class:llvm::sys	typeref:typename:void	signature:()
llvm::sys::RunningOnValgrind	Valgrind.cpp	/^bool llvm::sys::RunningOnValgrind() {$/;"	kind:f	class:llvm::sys	typeref:typename:bool	signature:()
llvm::sys::StrError	Errno.cpp	/^std::string StrError() {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::string	signature:()
llvm::sys::StrError	Errno.cpp	/^std::string StrError(int errnum) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::string	signature:(int errnum)
llvm::sys::ValgrindDiscardTranslations	Valgrind.cpp	/^void llvm::sys::ValgrindDiscardTranslations(const void *Addr, size_t Len) {$/;"	kind:f	class:llvm::sys	typeref:typename:void	signature:(const void * Addr,size_t Len)
llvm::sys::fs	Path.cpp	/^namespace fs {$/;"	kind:n	namespace:llvm::sys	file:
llvm::sys::fs::copy_file	Path.cpp	/^std::error_code copy_file(const Twine &From, const Twine &To) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & From,const Twine & To)
llvm::sys::fs::createTemporaryFile	Path.cpp	/^createTemporaryFile(const Twine &Model, int &ResultFD,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	file:	signature:(const Twine & Model,int & ResultFD,llvm::SmallVectorImpl<char> & ResultPath,FSEntity Type)
llvm::sys::fs::createTemporaryFile	Path.cpp	/^createTemporaryFile(const Twine &Prefix, StringRef Suffix, int &ResultFD,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	file:	signature:(const Twine & Prefix,StringRef Suffix,int & ResultFD,llvm::SmallVectorImpl<char> & ResultPath,FSEntity Type)
llvm::sys::fs::createTemporaryFile	Path.cpp	/^std::error_code createTemporaryFile(const Twine &Prefix, StringRef Suffix,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Prefix,StringRef Suffix,SmallVectorImpl<char> & ResultPath)
llvm::sys::fs::createTemporaryFile	Path.cpp	/^std::error_code createTemporaryFile(const Twine &Prefix, StringRef Suffix,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Prefix,StringRef Suffix,int & ResultFD,SmallVectorImpl<char> & ResultPath)
llvm::sys::fs::createUniqueDirectory	Path.cpp	/^std::error_code createUniqueDirectory(const Twine &Prefix,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Prefix,SmallVectorImpl<char> & ResultPath)
llvm::sys::fs::createUniqueFile	Path.cpp	/^std::error_code createUniqueFile(const Twine &Model, int &ResultFd,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Model,int & ResultFd,SmallVectorImpl<char> & ResultPath,unsigned Mode)
llvm::sys::fs::createUniqueFile	Path.cpp	/^std::error_code createUniqueFile(const Twine &Model,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Model,SmallVectorImpl<char> & ResultPath)
llvm::sys::fs::create_directories	Path.cpp	/^std::error_code create_directories(const Twine &Path, bool IgnoreExisting,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Path,bool IgnoreExisting,perms Perms)
llvm::sys::fs::directory_entry::replace_filename	Path.cpp	/^void directory_entry::replace_filename(const Twine &filename, file_status st) {$/;"	kind:f	class:llvm::sys::fs::directory_entry	typeref:typename:void	signature:(const Twine & filename,file_status st)
llvm::sys::fs::directory_entry::status	Path.cpp	/^std::error_code directory_entry::status(file_status &result) const {$/;"	kind:f	class:llvm::sys::fs::directory_entry	typeref:typename:std::error_code	signature:(file_status & result) const
llvm::sys::fs::exists	Path.cpp	/^bool exists(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
llvm::sys::fs::getUniqueID	Path.cpp	/^std::error_code getUniqueID(const Twine Path, UniqueID &Result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine Path,UniqueID & Result)
llvm::sys::fs::identify_magic	Path.cpp	/^file_magic identify_magic(StringRef Magic) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:file_magic	signature:(StringRef Magic)
llvm::sys::fs::identify_magic	Path.cpp	/^std::error_code identify_magic(const Twine &Path, file_magic &Result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Path,file_magic & Result)
llvm::sys::fs::is_directory	Path.cpp	/^bool is_directory(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
llvm::sys::fs::is_directory	Path.cpp	/^std::error_code is_directory(const Twine &path, bool &result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & path,bool & result)
llvm::sys::fs::is_other	Path.cpp	/^bool is_other(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
llvm::sys::fs::is_other	Path.cpp	/^std::error_code is_other(const Twine &Path, bool &Result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & Path,bool & Result)
llvm::sys::fs::is_regular_file	Path.cpp	/^bool is_regular_file(file_status status) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status status)
llvm::sys::fs::is_regular_file	Path.cpp	/^std::error_code is_regular_file(const Twine &path, bool &result) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & path,bool & result)
llvm::sys::fs::make_absolute	Path.cpp	/^static std::error_code make_absolute(const Twine &current_directory,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	file:	signature:(const Twine & current_directory,SmallVectorImpl<char> & path,bool use_current_directory)
llvm::sys::fs::make_absolute	Path.cpp	/^std::error_code make_absolute(SmallVectorImpl<char> &path) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(SmallVectorImpl<char> & path)
llvm::sys::fs::make_absolute	Path.cpp	/^std::error_code make_absolute(const Twine &current_directory,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & current_directory,SmallVectorImpl<char> & path)
llvm::sys::fs::startswith	Path.cpp	/^static bool startswith(StringRef Magic, const char (&S)[N]) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	file:	signature:(StringRef Magic,const char (& S)[N])
llvm::sys::fs::status_known	Path.cpp	/^bool status_known(file_status s) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status s)
llvm::sys::locale	Locale.cpp	/^namespace locale {$/;"	kind:n	namespace:llvm::sys	file:
llvm::sys::locale::columnWidth	Locale.cpp	/^int columnWidth(StringRef Text) {$/;"	kind:f	namespace:llvm::sys::locale	typeref:typename:int	signature:(StringRef Text)
llvm::sys::locale::isPrint	Locale.cpp	/^bool isPrint(int UCS) {$/;"	kind:f	namespace:llvm::sys::locale	typeref:typename:bool	signature:(int UCS)
llvm::sys::path	Path.cpp	/^namespace path {$/;"	kind:n	namespace:llvm::sys	file:
llvm::sys::path	Windows/WindowsSupport.h	/^namespace path {$/;"	kind:n	namespace:llvm::sys
llvm::sys::path::append	Path.cpp	/^void append(SmallVectorImpl<char> &path, const Twine &a,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path,const Twine & a,const Twine & b,const Twine & c,const Twine & d)
llvm::sys::path::append	Path.cpp	/^void append(SmallVectorImpl<char> &path,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path,const_iterator begin,const_iterator end)
llvm::sys::path::begin	Path.cpp	/^const_iterator begin(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:const_iterator	signature:(StringRef path)
llvm::sys::path::const_iterator::operator ++	Path.cpp	/^const_iterator &const_iterator::operator++() {$/;"	kind:f	class:llvm::sys::path::const_iterator	typeref:typename:const_iterator &	signature:()
llvm::sys::path::const_iterator::operator -	Path.cpp	/^ptrdiff_t const_iterator::operator-(const const_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::const_iterator	typeref:typename:ptrdiff_t	signature:(const const_iterator & RHS) const
llvm::sys::path::const_iterator::operator ==	Path.cpp	/^bool const_iterator::operator==(const const_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::const_iterator	typeref:typename:bool	signature:(const const_iterator & RHS) const
llvm::sys::path::end	Path.cpp	/^const_iterator end(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:const_iterator	signature:(StringRef path)
llvm::sys::path::extension	Path.cpp	/^StringRef extension(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::filename	Path.cpp	/^StringRef filename(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::get_separator	Path.cpp	/^StringRef get_separator() {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:()
llvm::sys::path::has_extension	Path.cpp	/^bool has_extension(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::has_filename	Path.cpp	/^bool has_filename(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::has_parent_path	Path.cpp	/^bool has_parent_path(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::has_relative_path	Path.cpp	/^bool has_relative_path(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::has_root_directory	Path.cpp	/^bool has_root_directory(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::has_root_name	Path.cpp	/^bool has_root_name(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::has_root_path	Path.cpp	/^bool has_root_path(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::has_stem	Path.cpp	/^bool has_stem(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::is_absolute	Path.cpp	/^bool is_absolute(const Twine &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::is_relative	Path.cpp	/^bool is_relative(const Twine &path) { return !is_absolute(path); }$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(const Twine & path)
llvm::sys::path::is_separator	Path.cpp	/^bool is_separator(char value) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(char value)
llvm::sys::path::native	Path.cpp	/^void native(SmallVectorImpl<char> &Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & Path)
llvm::sys::path::native	Path.cpp	/^void native(const Twine &path, SmallVectorImpl<char> &result) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(const Twine & path,SmallVectorImpl<char> & result)
llvm::sys::path::parent_path	Path.cpp	/^StringRef parent_path(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::preferred_separator_string	Path.cpp	/^static const char preferred_separator_string[] = { preferred_separator, '\\0' };$/;"	kind:v	namespace:llvm::sys::path	typeref:typename:const char[]	file:
llvm::sys::path::rbegin	Path.cpp	/^reverse_iterator rbegin(StringRef Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:reverse_iterator	signature:(StringRef Path)
llvm::sys::path::relative_path	Path.cpp	/^StringRef relative_path(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::remove_dots	Path.cpp	/^bool remove_dots(SmallVectorImpl<char> &path, bool remove_dot_dot) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(SmallVectorImpl<char> & path,bool remove_dot_dot)
llvm::sys::path::remove_dots	Path.cpp	/^static SmallString<256> remove_dots(StringRef path, bool remove_dot_dot) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:SmallString<256>	file:	signature:(StringRef path,bool remove_dot_dot)
llvm::sys::path::remove_filename	Path.cpp	/^void remove_filename(SmallVectorImpl<char> &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path)
llvm::sys::path::remove_leading_dotslash	Path.cpp	/^StringRef remove_leading_dotslash(StringRef Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef Path)
llvm::sys::path::rend	Path.cpp	/^reverse_iterator rend(StringRef Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:reverse_iterator	signature:(StringRef Path)
llvm::sys::path::replace_extension	Path.cpp	/^void replace_extension(SmallVectorImpl<char> &path, const Twine &extension) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path,const Twine & extension)
llvm::sys::path::replace_path_prefix	Path.cpp	/^void replace_path_prefix(SmallVectorImpl<char> &Path,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & Path,const StringRef & OldPrefix,const StringRef & NewPrefix)
llvm::sys::path::reverse_iterator::operator ++	Path.cpp	/^reverse_iterator &reverse_iterator::operator++() {$/;"	kind:f	class:llvm::sys::path::reverse_iterator	typeref:typename:reverse_iterator &	signature:()
llvm::sys::path::reverse_iterator::operator -	Path.cpp	/^ptrdiff_t reverse_iterator::operator-(const reverse_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::reverse_iterator	typeref:typename:ptrdiff_t	signature:(const reverse_iterator & RHS) const
llvm::sys::path::reverse_iterator::operator ==	Path.cpp	/^bool reverse_iterator::operator==(const reverse_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::reverse_iterator	typeref:typename:bool	signature:(const reverse_iterator & RHS) const
llvm::sys::path::root_directory	Path.cpp	/^StringRef root_directory(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::root_name	Path.cpp	/^StringRef root_name(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::root_path	Path.cpp	/^StringRef root_path(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::stem	Path.cpp	/^StringRef stem(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
llvm::sys::path::user_cache_directory	Path.cpp	/^bool user_cache_directory(SmallVectorImpl<char> &Result, const Twine &Path1,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(SmallVectorImpl<char> & Result,const Twine & Path1,const Twine & Path2,const Twine & Path3)
llvm::sys::path::widenPath	Windows/WindowsSupport.h	/^std::error_code widenPath(const Twine &Path8,$/;"	kind:p	namespace:llvm::sys::path	typeref:typename:std::error_code	signature:(const Twine & Path8,SmallVectorImpl<wchar_t> & Path16)
llvm::sys::toDuration	Unix/Unix.h	/^inline std::chrono::microseconds toDuration(const struct timeval &TV) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::chrono::microseconds	signature:(const struct timeval & TV)
llvm::sys::toDuration	Windows/WindowsSupport.h	/^inline std::chrono::nanoseconds toDuration(FILETIME Time) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::chrono::nanoseconds	signature:(FILETIME Time)
llvm::sys::toFILETIME	Windows/WindowsSupport.h	/^inline FILETIME toFILETIME(TimePoint<> TP) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:FILETIME	signature:(TimePoint<> TP)
llvm::sys::toTimePoint	Windows/WindowsSupport.h	/^inline TimePoint<> toTimePoint(FILETIME Time) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:TimePoint<>	signature:(FILETIME Time)
llvm::sys::toTimeSpec	Unix/Unix.h	/^inline struct timespec toTimeSpec(TimePoint<> TP) {$/;"	kind:f	namespace:llvm::sys	typeref:struct:timespec	signature:(TimePoint<> TP)
llvm::sys::toTimeVal	Unix/Unix.h	/^inline struct timeval toTimeVal(TimePoint<std::chrono::microseconds> TP) {$/;"	kind:f	namespace:llvm::sys	typeref:struct:timeval	signature:(TimePoint<std::chrono::microseconds> TP)
llvm::sys::unicode	Unicode.cpp	/^namespace unicode {$/;"	kind:n	namespace:llvm::sys	file:
llvm::sys::unicode::charWidth	Unicode.cpp	/^static inline int charWidth(int UCS)$/;"	kind:f	namespace:llvm::sys::unicode	typeref:typename:int	file:	signature:(int UCS)
llvm::sys::unicode::columnWidthUTF8	Unicode.cpp	/^int columnWidthUTF8(StringRef Text) {$/;"	kind:f	namespace:llvm::sys::unicode	typeref:typename:int	signature:(StringRef Text)
llvm::sys::unicode::isPrintable	Unicode.cpp	/^bool isPrintable(int UCS) {$/;"	kind:f	namespace:llvm::sys::unicode	typeref:typename:bool	signature:(int UCS)
llvm::sys::windows	Windows/WindowsSupport.h	/^namespace windows {$/;"	kind:n	namespace:llvm::sys
llvm::sys::windows::UTF16ToCurCP	Windows/WindowsSupport.h	/^std::error_code UTF16ToCurCP(const wchar_t *utf16, size_t utf16_len,$/;"	kind:p	namespace:llvm::sys::windows	typeref:typename:std::error_code	signature:(const wchar_t * utf16,size_t utf16_len,SmallVectorImpl<char> & utf8)
llvm::sys::windows::UTF16ToUTF8	Windows/WindowsSupport.h	/^std::error_code UTF16ToUTF8(const wchar_t *utf16, size_t utf16_len,$/;"	kind:p	namespace:llvm::sys::windows	typeref:typename:std::error_code	signature:(const wchar_t * utf16,size_t utf16_len,SmallVectorImpl<char> & utf8)
llvm::sys::windows::UTF8ToUTF16	Windows/WindowsSupport.h	/^std::error_code UTF8ToUTF16(StringRef utf8, SmallVectorImpl<wchar_t> &utf16);$/;"	kind:p	namespace:llvm::sys::windows	typeref:typename:std::error_code	signature:(StringRef utf8,SmallVectorImpl<wchar_t> & utf16)
llvm::to_hexString	ScopedPrinter.cpp	/^const std::string to_hexString(uint64_t Value, bool UpperCase) {$/;"	kind:f	namespace:llvm	typeref:typename:const std::string	signature:(uint64_t Value,bool UpperCase)
llvm::totalExponent	APFloat.cpp	/^totalExponent(StringRef::iterator p, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:int	file:	signature:(StringRef::iterator p,StringRef::iterator end,int exponentAdjustment)
llvm::trailingBytesForUTF8	ConvertUTF.cpp	/^static const char trailingBytesForUTF8[256] = {$/;"	kind:v	namespace:llvm	typeref:typename:const char[256]	file:
llvm::trailingHexadecimalFraction	APFloat.cpp	/^trailingHexadecimalFraction(StringRef::iterator p, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(StringRef::iterator p,StringRef::iterator end,unsigned int digitValue)
llvm::ulpsFromBoundary	APFloat.cpp	/^ulpsFromBoundary(const integerPart *parts, unsigned int bits, bool isNearest)$/;"	kind:f	namespace:llvm	typeref:typename:integerPart	file:	signature:(const integerPart * parts,unsigned int bits,bool isNearest)
llvm::writeSignedDecimal	APFloat.cpp	/^writeSignedDecimal (char *dst, int value)$/;"	kind:f	namespace:llvm	typeref:typename:char *	file:	signature:(char * dst,int value)
llvm::writeUnsignedDecimal	APFloat.cpp	/^writeUnsignedDecimal (char *dst, unsigned int n)$/;"	kind:f	namespace:llvm	typeref:typename:char *	file:	signature:(char * dst,unsigned int n)
llvm::write_double	NativeFormatting.cpp	/^void llvm::write_double(raw_ostream &S, double N, FloatStyle Style,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,double N,FloatStyle Style,Optional<size_t> Precision)
llvm::write_hex	NativeFormatting.cpp	/^void llvm::write_hex(raw_ostream &S, uint64_t N, HexPrintStyle Style,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,uint64_t N,HexPrintStyle Style,Optional<size_t> Width)
llvm::write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, int N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,int N,size_t MinDigits,IntegerStyle Style)
llvm::write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,long N,size_t MinDigits,IntegerStyle Style)
llvm::write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, long long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,long long N,size_t MinDigits,IntegerStyle Style)
llvm::write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, unsigned int N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,unsigned int N,size_t MinDigits,IntegerStyle Style)
llvm::write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, unsigned long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,unsigned long N,size_t MinDigits,IntegerStyle Style)
llvm::write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, unsigned long long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,unsigned long long N,size_t MinDigits,IntegerStyle Style)
llvm::xxHash64	xxhash.cpp	/^uint64_t llvm::xxHash64(StringRef Data) {$/;"	kind:f	class:llvm	typeref:typename:uint64_t	signature:(StringRef Data)
llvm::yaml	YAMLParser.cpp	/^namespace yaml {$/;"	kind:n	namespace:llvm	file:
llvm::yaml::AliasNode::anchor	YAMLParser.cpp	/^void AliasNode::anchor() {}$/;"	kind:f	class:llvm::yaml::AliasNode	typeref:typename:void	signature:()
llvm::yaml::BlockScalarNode::anchor	YAMLParser.cpp	/^void BlockScalarNode::anchor() {}$/;"	kind:f	class:llvm::yaml::BlockScalarNode	typeref:typename:void	signature:()
llvm::yaml::KeyValueNode::anchor	YAMLParser.cpp	/^void KeyValueNode::anchor() {}$/;"	kind:f	class:llvm::yaml::KeyValueNode	typeref:typename:void	signature:()
llvm::yaml::MappingNode::anchor	YAMLParser.cpp	/^void MappingNode::anchor() {}$/;"	kind:f	class:llvm::yaml::MappingNode	typeref:typename:void	signature:()
llvm::yaml::Node::anchor	YAMLParser.cpp	/^void Node::anchor() {}$/;"	kind:f	class:llvm::yaml::Node	typeref:typename:void	signature:()
llvm::yaml::NullNode::anchor	YAMLParser.cpp	/^void NullNode::anchor() {}$/;"	kind:f	class:llvm::yaml::NullNode	typeref:typename:void	signature:()
llvm::yaml::ScalarNode::anchor	YAMLParser.cpp	/^void ScalarNode::anchor() {}$/;"	kind:f	class:llvm::yaml::ScalarNode	typeref:typename:void	signature:()
llvm::yaml::Scanner	YAMLParser.cpp	/^class Scanner {$/;"	kind:c	namespace:llvm::yaml	file:
llvm::yaml::Scanner::Column	YAMLParser.cpp	/^  unsigned Column;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private
llvm::yaml::Scanner::Current	YAMLParser.cpp	/^  StringRef::iterator Current;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private
llvm::yaml::Scanner::EC	YAMLParser.cpp	/^  std::error_code *EC;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:std::error_code *	file:	access:private
llvm::yaml::Scanner::End	YAMLParser.cpp	/^  StringRef::iterator End;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private
llvm::yaml::Scanner::Failed	YAMLParser.cpp	/^  bool Failed;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
llvm::yaml::Scanner::FlowLevel	YAMLParser.cpp	/^  unsigned FlowLevel;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private
llvm::yaml::Scanner::Indent	YAMLParser.cpp	/^  int Indent;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:int	file:	access:private
llvm::yaml::Scanner::Indents	YAMLParser.cpp	/^  SmallVector<int, 4> Indents;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:SmallVector<int,4>	file:	access:private
llvm::yaml::Scanner::InputBuffer	YAMLParser.cpp	/^  MemoryBufferRef InputBuffer;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:MemoryBufferRef	file:	access:private
llvm::yaml::Scanner::IsSimpleKeyAllowed	YAMLParser.cpp	/^  bool IsSimpleKeyAllowed;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
llvm::yaml::Scanner::IsStartOfStream	YAMLParser.cpp	/^  bool IsStartOfStream;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
llvm::yaml::Scanner::Line	YAMLParser.cpp	/^  unsigned Line;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private
llvm::yaml::Scanner::SM	YAMLParser.cpp	/^  SourceMgr &SM;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:SourceMgr &	file:	access:private
llvm::yaml::Scanner::Scanner	YAMLParser.cpp	/^  Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors = true,$/;"	kind:p	class:llvm::yaml::Scanner	file:	access:public	signature:(MemoryBufferRef Buffer,SourceMgr & SM_,bool ShowColors=true,std::error_code * EC=nullptr)
llvm::yaml::Scanner::Scanner	YAMLParser.cpp	/^  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,$/;"	kind:p	class:llvm::yaml::Scanner	file:	access:public	signature:(StringRef Input,SourceMgr & SM,bool ShowColors=true,std::error_code * EC=nullptr)
llvm::yaml::Scanner::Scanner	YAMLParser.cpp	/^  typedef StringRef::iterator (Scanner::*SkipWhileFunc)(StringRef::iterator);$/;"	kind:t	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator (::* SkipWhileFunc)(StringRef::iterator)	file:	access:private
llvm::yaml::Scanner::ShowColors	YAMLParser.cpp	/^  bool ShowColors;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private
llvm::yaml::Scanner::SimpleKeys	YAMLParser.cpp	/^  SmallVector<SimpleKey, 4> SimpleKeys;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:SmallVector<SimpleKey,4>	file:	access:private
llvm::yaml::Scanner::TokenQueue	YAMLParser.cpp	/^  TokenQueueT TokenQueue;$/;"	kind:m	class:llvm::yaml::Scanner	typeref:typename:TokenQueueT	file:	access:private
llvm::yaml::Scanner::advanceWhile	YAMLParser.cpp	/^  void advanceWhile(SkipWhileFunc Func);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(SkipWhileFunc Func)
llvm::yaml::Scanner::consume	YAMLParser.cpp	/^  bool consume(uint32_t Expected);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(uint32_t Expected)
llvm::yaml::Scanner::consumeLineBreakIfPresent	YAMLParser.cpp	/^  bool consumeLineBreakIfPresent();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::currentInput	YAMLParser.cpp	/^  StringRef currentInput() {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:StringRef	file:	access:private	signature:()
llvm::yaml::Scanner::decodeUTF8	YAMLParser.cpp	/^  UTF8Decoded decodeUTF8(StringRef::iterator Position) {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:UTF8Decoded	file:	access:private	signature:(StringRef::iterator Position)
llvm::yaml::Scanner::failed	YAMLParser.cpp	/^  bool failed() {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:public	signature:()
llvm::yaml::Scanner::fetchMoreTokens	YAMLParser.cpp	/^  bool fetchMoreTokens();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::findBlockScalarIndent	YAMLParser.cpp	/^  bool findBlockScalarIndent(unsigned &BlockIndent, unsigned BlockExitIndent,$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(unsigned & BlockIndent,unsigned BlockExitIndent,unsigned & LineBreaks,bool & IsDone)
llvm::yaml::Scanner::getNext	YAMLParser.cpp	/^  Token getNext();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:Token	file:	access:public	signature:()
llvm::yaml::Scanner::init	YAMLParser.cpp	/^  void init(MemoryBufferRef Buffer);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(MemoryBufferRef Buffer)
llvm::yaml::Scanner::isBlankOrBreak	YAMLParser.cpp	/^  bool isBlankOrBreak(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(StringRef::iterator Position)
llvm::yaml::Scanner::peekNext	YAMLParser.cpp	/^  Token &peekNext();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:Token &	file:	access:public	signature:()
llvm::yaml::Scanner::printError	YAMLParser.cpp	/^  void printError(SMLoc Loc, SourceMgr::DiagKind Kind, const Twine &Message,$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:public	signature:(SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Message,ArrayRef<SMRange> Ranges=None)
llvm::yaml::Scanner::removeSimpleKeyCandidatesOnFlowLevel	YAMLParser.cpp	/^  void removeSimpleKeyCandidatesOnFlowLevel(unsigned Level);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(unsigned Level)
llvm::yaml::Scanner::removeStaleSimpleKeyCandidates	YAMLParser.cpp	/^  void removeStaleSimpleKeyCandidates();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
llvm::yaml::Scanner::rollIndent	YAMLParser.cpp	/^  bool rollIndent( int ToColumn$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(int ToColumn,Token::TokenKind Kind,TokenQueueT::iterator InsertPoint)
llvm::yaml::Scanner::saveSimpleKeyCandidate	YAMLParser.cpp	/^  void saveSimpleKeyCandidate( TokenQueueT::iterator Tok$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(TokenQueueT::iterator Tok,unsigned AtColumn,bool IsRequired)
llvm::yaml::Scanner::scanAliasOrAnchor	YAMLParser.cpp	/^  bool scanAliasOrAnchor(bool IsAlias);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsAlias)
llvm::yaml::Scanner::scanBlockChompingIndicator	YAMLParser.cpp	/^  char scanBlockChompingIndicator();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:char	file:	access:private	signature:()
llvm::yaml::Scanner::scanBlockEntry	YAMLParser.cpp	/^  bool scanBlockEntry();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanBlockIndentationIndicator	YAMLParser.cpp	/^  unsigned scanBlockIndentationIndicator();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private	signature:()
llvm::yaml::Scanner::scanBlockScalar	YAMLParser.cpp	/^  bool scanBlockScalar(bool IsLiteral);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsLiteral)
llvm::yaml::Scanner::scanBlockScalarHeader	YAMLParser.cpp	/^  bool scanBlockScalarHeader(char &ChompingIndicator, unsigned &IndentIndicator,$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(char & ChompingIndicator,unsigned & IndentIndicator,bool & IsDone)
llvm::yaml::Scanner::scanBlockScalarIndent	YAMLParser.cpp	/^  bool scanBlockScalarIndent(unsigned BlockIndent, unsigned BlockExitIndent,$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(unsigned BlockIndent,unsigned BlockExitIndent,bool & IsDone)
llvm::yaml::Scanner::scanDirective	YAMLParser.cpp	/^  bool scanDirective();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanDocumentIndicator	YAMLParser.cpp	/^  bool scanDocumentIndicator(bool IsStart);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsStart)
llvm::yaml::Scanner::scanFlowCollectionEnd	YAMLParser.cpp	/^  bool scanFlowCollectionEnd(bool IsSequence);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsSequence)
llvm::yaml::Scanner::scanFlowCollectionStart	YAMLParser.cpp	/^  bool scanFlowCollectionStart(bool IsSequence);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsSequence)
llvm::yaml::Scanner::scanFlowEntry	YAMLParser.cpp	/^  bool scanFlowEntry();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanFlowScalar	YAMLParser.cpp	/^  bool scanFlowScalar(bool IsDoubleQuoted);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsDoubleQuoted)
llvm::yaml::Scanner::scanKey	YAMLParser.cpp	/^  bool scanKey();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanPlainScalar	YAMLParser.cpp	/^  bool scanPlainScalar();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanStreamEnd	YAMLParser.cpp	/^  bool scanStreamEnd();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanStreamStart	YAMLParser.cpp	/^  bool scanStreamStart();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanTag	YAMLParser.cpp	/^  bool scanTag();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scanToNextToken	YAMLParser.cpp	/^  void scanToNextToken();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
llvm::yaml::Scanner::scanValue	YAMLParser.cpp	/^  bool scanValue();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
llvm::yaml::Scanner::scan_ns_uri_char	YAMLParser.cpp	/^  void scan_ns_uri_char();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
llvm::yaml::Scanner::setError	YAMLParser.cpp	/^  void setError(const Twine &Message) {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:public	signature:(const Twine & Message)
llvm::yaml::Scanner::setError	YAMLParser.cpp	/^  void setError(const Twine &Message, StringRef::iterator Position) {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:public	signature:(const Twine & Message,StringRef::iterator Position)
llvm::yaml::Scanner::skip	YAMLParser.cpp	/^  void skip(uint32_t Distance);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(uint32_t Distance)
llvm::yaml::Scanner::skipComment	YAMLParser.cpp	/^  void skipComment();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
llvm::yaml::Scanner::skip_b_break	YAMLParser.cpp	/^  StringRef::iterator skip_b_break(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
llvm::yaml::Scanner::skip_nb_char	YAMLParser.cpp	/^  StringRef::iterator skip_nb_char(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
llvm::yaml::Scanner::skip_ns_char	YAMLParser.cpp	/^  StringRef::iterator skip_ns_char(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
llvm::yaml::Scanner::skip_s_space	YAMLParser.cpp	/^  StringRef::iterator skip_s_space(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
llvm::yaml::Scanner::skip_s_white	YAMLParser.cpp	/^  StringRef::iterator skip_s_white(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
llvm::yaml::Scanner::skip_while	YAMLParser.cpp	/^  StringRef::iterator skip_while( SkipWhileFunc Func$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(SkipWhileFunc Func,StringRef::iterator Position)
llvm::yaml::Scanner::unrollIndent	YAMLParser.cpp	/^  bool unrollIndent(int ToColumn);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(int ToColumn)
llvm::yaml::SequenceNode::anchor	YAMLParser.cpp	/^void SequenceNode::anchor() {}$/;"	kind:f	class:llvm::yaml::SequenceNode	typeref:typename:void	signature:()
llvm::yaml::Token	YAMLParser.cpp	/^struct Token {$/;"	kind:s	namespace:llvm::yaml	file:
llvm::yaml::Token::Kind	YAMLParser.cpp	/^  } Kind;$/;"	kind:m	struct:llvm::yaml::Token	typeref:enum:llvm::yaml::Token::TokenKind	file:	access:public
llvm::yaml::Token::Range	YAMLParser.cpp	/^  StringRef Range;$/;"	kind:m	struct:llvm::yaml::Token	typeref:typename:StringRef	file:	access:public
llvm::yaml::Token::Token	YAMLParser.cpp	/^  Token() : Kind(TK_Error) {}$/;"	kind:f	struct:llvm::yaml::Token	file:	access:public	signature:()
llvm::yaml::Token::TokenKind	YAMLParser.cpp	/^  enum TokenKind {$/;"	kind:g	struct:llvm::yaml::Token	file:	access:public
llvm::yaml::Token::Value	YAMLParser.cpp	/^  std::string Value;$/;"	kind:m	struct:llvm::yaml::Token	typeref:typename:std::string	file:	access:public
llvm_execute_on_thread	Threading.cpp	/^void llvm::llvm_execute_on_thread(void (*Fn)(void*), void *UserData,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(void (* Fn)(void *),void * UserData,unsigned RequestedStackSize)
llvm_is_multithreaded	Threading.cpp	/^bool llvm::llvm_is_multithreaded() {$/;"	kind:f	class:llvm	typeref:typename:bool	signature:()
llvm_regcomp	regcomp.c	/^llvm_regcomp(llvm_regex_t *preg, const char *pattern, int cflags)$/;"	kind:f	typeref:typename:int	signature:(llvm_regex_t * preg,const char * pattern,int cflags)
llvm_regcomp	regex_impl.h	/^int	llvm_regcomp(llvm_regex_t *, const char *, int);$/;"	kind:p	typeref:typename:int	signature:(llvm_regex_t *,const char *,int)
llvm_regerror	regerror.c	/^llvm_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)$/;"	kind:f	typeref:typename:size_t	signature:(int errcode,const llvm_regex_t * preg,char * errbuf,size_t errbuf_size)
llvm_regerror	regex_impl.h	/^size_t	llvm_regerror(int, const llvm_regex_t *, char *, size_t);$/;"	kind:p	typeref:typename:size_t	signature:(int,const llvm_regex_t *,char *,size_t)
llvm_regex	regex_impl.h	/^typedef struct llvm_regex {$/;"	kind:s
llvm_regex::re_endp	regex_impl.h	/^  const char *re_endp;	\/* end pointer for REG_PEND *\/$/;"	kind:m	struct:llvm_regex	typeref:typename:const char *	access:public
llvm_regex::re_g	regex_impl.h	/^  struct re_guts *re_g;	\/* none of your business :-) *\/$/;"	kind:m	struct:llvm_regex	typeref:struct:re_guts *	access:public
llvm_regex::re_magic	regex_impl.h	/^  int re_magic;$/;"	kind:m	struct:llvm_regex	typeref:typename:int	access:public
llvm_regex::re_nsub	regex_impl.h	/^  size_t re_nsub;		\/* number of parenthesized subexpressions *\/$/;"	kind:m	struct:llvm_regex	typeref:typename:size_t	access:public
llvm_regex_t	regex_impl.h	/^} llvm_regex_t;$/;"	kind:t	typeref:struct:llvm_regex
llvm_regexec	regex_impl.h	/^int	llvm_regexec(const llvm_regex_t *, const char *, size_t, $/;"	kind:p	typeref:typename:int	signature:(const llvm_regex_t *,const char *,size_t,llvm_regmatch_t[],int)
llvm_regexec	regexec.c	/^llvm_regexec(const llvm_regex_t *preg, const char *string, size_t nmatch,$/;"	kind:f	typeref:typename:int	signature:(const llvm_regex_t * preg,const char * string,size_t nmatch,llvm_regmatch_t pmatch[],int eflags)
llvm_regfree	regex_impl.h	/^void	llvm_regfree(llvm_regex_t *);$/;"	kind:p	typeref:typename:void	signature:(llvm_regex_t *)
llvm_regfree	regfree.c	/^llvm_regfree(llvm_regex_t *preg)$/;"	kind:f	typeref:typename:void	signature:(llvm_regex_t * preg)
llvm_regmatch_t	regex_impl.h	/^} llvm_regmatch_t;$/;"	kind:t	typeref:struct:__anona48880470108
llvm_regoff_t	regex_impl.h	/^typedef off_t llvm_regoff_t;$/;"	kind:t	typeref:typename:off_t
llvm_shutdown	ManagedStatic.cpp	/^void llvm::llvm_shutdown() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
llvm_strlcpy	regex_impl.h	/^size_t  llvm_strlcpy(char *dst, const char *src, size_t siz);$/;"	kind:p	typeref:typename:size_t	signature:(char * dst,const char * src,size_t siz)
llvm_strlcpy	regstrlcpy.c	/^llvm_strlcpy(char *dst, const char *src, size_t siz)$/;"	kind:f	typeref:typename:size_t	signature:(char * dst,const char * src,size_t siz)
llvm_unreachable_internal	ErrorHandling.cpp	/^void llvm::llvm_unreachable_internal(const char *msg, const char *file,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const char * msg,const char * file,unsigned line)
locale	Locale.cpp	/^namespace locale {$/;"	kind:n	namespace:llvm::sys	file:
lockAcquired	LockFileManager.cpp	/^  void lockAcquired() { RemoveImmediately = false; }$/;"	kind:f	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	typeref:typename:void	file:	access:public	signature:()
log	Error.cpp	/^void StringError::log(raw_ostream &OS) const { OS << Msg; }$/;"	kind:f	class:llvm::StringError	typeref:typename:void	signature:(raw_ostream & OS) const
logAllUnhandledErrors	Error.cpp	/^void logAllUnhandledErrors(Error E, raw_ostream &OS, Twine ErrorBanner) {$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(Error E,raw_ostream & OS,Twine ErrorBanner)
lookupTarget	TargetRegistry.cpp	/^const Target *TargetRegistry::lookupTarget(const std::string &ArchName,$/;"	kind:f	class:TargetRegistry	typeref:typename:const Target *	signature:(const std::string & ArchName,Triple & TheTriple,std::string & Error)
lookupTarget	TargetRegistry.cpp	/^const Target *TargetRegistry::lookupTarget(const std::string &TT,$/;"	kind:f	class:TargetRegistry	typeref:typename:const Target *	signature:(const std::string & TT,std::string & Error)
lostFractionThroughTruncation	APFloat.cpp	/^lostFractionThroughTruncation(const integerPart *parts,$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(const integerPart * parts,unsigned int partCount,unsigned int bits)
lowBitMask	APInt.cpp	/^  lowBitMask(unsigned int bits)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:integerPart	file:	signature:(unsigned int bits)
lowHalf	APInt.cpp	/^  lowHalf(integerPart part)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:integerPart	file:	signature:(integerPart part)
lower	StringRef.cpp	/^std::string StringRef::lower() const {$/;"	kind:f	class:StringRef	typeref:typename:std::string	signature:() const
lshr	APInt.cpp	/^APInt APInt::lshr(const APInt &shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & shiftAmt) const
lshr	APInt.cpp	/^APInt APInt::lshr(unsigned shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned shiftAmt) const
lshrNear	APInt.cpp	/^static void lshrNear(uint64_t *Dst, uint64_t *Src, unsigned Words,$/;"	kind:f	typeref:typename:void	file:	signature:(uint64_t * Dst,uint64_t * Src,unsigned Words,unsigned Shift)
magic	APInt.cpp	/^APInt::ms APInt::magic() const {$/;"	kind:f	class:APInt	typeref:typename:APInt::ms	signature:() const
magic	regex2.h	/^	int magic;$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
magicu	APInt.cpp	/^APInt::mu APInt::magicu(unsigned LeadingZeros) const {$/;"	kind:f	class:APInt	typeref:typename:APInt::mu	signature:(unsigned LeadingZeros) const
makeInf	APFloat.cpp	/^void IEEEFloat::makeInf(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
makeLargest	APFloat.cpp	/^void IEEEFloat::makeLargest(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
makeNaN	APFloat.cpp	/^void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool SNaN,bool Negative,const APInt * fill)
makeQuiet	APFloat.cpp	/^void IEEEFloat::makeQuiet() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
makeSmallest	APFloat.cpp	/^void IEEEFloat::makeSmallest(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
makeSmallestNormalized	APFloat.cpp	/^void IEEEFloat::makeSmallestNormalized(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
makeZero	APFloat.cpp	/^void IEEEFloat::makeZero(bool Negative) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(bool Negative)
make_absolute	Path.cpp	/^static std::error_code make_absolute(const Twine &current_directory,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	file:	signature:(const Twine & current_directory,SmallVectorImpl<char> & path,bool use_current_directory)
make_absolute	Path.cpp	/^std::error_code make_absolute(SmallVectorImpl<char> &path) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(SmallVectorImpl<char> & path)
make_absolute	Path.cpp	/^std::error_code make_absolute(const Twine &current_directory,$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:std::error_code	signature:(const Twine & current_directory,SmallVectorImpl<char> & path)
mapTag	YAMLTraits.cpp	/^bool Input::mapTag(StringRef Tag, bool Default) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(StringRef Tag,bool Default)
mapTag	YAMLTraits.cpp	/^bool Output::mapTag(StringRef Tag, bool Use) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(StringRef Tag,bool Use)
mapWindowsError	ErrorHandling.cpp	/^std::error_code llvm::mapWindowsError(unsigned EV) {$/;"	kind:f	class:llvm	typeref:typename:std::error_code	signature:(unsigned EV)
mask	regex2.h	/^	uch mask;		\/* bit within array *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:uch	access:public
match	Regex.cpp	/^bool Regex::match(StringRef String, SmallVectorImpl<StringRef> *Matches){$/;"	kind:f	class:Regex	typeref:typename:bool	signature:(StringRef String,SmallVectorImpl<StringRef> * Matches)
match	SpecialCaseList.cpp	/^  bool match(StringRef Query) const {$/;"	kind:f	struct:llvm::SpecialCaseList::Entry	typeref:typename:bool	file:	access:public	signature:(StringRef Query) const
matchEnumFallback	YAMLTraits.cpp	/^bool Input::matchEnumFallback() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
matchEnumFallback	YAMLTraits.cpp	/^bool Output::matchEnumFallback() {$/;"	kind:f	class:Output	typeref:typename:bool	signature:()
matchEnumScalar	YAMLTraits.cpp	/^bool Input::matchEnumScalar(const char *Str, bool) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(const char * Str,bool)
matchEnumScalar	YAMLTraits.cpp	/^bool Output::matchEnumScalar(const char *Str, bool Match) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(const char * Str,bool Match)
maxExponent	APFloat.cpp	/^    APFloatBase::ExponentType maxExponent;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:APFloatBase::ExponentType	file:	access:public
maxExponent	APFloat.cpp	/^  const unsigned int maxExponent = 16383;$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
maxPowerOfFiveExponent	APFloat.cpp	/^  const unsigned int maxPowerOfFiveExponent = maxExponent + maxPrecision - 1;$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
maxPowerOfFiveParts	APFloat.cpp	/^  const unsigned int maxPowerOfFiveParts = 2 + ((maxPowerOfFiveExponent * 815)$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
maxPrecision	APFloat.cpp	/^  const unsigned int maxPrecision = 113;$/;"	kind:v	namespace:llvm	typeref:typename:const unsigned int
mcadd	regcomp.c	/^mcadd( struct parse *p, cset *cs, const char *cp)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,cset * cs,const char * cp)
mcadd	regcomp.c	/^static void mcadd(struct parse *, cset *, const char *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,cset *,const char *)
mccase	regcomp.c	/^mccase(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,cset * cs)
mccase	regcomp.c	/^static void mccase(struct parse *, cset *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,cset *)
mcinvert	regcomp.c	/^mcinvert(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,cset * cs)
mcinvert	regcomp.c	/^static void mcinvert(struct parse *, cset *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,cset *)
memmove	regutils.h	/^#define	memmove(/;"	kind:d	signature:(d,s,c)
mergeRound	xxhash.cpp	/^static uint64_t mergeRound(uint64_t Acc, uint64_t Val) {$/;"	kind:f	typeref:typename:uint64_t	file:	signature:(uint64_t Acc,uint64_t Val)
message	Error.cpp	/^    std::string message(int condition) const override {$/;"	kind:f	class:__anondf7d4ec00110::ErrorErrorCategory	typeref:typename:std::string	file:	access:public	signature:(int condition) const
minExponent	APFloat.cpp	/^    APFloatBase::ExponentType minExponent;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:APFloatBase::ExponentType	file:	access:public
mlen	regex2.h	/^	int mlen;		\/* length of must *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
mod	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::mod(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
modSpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::modSpecials(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
moveLeft	IntervalMap.cpp	/^void Path::moveLeft(unsigned Level) {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:void	signature:(unsigned Level)
moveRight	IntervalMap.cpp	/^void Path::moveRight(unsigned Level) {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:void	signature:(unsigned Level)
mul	APInt.cpp	/^static void mul(uint64_t dest[], uint64_t x[], unsigned xlen, uint64_t y[],$/;"	kind:f	typeref:typename:void	file:	signature:(uint64_t dest[],uint64_t x[],unsigned xlen,uint64_t y[],unsigned ylen)
mul_1	APInt.cpp	/^static uint64_t mul_1(uint64_t dest[], uint64_t x[], unsigned len, uint64_t y) {$/;"	kind:f	typeref:typename:uint64_t	file:	signature:(uint64_t dest[],uint64_t x[],unsigned len,uint64_t y)
multiplicativeInverse	APInt.cpp	/^APInt APInt::multiplicativeInverse(const APInt& modulo) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & modulo) const
multiply	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::multiply(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
multiply64	ScaledNumber.cpp	/^std::pair<uint64_t, int16_t> ScaledNumbers::multiply64(uint64_t LHS,$/;"	kind:f	class:ScaledNumbers	typeref:typename:std::pair<uint64_t,int16_t>	signature:(uint64_t LHS,uint64_t RHS)
multiplySignificand	APFloat.cpp	/^lostFraction IEEEFloat::multiplySignificand(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(const IEEEFloat & rhs,const IEEEFloat * addend)
multiplySpecials	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::multiplySpecials(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
multis	regcclass.h	/^	const char *multis;$/;"	kind:m	struct:cclass	typeref:typename:const char *	access:public
multis	regex2.h	/^	char *multis;		\/* -> char[smulti]  ab\\0cd\\0ef\\0\\0 *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:char *	access:public
must	regex2.h	/^	char *must;		\/* match must contain this string *\/$/;"	kind:m	struct:re_guts	typeref:typename:char *	access:public
name	Error.cpp	/^    const char *name() const noexcept override { return "Error"; }$/;"	kind:f	class:__anondf7d4ec00110::ErrorErrorCategory	typeref:typename:const char *	file:	access:public	signature:() const
name	regcclass.h	/^	const char *name;$/;"	kind:m	struct:cclass	typeref:typename:const char *	access:public
name	regcname.h	/^	const char *name;$/;"	kind:m	struct:cname	typeref:typename:const char *	access:public
name	regerror.c	/^	const char *name;$/;"	kind:m	struct:rerr	typeref:typename:const char *	file:	access:public
native	Path.cpp	/^void native(SmallVectorImpl<char> &Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & Path)
native	Path.cpp	/^void native(const Twine &path, SmallVectorImpl<char> &result) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(const Twine & path,SmallVectorImpl<char> & result)
nbol	regex2.h	/^	int nbol;		\/* number of ^ used *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
ncategories	regex2.h	/^	int ncategories;	\/* how many character categories *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
nch	regcomp.c	/^nch(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:int	file:	signature:(struct parse * p,cset * cs)
nch	regcomp.c	/^static int nch(struct parse *, cset *);$/;"	kind:p	typeref:typename:int	file:	signature:(struct parse *,cset *)
ncsalloc	regcomp.c	/^	int ncsalloc;		\/* number of csets allocated *\/$/;"	kind:m	struct:parse	typeref:typename:int	file:	access:public
ncsets	regex2.h	/^	int ncsets;		\/* number of csets in use *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
neol	regex2.h	/^	int neol;		\/* number of $ used *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
never	regcomp.c	/^#define	never	/;"	kind:d	file:
never	regcomp.c	/^static int never = 0;		\/* for use in asserts; shuts lint up *\/$/;"	kind:v	typeref:typename:int	file:
newLineCheck	YAMLTraits.cpp	/^void Output::newLineCheck() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
next	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::next(bool nextDown) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(bool nextDown)
next	regcomp.c	/^	char *next;		\/* next character in RE *\/$/;"	kind:m	struct:parse	typeref:typename:char *	file:	access:public
nextDocument	YAMLTraits.cpp	/^bool Input::nextDocument() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
nonnewline	regcomp.c	/^nonnewline(struct parse *p)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p)
nonnewline	regcomp.c	/^static void nonnewline(struct parse *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *)
normalize	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::normalize(roundingMode rounding_mode,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(roundingMode rounding_mode,lostFraction lost_fraction)
normalize	Triple.cpp	/^std::string Triple::normalize(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:std::string	signature:(StringRef Str)
normalizedExponent	APFloat.cpp	/^  int normalizedExponent;$/;"	kind:m	struct:llvm::decimalInfo	typeref:typename:int	file:	access:public
nplus	regex2.h	/^	sopno nplus;		\/* how deep does it nest +s? *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
npos	StringRef.cpp	/^const size_t StringRef::npos;$/;"	kind:m	class:StringRef	typeref:typename:const size_t
nstates	regex2.h	/^	sopno nstates;		\/* = number of sops *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
nsub	regex2.h	/^	size_t nsub;		\/* copy of re_nsub *\/$/;"	kind:m	struct:re_guts	typeref:typename:size_t	access:public
nulls	raw_ostream.cpp	/^raw_ostream &llvm::nulls() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
nuls	regcomp.c	/^static char nuls[10];		\/* place to point scanner in event of error *\/$/;"	kind:v	typeref:typename:char[10]	file:
offsetsFromUTF8	ConvertUTF.cpp	/^static const UTF32 offsetsFromUTF8[6] = { 0x00000000UL, 0x00003080UL, 0x000E2080UL, $/;"	kind:v	namespace:llvm	typeref:typename:const UTF32[6]	file:
onestate	regexec.c	/^#define	onestate	/;"	kind:d	file:
operator &=	APInt.cpp	/^APInt& APInt::operator&=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
operator ()	RandomNumberGenerator.cpp	/^RandomNumberGenerator::result_type RandomNumberGenerator::operator()() {$/;"	kind:f	class:RandomNumberGenerator	typeref:typename:RandomNumberGenerator::result_type	signature:()
operator *	APInt.cpp	/^APInt APInt::operator*(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
operator *	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator*(BranchProbability Prob) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BranchProbability Prob) const
operator *=	APInt.cpp	/^APInt& APInt::operator*=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
operator *=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator*=(BranchProbability Prob) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BranchProbability Prob)
operator +	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator+(BlockFrequency Freq) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BlockFrequency Freq) const
operator ++	APInt.cpp	/^APInt& APInt::operator++() {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:()
operator ++	Path.cpp	/^const_iterator &const_iterator::operator++() {$/;"	kind:f	class:llvm::sys::path::const_iterator	typeref:typename:const_iterator &	signature:()
operator ++	Path.cpp	/^reverse_iterator &reverse_iterator::operator++() {$/;"	kind:f	class:llvm::sys::path::reverse_iterator	typeref:typename:reverse_iterator &	signature:()
operator +=	APInt.cpp	/^APInt& APInt::operator+=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
operator +=	APInt.cpp	/^APInt& APInt::operator+=(uint64_t RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(uint64_t RHS)
operator +=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator+=(BlockFrequency Freq) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BlockFrequency Freq)
operator -	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator-(BlockFrequency Freq) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BlockFrequency Freq) const
operator -	Path.cpp	/^ptrdiff_t const_iterator::operator-(const const_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::const_iterator	typeref:typename:ptrdiff_t	signature:(const const_iterator & RHS) const
operator -	Path.cpp	/^ptrdiff_t reverse_iterator::operator-(const reverse_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::reverse_iterator	typeref:typename:ptrdiff_t	signature:(const reverse_iterator & RHS) const
operator --	APInt.cpp	/^APInt& APInt::operator--() {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:()
operator -=	APInt.cpp	/^APInt& APInt::operator-=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
operator -=	APInt.cpp	/^APInt& APInt::operator-=(uint64_t RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(uint64_t RHS)
operator -=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator-=(BlockFrequency Freq) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BlockFrequency Freq)
operator /	BlockFrequency.cpp	/^BlockFrequency BlockFrequency::operator\/(BranchProbability Prob) const {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency	signature:(BranchProbability Prob) const
operator /=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator\/=(BranchProbability Prob) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(BranchProbability Prob)
operator <	FoldingSet.cpp	/^bool FoldingSetNodeID::operator<(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
operator <	FoldingSet.cpp	/^bool FoldingSetNodeID::operator<(const FoldingSetNodeID &RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(const FoldingSetNodeID & RHS) const
operator <	FoldingSet.cpp	/^bool FoldingSetNodeIDRef::operator<(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeIDRef	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
operator <<	Chrono.cpp	/^raw_ostream &operator<<(raw_ostream &OS, TimePoint<> TP) {$/;"	kind:f	namespace:llvm	typeref:typename:raw_ostream &	signature:(raw_ostream & OS,TimePoint<> TP)
operator <<	ScopedPrinter.cpp	/^raw_ostream &operator<<(raw_ostream &OS, const HexNumber &Value) {$/;"	kind:f	namespace:llvm	typeref:typename:raw_ostream &	signature:(raw_ostream & OS,const HexNumber & Value)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const FormattedBytes &FB) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const FormattedBytes & FB)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const FormattedNumber &FN) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const FormattedNumber & FN)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const FormattedString &FS) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const FormattedString & FS)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const format_object_base &Fmt) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const format_object_base & Fmt)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const formatv_object_base &Obj) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const formatv_object_base & Obj)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const void *P) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const void * P)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(double N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(double N)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(long N)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(long long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(long long N)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(unsigned long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned long N)
operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(unsigned long long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned long long N)
operator =	APFloat.cpp	/^DoubleAPFloat &DoubleAPFloat::operator=(const DoubleAPFloat &RHS) {$/;"	kind:f	class:llvm::detail::DoubleAPFloat	typeref:typename:DoubleAPFloat &	signature:(const DoubleAPFloat & RHS)
operator =	APFloat.cpp	/^IEEEFloat &IEEEFloat::operator=(IEEEFloat &&rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat &	signature:(IEEEFloat && rhs)
operator =	APFloat.cpp	/^IEEEFloat &IEEEFloat::operator=(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat &	signature:(const IEEEFloat & rhs)
operator =	APInt.cpp	/^APInt& APInt::operator=(uint64_t RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(uint64_t RHS)
operator =	CommandLine.cpp	/^  void operator=(bool OptionWasSpecified) {$/;"	kind:f	class:__anon2c11109d0610::VersionPrinter	typeref:typename:void	file:	access:public	signature:(bool OptionWasSpecified)
operator =	CommandLine.cpp	/^  void operator=(bool Value) {$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	typeref:typename:void	file:	access:public	signature:(bool Value)
operator =	CommandLine.cpp	/^  void operator=(bool Value);$/;"	kind:p	class:__anon2c11109d0510::HelpPrinterWrapper	typeref:typename:void	file:	access:public	signature:(bool Value)
operator =	CommandLine.cpp	/^void HelpPrinterWrapper::operator=(bool Value) {$/;"	kind:f	class:HelpPrinterWrapper	typeref:typename:void	signature:(bool Value)
operator =	Debug.cpp	/^  void operator=(const std::string &Val) const {$/;"	kind:f	struct:__anona93d287d0110::DebugOnlyOpt	typeref:typename:void	file:	access:public	signature:(const std::string & Val) const
operator =	FoldingSet.cpp	/^FoldingSetImpl &FoldingSetImpl::operator=(FoldingSetImpl &&RHS) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:FoldingSetImpl &	signature:(FoldingSetImpl && RHS)
operator =	PluginLoader.cpp	/^void PluginLoader::operator=(const std::string &Filename) {$/;"	kind:f	class:PluginLoader	typeref:typename:void	signature:(const std::string & Filename)
operator =	Windows/WindowsSupport.h	/^  ScopedHandle &operator=(handle_type h) {$/;"	kind:f	class:ScopedHandle	typeref:typename:ScopedHandle &	access:public	signature:(handle_type h)
operator =	Windows/WindowsSupport.h	/^  void operator=(const ScopedHandle &other); \/\/ = delete;$/;"	kind:p	class:ScopedHandle	typeref:typename:void	access:private	signature:(const ScopedHandle & other)
operator ==	FoldingSet.cpp	/^bool FoldingSetNodeID::operator==(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
operator ==	FoldingSet.cpp	/^bool FoldingSetNodeID::operator==(const FoldingSetNodeID &RHS) const {$/;"	kind:f	class:FoldingSetNodeID	typeref:typename:bool	signature:(const FoldingSetNodeID & RHS) const
operator ==	FoldingSet.cpp	/^bool FoldingSetNodeIDRef::operator==(FoldingSetNodeIDRef RHS) const {$/;"	kind:f	class:FoldingSetNodeIDRef	typeref:typename:bool	signature:(FoldingSetNodeIDRef RHS) const
operator ==	Path.cpp	/^bool const_iterator::operator==(const const_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::const_iterator	typeref:typename:bool	signature:(const const_iterator & RHS) const
operator ==	Path.cpp	/^bool reverse_iterator::operator==(const reverse_iterator &RHS) const {$/;"	kind:f	class:llvm::sys::path::reverse_iterator	typeref:typename:bool	signature:(const reverse_iterator & RHS) const
operator ==	YAMLParser.cpp	/^  bool operator ==(const SimpleKey &Other) {$/;"	kind:f	struct:__anon418572f60110::SimpleKey	typeref:typename:bool	file:	access:public	signature:(const SimpleKey & Other)
operator >>=	BlockFrequency.cpp	/^BlockFrequency &BlockFrequency::operator>>=(const unsigned count) {$/;"	kind:f	class:BlockFrequency	typeref:typename:BlockFrequency &	signature:(const unsigned count)
operator ^=	APInt.cpp	/^APInt& APInt::operator^=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
operator delete	MemoryBuffer.cpp	/^  void operator delete(void *p) { ::operator delete(p); }$/;"	kind:f	class:__anon58000f290210::MemoryBufferMem	typeref:typename:void	file:	access:public	signature:(void * p)
operator delete	MemoryBuffer.cpp	/^  void operator delete(void *p) { ::operator delete(p); }$/;"	kind:f	class:__anon58000f290310::MemoryBufferMMapFile	typeref:typename:void	file:	access:public	signature:(void * p)
operator new	MemoryBuffer.cpp	/^void *operator new(size_t N, const NamedBufferAlloc &Alloc) {$/;"	kind:f	typeref:typename:void *	signature:(size_t N,const NamedBufferAlloc & Alloc)
operator |=	APInt.cpp	/^APInt& APInt::operator|=(const APInt& RHS) {$/;"	kind:f	class:APInt	typeref:typename:APInt &	signature:(const APInt & RHS)
opt	CommandLine.cpp	/^template class opt<bool>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
opt	CommandLine.cpp	/^template class opt<char>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
opt	CommandLine.cpp	/^template class opt<int>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
opt	CommandLine.cpp	/^template class opt<std::string>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
opt	CommandLine.cpp	/^template class opt<unsigned>;$/;"	kind:v	namespace:llvm::cl	typeref:typename:class
ordinary	regcomp.c	/^ordinary(struct parse *p, int ch)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,int ch)
ordinary	regcomp.c	/^static void ordinary(struct parse *, int);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,int)
othercase	regcomp.c	/^othercase(int ch)$/;"	kind:f	typeref:typename:char	file:	signature:(int ch)
othercase	regcomp.c	/^static char othercase(int);$/;"	kind:p	typeref:typename:char	file:	signature:(int)
output	YAMLTraits.cpp	/^void Output::output(StringRef s) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef s)
output	YAMLTraits.cpp	/^void ScalarTraits<Hex16>::output(const Hex16 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex16 & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<Hex32>::output(const Hex32 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex32 & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<Hex64>::output(const Hex64 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex64 & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<Hex8>::output(const Hex8 &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const Hex8 & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<StringRef>::output(const StringRef &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const StringRef & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<bool>::output(const bool &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const bool & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<double>::output(const double &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const double & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<float>::output(const float &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const float & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<int16_t>::output(const int16_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int16_t & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<int32_t>::output(const int32_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int32_t & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<int64_t>::output(const int64_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int64_t & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<int8_t>::output(const int8_t &Val, void *, raw_ostream &Out) {$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const int8_t & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<std::string>::output(const std::string &Val, void *,$/;"	kind:f	class:ScalarTraits::string	typeref:typename:void	signature:(const std::string & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<uint16_t>::output(const uint16_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint16_t & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<uint32_t>::output(const uint32_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint32_t & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<uint64_t>::output(const uint64_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint64_t & Val,void *,raw_ostream & Out)
output	YAMLTraits.cpp	/^void ScalarTraits<uint8_t>::output(const uint8_t &Val, void *,$/;"	kind:f	class:ScalarTraits	typeref:typename:void	signature:(const uint8_t & Val,void *,raw_ostream & Out)
outputNewLine	YAMLTraits.cpp	/^void Output::outputNewLine() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
outputUpToEndOfLine	YAMLTraits.cpp	/^void Output::outputUpToEndOfLine(StringRef s) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef s)
outputting	YAMLTraits.cpp	/^bool Input::outputting() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
outputting	YAMLTraits.cpp	/^bool Output::outputting() {$/;"	kind:f	class:Output	typeref:typename:bool	signature:()
outs	raw_ostream.cpp	/^raw_ostream &llvm::outs() {$/;"	kind:f	class:llvm	typeref:typename:raw_ostream &	signature:()
p_b_cclass	regcomp.c	/^p_b_cclass(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,cset * cs)
p_b_cclass	regcomp.c	/^static void p_b_cclass(struct parse *, cset *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,cset *)
p_b_coll_elem	regcomp.c	/^p_b_coll_elem(struct parse *p,$/;"	kind:f	typeref:typename:char	file:	signature:(struct parse * p,int endc)
p_b_coll_elem	regcomp.c	/^static char p_b_coll_elem(struct parse *, int);$/;"	kind:p	typeref:typename:char	file:	signature:(struct parse *,int)
p_b_eclass	regcomp.c	/^p_b_eclass(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,cset * cs)
p_b_eclass	regcomp.c	/^static void p_b_eclass(struct parse *, cset *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,cset *)
p_b_symbol	regcomp.c	/^p_b_symbol(struct parse *p)$/;"	kind:f	typeref:typename:char	file:	signature:(struct parse * p)
p_b_symbol	regcomp.c	/^static char p_b_symbol(struct parse *);$/;"	kind:p	typeref:typename:char	file:	signature:(struct parse *)
p_b_term	regcomp.c	/^p_b_term(struct parse *p, cset *cs)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,cset * cs)
p_b_term	regcomp.c	/^static void p_b_term(struct parse *, cset *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,cset *)
p_bracket	regcomp.c	/^p_bracket(struct parse *p)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p)
p_bracket	regcomp.c	/^static void p_bracket(struct parse *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *)
p_bre	regcomp.c	/^p_bre(struct parse *p,$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,int end1,int end2)
p_bre	regcomp.c	/^static void p_bre(struct parse *, int, int);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,int,int)
p_count	regcomp.c	/^p_count(struct parse *p)$/;"	kind:f	typeref:typename:int	file:	signature:(struct parse * p)
p_count	regcomp.c	/^static int p_count(struct parse *);$/;"	kind:p	typeref:typename:int	file:	signature:(struct parse *)
p_ere	regcomp.c	/^p_ere(struct parse *p, int stop)	\/* character this ERE should end at *\/$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,int stop)
p_ere	regcomp.c	/^static void p_ere(struct parse *, int);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,int)
p_ere_exp	regcomp.c	/^p_ere_exp(struct parse *p)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p)
p_ere_exp	regcomp.c	/^static void p_ere_exp(struct parse *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *)
p_simp_re	regcomp.c	/^p_simp_re(struct parse *p,$/;"	kind:f	typeref:typename:int	file:	signature:(struct parse * p,int starordinary)
p_simp_re	regcomp.c	/^static int p_simp_re(struct parse *, int);$/;"	kind:p	typeref:typename:int	file:	signature:(struct parse *,int)
p_str	regcomp.c	/^p_str(struct parse *p)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p)
p_str	regcomp.c	/^static void p_str(struct parse *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *)
pad	SHA1.cpp	/^void SHA1::pad() {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:()
paddedKey	YAMLTraits.cpp	/^void Output::paddedKey(StringRef key) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef key)
param	Threading.cpp	/^  void *param;$/;"	kind:m	struct:ThreadInfo	typeref:typename:void *	file:	access:public
parent_path	Path.cpp	/^StringRef parent_path(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
parent_path_end	Path.cpp	/^  size_t parent_path_end(StringRef path) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:size_t	signature:(StringRef path)
parse	CommandLine.cpp	/^bool parser<bool>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,bool & Value)
parse	CommandLine.cpp	/^bool parser<boolOrDefault>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,boolOrDefault & Value)
parse	CommandLine.cpp	/^bool parser<double>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,double & Val)
parse	CommandLine.cpp	/^bool parser<float>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,float & Val)
parse	CommandLine.cpp	/^bool parser<int>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,int & Value)
parse	CommandLine.cpp	/^bool parser<unsigned long long>::parse(Option &O, StringRef ArgName,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,unsigned long long & Value)
parse	CommandLine.cpp	/^bool parser<unsigned>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,unsigned & Value)
parse	SpecialCaseList.cpp	/^bool SpecialCaseList::parse(const MemoryBuffer *MB, std::string &Error) {$/;"	kind:f	class:llvm::SpecialCaseList	typeref:typename:bool	signature:(const MemoryBuffer * MB,std::string & Error)
parse	regcomp.c	/^struct parse {$/;"	kind:s	file:
parse::end	regcomp.c	/^	char *end;		\/* end of string (-> NUL normally) *\/$/;"	kind:m	struct:parse	typeref:typename:char *	file:	access:public
parse::error	regcomp.c	/^	int error;		\/* has an error been seen? *\/$/;"	kind:m	struct:parse	typeref:typename:int	file:	access:public
parse::g	regcomp.c	/^	struct re_guts *g;$/;"	kind:m	struct:parse	typeref:struct:re_guts *	file:	access:public
parse::ncsalloc	regcomp.c	/^	int ncsalloc;		\/* number of csets allocated *\/$/;"	kind:m	struct:parse	typeref:typename:int	file:	access:public
parse::next	regcomp.c	/^	char *next;		\/* next character in RE *\/$/;"	kind:m	struct:parse	typeref:typename:char *	file:	access:public
parse::pbegin	regcomp.c	/^	sopno pbegin[NPAREN];	\/* -> ( ([0] unused) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno[]	file:	access:public
parse::pend	regcomp.c	/^	sopno pend[NPAREN];	\/* -> ) ([0] unused) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno[]	file:	access:public
parse::slen	regcomp.c	/^	sopno slen;		\/* malloced strip length (used) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno	file:	access:public
parse::ssize	regcomp.c	/^	sopno ssize;		\/* malloced strip size (allocated) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno	file:	access:public
parse::strip	regcomp.c	/^	sop *strip;		\/* malloced strip *\/$/;"	kind:m	struct:parse	typeref:typename:sop *	file:	access:public
parseARMArch	Triple.cpp	/^static Triple::ArchType parseARMArch(StringRef ArchName) {$/;"	kind:f	typeref:typename:Triple::ArchType	file:	signature:(StringRef ArchName)
parseArch	TargetParser.cpp	/^unsigned llvm::AArch64::parseArch(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
parseArch	TargetParser.cpp	/^unsigned llvm::ARM::parseArch(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
parseArch	Triple.cpp	/^static Triple::ArchType parseArch(StringRef ArchName) {$/;"	kind:f	typeref:typename:Triple::ArchType	file:	signature:(StringRef ArchName)
parseArchEndian	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchEndian(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
parseArchEndian	TargetParser.cpp	/^unsigned llvm::ARM::parseArchEndian(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
parseArchExt	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchExt(StringRef ArchExt) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef ArchExt)
parseArchExt	TargetParser.cpp	/^unsigned llvm::ARM::parseArchExt(StringRef ArchExt) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef ArchExt)
parseArchISA	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchISA(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
parseArchISA	TargetParser.cpp	/^unsigned llvm::ARM::parseArchISA(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
parseArchProfile	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchProfile(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
parseArchProfile	TargetParser.cpp	/^unsigned llvm::ARM::parseArchProfile(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
parseArchVersion	TargetParser.cpp	/^unsigned llvm::AArch64::parseArchVersion(StringRef Arch) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef Arch)
parseArchVersion	TargetParser.cpp	/^unsigned llvm::ARM::parseArchVersion(StringRef Arch) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef Arch)
parseBPFArch	Triple.cpp	/^static Triple::ArchType parseBPFArch(StringRef ArchName) {$/;"	kind:f	typeref:typename:Triple::ArchType	file:	signature:(StringRef ArchName)
parseBackslash	CommandLine.cpp	/^static size_t parseBackslash(StringRef Src, size_t I, SmallString<128> &Token) {$/;"	kind:f	typeref:typename:size_t	file:	signature:(StringRef Src,size_t I,SmallString<128> & Token)
parseBlockNode	YAMLParser.cpp	/^Node *Document::parseBlockNode() {$/;"	kind:f	class:Document	typeref:typename:Node *	signature:()
parseBlockNode	YAMLParser.cpp	/^Node *Node::parseBlockNode() {$/;"	kind:f	class:Node	typeref:typename:Node *	signature:()
parseCPUArch	TargetParser.cpp	/^unsigned llvm::AArch64::parseCPUArch(StringRef CPU) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef CPU)
parseCPUArch	TargetParser.cpp	/^unsigned llvm::ARM::parseCPUArch(StringRef CPU) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef CPU)
parseDirectives	YAMLParser.cpp	/^bool Document::parseDirectives() {$/;"	kind:f	class:Document	typeref:typename:bool	signature:()
parseDouble	CommandLine.cpp	/^static bool parseDouble(Option &O, StringRef Arg, double &Value) {$/;"	kind:f	typeref:typename:bool	file:	signature:(Option & O,StringRef Arg,double & Value)
parseEnvironment	Triple.cpp	/^static Triple::EnvironmentType parseEnvironment(StringRef EnvironmentName) {$/;"	kind:f	typeref:typename:Triple::EnvironmentType	file:	signature:(StringRef EnvironmentName)
parseFPU	TargetParser.cpp	/^unsigned llvm::AArch64::parseFPU(StringRef FPU) {$/;"	kind:f	class:llvm::AArch64	typeref:typename:unsigned	signature:(StringRef FPU)
parseFPU	TargetParser.cpp	/^unsigned llvm::ARM::parseFPU(StringRef FPU) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef FPU)
parseFormat	Triple.cpp	/^static Triple::ObjectFormatType parseFormat(StringRef EnvironmentName) {$/;"	kind:f	typeref:typename:Triple::ObjectFormatType	file:	signature:(StringRef EnvironmentName)
parseFormatString	FormatVariadic.cpp	/^formatv_object_base::parseFormatString(StringRef Fmt) {$/;"	kind:f	class:formatv_object_base	typeref:typename:std::vector<ReplacementItem>	signature:(StringRef Fmt)
parseHWDiv	TargetParser.cpp	/^unsigned llvm::ARM::parseHWDiv(StringRef HWDiv) {$/;"	kind:f	class:llvm::ARM	typeref:typename:unsigned	signature:(StringRef HWDiv)
parseOS	Triple.cpp	/^static Triple::OSType parseOS(StringRef OSName) {$/;"	kind:f	typeref:typename:Triple::OSType	file:	signature:(StringRef OSName)
parseReplacementItem	FormatVariadic.cpp	/^formatv_object_base::parseReplacementItem(StringRef Spec) {$/;"	kind:f	class:formatv_object_base	typeref:typename:Optional<ReplacementItem>	signature:(StringRef Spec)
parseSubArch	Triple.cpp	/^static Triple::SubArchType parseSubArch(StringRef SubArchName) {$/;"	kind:f	typeref:typename:Triple::SubArchType	file:	signature:(StringRef SubArchName)
parseTAGDirective	YAMLParser.cpp	/^void Document::parseTAGDirective() {$/;"	kind:f	class:Document	typeref:typename:void	signature:()
parseVendor	Triple.cpp	/^static Triple::VendorType parseVendor(StringRef VendorName) {$/;"	kind:f	typeref:typename:Triple::VendorType	file:	signature:(StringRef VendorName)
parseVersionFromName	Triple.cpp	/^static void parseVersionFromName(StringRef Name, unsigned &Major,$/;"	kind:f	typeref:typename:void	file:	signature:(StringRef Name,unsigned & Major,unsigned & Minor,unsigned & Micro)
parseYAMLDirective	YAMLParser.cpp	/^void Document::parseYAMLDirective() {$/;"	kind:f	class:Document	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<bool>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<boolOrDefault>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<char>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<double>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<float>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<int>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<unsigned long long>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::anchor	CommandLine.cpp	/^void parser<unsigned>::anchor() {}$/;"	kind:f	class:parser	typeref:typename:void	signature:()
parser::parse	CommandLine.cpp	/^bool parser<bool>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,bool & Value)
parser::parse	CommandLine.cpp	/^bool parser<boolOrDefault>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,boolOrDefault & Value)
parser::parse	CommandLine.cpp	/^bool parser<double>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,double & Val)
parser::parse	CommandLine.cpp	/^bool parser<float>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,float & Val)
parser::parse	CommandLine.cpp	/^bool parser<int>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,int & Value)
parser::parse	CommandLine.cpp	/^bool parser<unsigned long long>::parse(Option &O, StringRef ArgName,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,unsigned long long & Value)
parser::parse	CommandLine.cpp	/^bool parser<unsigned>::parse(Option &O, StringRef ArgName, StringRef Arg,$/;"	kind:f	class:parser	typeref:typename:bool	signature:(Option & O,StringRef ArgName,StringRef Arg,unsigned & Value)
parser::string::anchor	CommandLine.cpp	/^void parser<std::string>::anchor() {}$/;"	kind:f	class:parser::string	typeref:typename:void	signature:()
partAsHex	APFloat.cpp	/^partAsHex (char *dst, integerPart part, unsigned int count,$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(char * dst,integerPart part,unsigned int count,const char * hexDigitChars)
partCount	APFloat.cpp	/^unsigned int IEEEFloat::partCount() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:() const
partCountForBits	APFloat.cpp	/^partCountForBits(unsigned int bits)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(unsigned int bits)
partLSB	APInt.cpp	/^  partLSB(integerPart value)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:unsigned int	file:	signature:(integerPart value)
partMSB	APInt.cpp	/^  partMSB(integerPart value)$/;"	kind:f	namespace:__anon568892520310	typeref:typename:unsigned int	file:	signature:(integerPart value)
path	Path.cpp	/^namespace path {$/;"	kind:n	namespace:llvm::sys	file:
path	Windows/WindowsSupport.h	/^namespace path {$/;"	kind:n	namespace:llvm::sys
pbegin	regcomp.c	/^	sopno pbegin[NPAREN];	\/* -> ( ([0] unused) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno[]	file:	access:public
peekNext	YAMLParser.cpp	/^  Token &peekNext();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:Token &	file:	access:public	signature:()
peekNext	YAMLParser.cpp	/^Token &Document::peekNext() {$/;"	kind:f	class:Document	typeref:typename:Token &	signature:()
peekNext	YAMLParser.cpp	/^Token &Node::peekNext() {$/;"	kind:f	class:Node	typeref:typename:Token &	signature:()
peekNext	YAMLParser.cpp	/^Token &Scanner::peekNext() {$/;"	kind:f	class:Scanner	typeref:typename:Token &	signature:()
pend	regcomp.c	/^	sopno pend[NPAREN];	\/* -> ) ([0] unused) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno[]	file:	access:public
pluscount	regcomp.c	/^pluscount(struct parse *p, struct re_guts *g)$/;"	kind:f	typeref:typename:sopno	file:	signature:(struct parse * p,struct re_guts * g)
pluscount	regcomp.c	/^static sopno pluscount(struct parse *, struct re_guts *);$/;"	kind:p	typeref:typename:sopno	file:	signature:(struct parse *,struct re_guts *)
postflightDocument	YAMLTraits.cpp	/^void Output::postflightDocument() {$/;"	kind:f	class:Output	typeref:typename:void	signature:()
postflightElement	YAMLTraits.cpp	/^void Input::postflightElement(void *SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(void * SaveInfo)
postflightElement	YAMLTraits.cpp	/^void Output::postflightElement(void *) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(void *)
postflightFlowElement	YAMLTraits.cpp	/^void Input::postflightFlowElement(void *SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(void * SaveInfo)
postflightFlowElement	YAMLTraits.cpp	/^void Output::postflightFlowElement(void *) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(void *)
postflightKey	YAMLTraits.cpp	/^void Input::postflightKey(void *saveInfo) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(void * saveInfo)
postflightKey	YAMLTraits.cpp	/^void Output::postflightKey(void *) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(void *)
powerOf5	APFloat.cpp	/^powerOf5(integerPart *dst, unsigned int power)$/;"	kind:f	namespace:llvm	typeref:typename:unsigned int	file:	signature:(integerPart * dst,unsigned int power)
precision	APFloat.cpp	/^    unsigned int precision;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:unsigned int	file:	access:public
pred_begin	DAGDeltaAlgorithm.cpp	/^  pred_iterator_ty pred_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_iterator_ty	file:	access:private	signature:(change_ty Node)
pred_closure_begin	DAGDeltaAlgorithm.cpp	/^  pred_closure_iterator_ty pred_closure_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
pred_closure_end	DAGDeltaAlgorithm.cpp	/^  pred_closure_iterator_ty pred_closure_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
pred_closure_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::set<change_ty>::iterator pred_closure_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::set<change_ty>::iterator	file:	access:private
pred_end	DAGDeltaAlgorithm.cpp	/^  pred_iterator_ty pred_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:pred_iterator_ty	file:	access:private	signature:(change_ty Node)
pred_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::vector<change_ty>::iterator pred_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::vector<change_ty>::iterator	file:	access:private
preferred_buffer_size	raw_ostream.cpp	/^size_t raw_fd_ostream::preferred_buffer_size() const {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:size_t	signature:() const
preferred_buffer_size	raw_ostream.cpp	/^size_t raw_ostream::preferred_buffer_size() const {$/;"	kind:f	class:raw_ostream	typeref:typename:size_t	signature:() const
preferred_separator	Path.cpp	/^  const char preferred_separator = '\/';$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char
preferred_separator	Path.cpp	/^  const char preferred_separator = '\\\\';$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char
preferred_separator_string	Path.cpp	/^static const char preferred_separator_string[] = { preferred_separator, '\\0' };$/;"	kind:v	namespace:llvm::sys::path	typeref:typename:const char[]	file:
preflightDocument	YAMLTraits.cpp	/^bool Output::preflightDocument(unsigned index) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(unsigned index)
preflightElement	YAMLTraits.cpp	/^bool Input::preflightElement(unsigned Index, void *&SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(unsigned Index,void * & SaveInfo)
preflightElement	YAMLTraits.cpp	/^bool Output::preflightElement(unsigned, void *&) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(unsigned,void * &)
preflightFlowElement	YAMLTraits.cpp	/^bool Input::preflightFlowElement(unsigned index, void *&SaveInfo) {$/;"	kind:f	class:Input	typeref:typename:bool	signature:(unsigned index,void * & SaveInfo)
preflightFlowElement	YAMLTraits.cpp	/^bool Output::preflightFlowElement(unsigned, void *&) {$/;"	kind:f	class:Output	typeref:typename:bool	signature:(unsigned,void * &)
preflightKey	YAMLTraits.cpp	/^bool Input::preflightKey(const char *Key, bool Required, bool, bool &UseDefault,$/;"	kind:f	class:Input	typeref:typename:bool	signature:(const char * Key,bool Required,bool,bool & UseDefault,void * & SaveInfo)
preflightKey	YAMLTraits.cpp	/^bool Output::preflightKey(const char *Key, bool Required, bool SameAsDefault,$/;"	kind:f	class:Output	typeref:typename:bool	signature:(const char * Key,bool Required,bool SameAsDefault,bool & UseDefault,void * &)
prepareToPrintList	Timer.cpp	/^void TimerGroup::prepareToPrintList() {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:()
print	APInt.cpp	/^void APInt::print(raw_ostream &OS, bool isSigned) const {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(raw_ostream & OS,bool isSigned) const
print	BranchProbability.cpp	/^raw_ostream &BranchProbability::print(raw_ostream &OS) const {$/;"	kind:f	class:BranchProbability	typeref:typename:raw_ostream &	signature:(raw_ostream & OS) const
print	CommandLine.cpp	/^  void print() {$/;"	kind:f	class:__anon2c11109d0610::VersionPrinter	typeref:typename:void	file:	access:public	signature:()
print	PrettyStackTrace.cpp	/^void PrettyStackTraceProgram::print(raw_ostream &OS) const {$/;"	kind:f	class:PrettyStackTraceProgram	typeref:typename:void	signature:(raw_ostream & OS) const
print	PrettyStackTrace.cpp	/^void PrettyStackTraceString::print(raw_ostream &OS) const {$/;"	kind:f	class:PrettyStackTraceString	typeref:typename:void	signature:(raw_ostream & OS) const
print	ScaledNumber.cpp	/^raw_ostream &ScaledNumberBase::print(raw_ostream &OS, uint64_t D, int16_t E,$/;"	kind:f	class:ScaledNumberBase	typeref:typename:raw_ostream &	signature:(raw_ostream & OS,uint64_t D,int16_t E,int Width,unsigned Precision)
print	SourceMgr.cpp	/^void SMDiagnostic::print(const char *ProgName, raw_ostream &S, bool ShowColors,$/;"	kind:f	class:SMDiagnostic	typeref:typename:void	signature:(const char * ProgName,raw_ostream & S,bool ShowColors,bool ShowKindLabel) const
print	Timer.cpp	/^void TimeRecord::print(const TimeRecord &Total, raw_ostream &OS) const {$/;"	kind:f	class:TimeRecord	typeref:typename:void	signature:(const TimeRecord & Total,raw_ostream & OS) const
print	Timer.cpp	/^void TimerGroup::print(raw_ostream &OS) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS)
print	Twine.cpp	/^void Twine::print(raw_ostream &OS) const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS) const
printAll	Timer.cpp	/^void TimerGroup::printAll(raw_ostream &OS) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS)
printAllJSONValues	Timer.cpp	/^const char *TimerGroup::printAllJSONValues(raw_ostream &OS, const char *delim) {$/;"	kind:f	class:TimerGroup	typeref:typename:const char *	signature:(raw_ostream & OS,const char * delim)
printBinaryImpl	ScopedPrinter.cpp	/^void ScopedPrinter::printBinaryImpl(StringRef Label, StringRef Str,$/;"	kind:f	class:llvm::ScopedPrinter	typeref:typename:void	signature:(StringRef Label,StringRef Str,ArrayRef<uint8_t> Data,bool Block)
printBumpPtrAllocatorStats	Allocator.cpp	/^void printBumpPtrAllocatorStats(unsigned NumSlabs, size_t BytesAllocated,$/;"	kind:f	namespace:llvm::detail	typeref:typename:void	signature:(unsigned NumSlabs,size_t BytesAllocated,size_t TotalMemory)
printError	YAMLParser.cpp	/^  void printError(SMLoc Loc, SourceMgr::DiagKind Kind, const Twine &Message,$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:public	signature:(SMLoc Loc,SourceMgr::DiagKind Kind,const Twine & Message,ArrayRef<SMRange> Ranges=None)
printError	YAMLParser.cpp	/^void Stream::printError(Node *N, const Twine &Msg) {$/;"	kind:f	class:Stream	typeref:typename:void	signature:(Node * N,const Twine & Msg)
printGenericOptionDiff	CommandLine.cpp	/^void generic_parser_base::printGenericOptionDiff($/;"	kind:f	class:generic_parser_base	typeref:typename:void	signature:(const Option & O,const GenericOptionValue & Value,const GenericOptionValue & Default,size_t GlobalWidth) const
printHelpStr	CommandLine.cpp	/^static void printHelpStr(StringRef HelpStr, size_t Indent,$/;"	kind:f	typeref:typename:void	file:	signature:(StringRef HelpStr,size_t Indent,size_t FirstLineIndentedBy)
printJSONValue	Timer.cpp	/^void TimerGroup::printJSONValue(raw_ostream &OS, const PrintRecord &R,$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(raw_ostream & OS,const PrintRecord & R,const char * suffix,double Value)
printJSONValues	Timer.cpp	/^const char *TimerGroup::printJSONValues(raw_ostream &OS, const char *delim) {$/;"	kind:f	class:TimerGroup	typeref:typename:const char *	signature:(raw_ostream & OS,const char * delim)
printOneChild	Twine.cpp	/^void Twine::printOneChild(raw_ostream &OS, Child Ptr,$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS,Child Ptr,NodeKind Kind) const
printOneChildRepr	Twine.cpp	/^void Twine::printOneChildRepr(raw_ostream &OS, Child Ptr,$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS,Child Ptr,NodeKind Kind) const
printOptionInfo	CommandLine.cpp	/^void alias::printOptionInfo(size_t GlobalWidth) const {$/;"	kind:f	class:alias	typeref:typename:void	signature:(size_t GlobalWidth) const
printOptionInfo	CommandLine.cpp	/^void basic_parser_impl::printOptionInfo(const Option &O,$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
printOptionInfo	CommandLine.cpp	/^void generic_parser_base::printOptionInfo(const Option &O,$/;"	kind:f	class:generic_parser_base	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
printOptionName	CommandLine.cpp	/^void basic_parser_impl::printOptionName(const Option &O,$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
printOptionNoValue	CommandLine.cpp	/^void basic_parser_impl::printOptionNoValue(const Option &O,$/;"	kind:f	class:basic_parser_impl	typeref:typename:void	signature:(const Option & O,size_t GlobalWidth) const
printOptionValues	CommandLine.cpp	/^  void printOptionValues();$/;"	kind:p	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:()
printOptionValues	CommandLine.cpp	/^void CommandLineParser::printOptionValues() {$/;"	kind:f	class:CommandLineParser	typeref:typename:void	signature:()
printOptions	CommandLine.cpp	/^  virtual void printOptions(StrOptionPairVector &Opts, size_t MaxArgLen) {$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	typeref:typename:void	file:	access:protected	signature:(StrOptionPairVector & Opts,size_t MaxArgLen)
printOptions	CommandLine.cpp	/^  void printOptions(StrOptionPairVector &Opts, size_t MaxArgLen) override {$/;"	kind:f	class:__anon2c11109d0510::CategorizedHelpPrinter	typeref:typename:void	file:	access:protected	signature:(StrOptionPairVector & Opts,size_t MaxArgLen)
printRegisteredTargetsForVersion	TargetRegistry.cpp	/^void TargetRegistry::printRegisteredTargetsForVersion() {$/;"	kind:f	class:TargetRegistry	typeref:typename:void	signature:()
printRepr	Twine.cpp	/^void Twine::printRepr(raw_ostream &OS) const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:(raw_ostream & OS) const
printSourceLine	SourceMgr.cpp	/^static void printSourceLine(raw_ostream &S, StringRef LineContents) {$/;"	kind:f	typeref:typename:void	file:	signature:(raw_ostream & S,StringRef LineContents)
printSubCommands	CommandLine.cpp	/^  void printSubCommands(StrSubCommandPairVector &Subs, size_t MaxSubLen) {$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	typeref:typename:void	file:	access:protected	signature:(StrSubCommandPairVector & Subs,size_t MaxSubLen)
printSymbolizedStackTrace	Signals.cpp	/^static bool printSymbolizedStackTrace(StringRef Argv0,$/;"	kind:f	typeref:typename:bool	file:	signature:(StringRef Argv0,void ** StackTrace,int Depth,llvm::raw_ostream & OS)
printSymbolizedStackTrace	Signals.cpp	/^static bool printSymbolizedStackTrace(StringRef Argv0,$/;"	kind:p	typeref:typename:bool	file:	signature:(StringRef Argv0,void ** StackTrace,int Depth,llvm::raw_ostream & OS)
printVal	Timer.cpp	/^static void printVal(double Val, double Total, raw_ostream &OS) {$/;"	kind:f	typeref:typename:void	file:	signature:(double Val,double Total,raw_ostream & OS)
processStillExecuting	LockFileManager.cpp	/^bool LockFileManager::processStillExecuting(StringRef HostID, int PID) {$/;"	kind:f	class:LockFileManager	typeref:typename:bool	signature:(StringRef HostID,int PID)
prune	CachePruning.cpp	/^bool CachePruning::prune() {$/;"	kind:f	class:CachePruning	typeref:typename:bool	signature:()
ptr	regex2.h	/^	uch *ptr;		\/* -> uch [csetsize] *\/$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:uch *	access:public
pwrite_impl	raw_ostream.cpp	/^void raw_fd_ostream::pwrite_impl(const char *Ptr, size_t Size,$/;"	kind:f	class:raw_fd_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size,uint64_t Offset)
pwrite_impl	raw_ostream.cpp	/^void raw_null_ostream::pwrite_impl(const char *Ptr, size_t Size,$/;"	kind:f	class:raw_null_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size,uint64_t Offset)
pwrite_impl	raw_ostream.cpp	/^void raw_svector_ostream::pwrite_impl(const char *Ptr, size_t Size,$/;"	kind:f	class:raw_svector_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size,uint64_t Offset)
r0	SHA1.cpp	/^static void r0(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,$/;"	kind:f	typeref:typename:void	file:	signature:(uint32_t & A,uint32_t & B,uint32_t & C,uint32_t & D,uint32_t & E,int I,uint32_t * Buf)
r1	SHA1.cpp	/^static void r1(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,$/;"	kind:f	typeref:typename:void	file:	signature:(uint32_t & A,uint32_t & B,uint32_t & C,uint32_t & D,uint32_t & E,int I,uint32_t * Buf)
r2	SHA1.cpp	/^static void r2(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,$/;"	kind:f	typeref:typename:void	file:	signature:(uint32_t & A,uint32_t & B,uint32_t & C,uint32_t & D,uint32_t & E,int I,uint32_t * Buf)
r3	SHA1.cpp	/^static void r3(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,$/;"	kind:f	typeref:typename:void	file:	signature:(uint32_t & A,uint32_t & B,uint32_t & C,uint32_t & D,uint32_t & E,int I,uint32_t * Buf)
r4	SHA1.cpp	/^static void r4(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,$/;"	kind:f	typeref:typename:void	file:	signature:(uint32_t & A,uint32_t & B,uint32_t & C,uint32_t & D,uint32_t & E,int I,uint32_t * Buf)
raw_fd_ostream	raw_ostream.cpp	/^raw_fd_ostream::raw_fd_ostream(StringRef Filename, std::error_code &EC,$/;"	kind:f	class:raw_fd_ostream	signature:(StringRef Filename,std::error_code & EC,sys::fs::OpenFlags Flags)
raw_fd_ostream	raw_ostream.cpp	/^raw_fd_ostream::raw_fd_ostream(int fd, bool shouldClose, bool unbuffered)$/;"	kind:f	class:raw_fd_ostream	signature:(int fd,bool shouldClose,bool unbuffered)
raw_fd_ostream::changeColor	raw_ostream.cpp	/^raw_ostream &raw_fd_ostream::changeColor(enum Colors colors, bool bold,$/;"	kind:f	class:raw_fd_ostream	typeref:typename:raw_ostream &	signature:(enum Colors colors,bool bold,bool bg)
raw_fd_ostream::close	raw_ostream.cpp	/^void raw_fd_ostream::close() {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:void	signature:()
raw_fd_ostream::has_colors	raw_ostream.cpp	/^bool raw_fd_ostream::has_colors() const {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:bool	signature:() const
raw_fd_ostream::is_displayed	raw_ostream.cpp	/^bool raw_fd_ostream::is_displayed() const {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:bool	signature:() const
raw_fd_ostream::preferred_buffer_size	raw_ostream.cpp	/^size_t raw_fd_ostream::preferred_buffer_size() const {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:size_t	signature:() const
raw_fd_ostream::pwrite_impl	raw_ostream.cpp	/^void raw_fd_ostream::pwrite_impl(const char *Ptr, size_t Size,$/;"	kind:f	class:raw_fd_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size,uint64_t Offset)
raw_fd_ostream::raw_fd_ostream	raw_ostream.cpp	/^raw_fd_ostream::raw_fd_ostream(StringRef Filename, std::error_code &EC,$/;"	kind:f	class:raw_fd_ostream	signature:(StringRef Filename,std::error_code & EC,sys::fs::OpenFlags Flags)
raw_fd_ostream::raw_fd_ostream	raw_ostream.cpp	/^raw_fd_ostream::raw_fd_ostream(int fd, bool shouldClose, bool unbuffered)$/;"	kind:f	class:raw_fd_ostream	signature:(int fd,bool shouldClose,bool unbuffered)
raw_fd_ostream::resetColor	raw_ostream.cpp	/^raw_ostream &raw_fd_ostream::resetColor() {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:raw_ostream &	signature:()
raw_fd_ostream::reverseColor	raw_ostream.cpp	/^raw_ostream &raw_fd_ostream::reverseColor() {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:raw_ostream &	signature:()
raw_fd_ostream::seek	raw_ostream.cpp	/^uint64_t raw_fd_ostream::seek(uint64_t off) {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:uint64_t	signature:(uint64_t off)
raw_fd_ostream::write_impl	raw_ostream.cpp	/^void raw_fd_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
raw_fd_ostream::~raw_fd_ostream	raw_ostream.cpp	/^raw_fd_ostream::~raw_fd_ostream() {$/;"	kind:f	class:raw_fd_ostream	signature:()
raw_null_ostream::current_pos	raw_ostream.cpp	/^uint64_t raw_null_ostream::current_pos() const {$/;"	kind:f	class:raw_null_ostream	typeref:typename:uint64_t	signature:() const
raw_null_ostream::pwrite_impl	raw_ostream.cpp	/^void raw_null_ostream::pwrite_impl(const char *Ptr, size_t Size,$/;"	kind:f	class:raw_null_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size,uint64_t Offset)
raw_null_ostream::write_impl	raw_ostream.cpp	/^void raw_null_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_null_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
raw_null_ostream::~raw_null_ostream	raw_ostream.cpp	/^raw_null_ostream::~raw_null_ostream() {$/;"	kind:f	class:raw_null_ostream	signature:()
raw_os_ostream::current_pos	raw_os_ostream.cpp	/^uint64_t raw_os_ostream::current_pos() const { return OS.tellp(); }$/;"	kind:f	class:raw_os_ostream	typeref:typename:uint64_t	signature:() const
raw_os_ostream::write_impl	raw_os_ostream.cpp	/^void raw_os_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_os_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
raw_os_ostream::~raw_os_ostream	raw_os_ostream.cpp	/^raw_os_ostream::~raw_os_ostream() {$/;"	kind:f	class:raw_os_ostream	signature:()
raw_ostream::SetBufferAndMode	raw_ostream.cpp	/^void raw_ostream::SetBufferAndMode(char *BufferStart, size_t Size,$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:(char * BufferStart,size_t Size,BufferKind Mode)
raw_ostream::SetBuffered	raw_ostream.cpp	/^void raw_ostream::SetBuffered() {$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:()
raw_ostream::copy_to_buffer	raw_ostream.cpp	/^void raw_ostream::copy_to_buffer(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
raw_ostream::flush_nonempty	raw_ostream.cpp	/^void raw_ostream::flush_nonempty() {$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:()
raw_ostream::handle	raw_ostream.cpp	/^void raw_ostream::handle() {}$/;"	kind:f	class:raw_ostream	typeref:typename:void	signature:()
raw_ostream::indent	raw_ostream.cpp	/^raw_ostream &raw_ostream::indent(unsigned NumSpaces) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned NumSpaces)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const FormattedBytes &FB) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const FormattedBytes & FB)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const FormattedNumber &FN) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const FormattedNumber & FN)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const FormattedString &FS) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const FormattedString & FS)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const format_object_base &Fmt) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const format_object_base & Fmt)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const formatv_object_base &Obj) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const formatv_object_base & Obj)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(const void *P) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const void * P)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(double N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(double N)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(long N)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(long long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(long long N)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(unsigned long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned long N)
raw_ostream::operator <<	raw_ostream.cpp	/^raw_ostream &raw_ostream::operator<<(unsigned long long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned long long N)
raw_ostream::preferred_buffer_size	raw_ostream.cpp	/^size_t raw_ostream::preferred_buffer_size() const {$/;"	kind:f	class:raw_ostream	typeref:typename:size_t	signature:() const
raw_ostream::write	raw_ostream.cpp	/^raw_ostream &raw_ostream::write(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const char * Ptr,size_t Size)
raw_ostream::write	raw_ostream.cpp	/^raw_ostream &raw_ostream::write(unsigned char C) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned char C)
raw_ostream::write_escaped	raw_ostream.cpp	/^raw_ostream &raw_ostream::write_escaped(StringRef Str,$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(StringRef Str,bool UseHexEscapes)
raw_ostream::write_hex	raw_ostream.cpp	/^raw_ostream &raw_ostream::write_hex(unsigned long long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned long long N)
raw_ostream::~raw_ostream	raw_ostream.cpp	/^raw_ostream::~raw_ostream() {$/;"	kind:f	class:raw_ostream	signature:()
raw_string_ostream::write_impl	raw_ostream.cpp	/^void raw_string_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_string_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
raw_string_ostream::~raw_string_ostream	raw_ostream.cpp	/^raw_string_ostream::~raw_string_ostream() {$/;"	kind:f	class:raw_string_ostream	signature:()
raw_svector_ostream::current_pos	raw_ostream.cpp	/^uint64_t raw_svector_ostream::current_pos() const { return OS.size(); }$/;"	kind:f	class:raw_svector_ostream	typeref:typename:uint64_t	signature:() const
raw_svector_ostream::pwrite_impl	raw_ostream.cpp	/^void raw_svector_ostream::pwrite_impl(const char *Ptr, size_t Size,$/;"	kind:f	class:raw_svector_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size,uint64_t Offset)
raw_svector_ostream::write_impl	raw_ostream.cpp	/^void raw_svector_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_svector_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
rbegin	Path.cpp	/^reverse_iterator rbegin(StringRef Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:reverse_iterator	signature:(StringRef Path)
re_endp	regex_impl.h	/^  const char *re_endp;	\/* end pointer for REG_PEND *\/$/;"	kind:m	struct:llvm_regex	typeref:typename:const char *	access:public
re_g	regex_impl.h	/^  struct re_guts *re_g;	\/* none of your business :-) *\/$/;"	kind:m	struct:llvm_regex	typeref:struct:re_guts *	access:public
re_guts	regex2.h	/^struct re_guts {$/;"	kind:s
re_guts::backrefs	regex2.h	/^	int backrefs;		\/* does it use back references? *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::categories	regex2.h	/^	cat_t *categories;	\/* ->catspace[-CHAR_MIN] *\/$/;"	kind:m	struct:re_guts	typeref:typename:cat_t *	access:public
re_guts::catspace	regex2.h	/^	cat_t catspace[1];	\/* actually [NC] *\/$/;"	kind:m	struct:re_guts	typeref:typename:cat_t[1]	access:public
re_guts::cflags	regex2.h	/^	int cflags;		\/* copy of llvm_regcomp() cflags argument *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::csetsize	regex2.h	/^	int csetsize;		\/* number of bits in a cset vector *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::firststate	regex2.h	/^	sopno firststate;	\/* the initial OEND (normally 0) *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
re_guts::iflags	regex2.h	/^	int iflags;		\/* internal flags *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::laststate	regex2.h	/^	sopno laststate;	\/* the final OEND *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
re_guts::magic	regex2.h	/^	int magic;$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::mlen	regex2.h	/^	int mlen;		\/* length of must *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::must	regex2.h	/^	char *must;		\/* match must contain this string *\/$/;"	kind:m	struct:re_guts	typeref:typename:char *	access:public
re_guts::nbol	regex2.h	/^	int nbol;		\/* number of ^ used *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::ncategories	regex2.h	/^	int ncategories;	\/* how many character categories *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::ncsets	regex2.h	/^	int ncsets;		\/* number of csets in use *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::neol	regex2.h	/^	int neol;		\/* number of $ used *\/$/;"	kind:m	struct:re_guts	typeref:typename:int	access:public
re_guts::nplus	regex2.h	/^	sopno nplus;		\/* how deep does it nest +s? *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
re_guts::nstates	regex2.h	/^	sopno nstates;		\/* = number of sops *\/$/;"	kind:m	struct:re_guts	typeref:typename:sopno	access:public
re_guts::nsub	regex2.h	/^	size_t nsub;		\/* copy of re_nsub *\/$/;"	kind:m	struct:re_guts	typeref:typename:size_t	access:public
re_guts::setbits	regex2.h	/^	uch *setbits;		\/* -> uch[csetsize][ncsets\/CHAR_BIT] *\/$/;"	kind:m	struct:re_guts	typeref:typename:uch *	access:public
re_guts::sets	regex2.h	/^	cset *sets;		\/* -> cset [ncsets] *\/$/;"	kind:m	struct:re_guts	typeref:typename:cset *	access:public
re_guts::strip	regex2.h	/^	sop *strip;		\/* malloced area for strip *\/$/;"	kind:m	struct:re_guts	typeref:typename:sop *	access:public
re_magic	regex_impl.h	/^  int re_magic;$/;"	kind:m	struct:llvm_regex	typeref:typename:int	access:public
re_nsub	regex_impl.h	/^  size_t re_nsub;		\/* number of parenthesized subexpressions *\/$/;"	kind:m	struct:llvm_regex	typeref:typename:size_t	access:public
readCpuInfo	Host.cpp	/^static ssize_t LLVM_ATTRIBUTE_UNUSED readCpuInfo(void *Buf, size_t Size) {$/;"	kind:f	typeref:typename:ssize_t LLVM_ATTRIBUTE_UNUSED	file:	signature:(void * Buf,size_t Size)
readExponent	APFloat.cpp	/^readExponent(StringRef::iterator begin, StringRef::iterator end)$/;"	kind:f	namespace:llvm	typeref:typename:int	file:	signature:(StringRef::iterator begin,StringRef::iterator end)
readLockFile	LockFileManager.cpp	/^LockFileManager::readLockFile(StringRef LockFileName) {$/;"	kind:f	class:LockFileManager	typeref:typename:Optional<std::pair<std::string,int>>	signature:(StringRef LockFileName)
reader_acquire	RWMutex.cpp	/^RWMutexImpl::reader_acquire()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
reader_acquire	RWMutex.cpp	/^bool RWMutexImpl::reader_acquire() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
reader_release	RWMutex.cpp	/^RWMutexImpl::reader_release()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
reader_release	RWMutex.cpp	/^bool RWMutexImpl::reader_release() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
regatoi	regerror.c	/^regatoi(const llvm_regex_t *preg, char *localbuf, int localbufsize)$/;"	kind:f	typeref:typename:const char *	file:	signature:(const llvm_regex_t * preg,char * localbuf,int localbufsize)
regatoi	regerror.c	/^static const char *regatoi(const llvm_regex_t *, char *, int);$/;"	kind:p	typeref:typename:const char *	file:	signature:(const llvm_regex_t *,char *,int)
registerCategory	CommandLine.cpp	/^  void registerCategory(OptionCategory *cat) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(OptionCategory * cat)
registerCategory	CommandLine.cpp	/^void OptionCategory::registerCategory() {$/;"	kind:f	class:OptionCategory	typeref:typename:void	signature:()
registerCleanup	CrashRecoveryContext.cpp	/^void CrashRecoveryContext::registerCleanup(CrashRecoveryContextCleanup *cleanup)$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:(CrashRecoveryContextCleanup * cleanup)
registerSubCommand	CommandLine.cpp	/^  void registerSubCommand(SubCommand *sub) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(SubCommand * sub)
registerSubCommand	CommandLine.cpp	/^void SubCommand::registerSubCommand() {$/;"	kind:f	class:SubCommand	typeref:typename:void	signature:()
relative_path	Path.cpp	/^StringRef relative_path(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
release	Mutex.cpp	/^MutexImpl::release()$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
release	Mutex.cpp	/^bool MutexImpl::release() { return true; }$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
remainder	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::remainder(const IEEEFloat &rhs) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs)
removeArgument	CommandLine.cpp	/^void Option::removeArgument() { GlobalParser->removeOption(this); }$/;"	kind:f	class:Option	typeref:typename:void	signature:()
removeInstance	ThreadLocal.cpp	/^void ThreadLocalImpl::removeInstance() {$/;"	kind:f	class:llvm::ThreadLocalImpl	typeref:typename:void	signature:()
removeOption	CommandLine.cpp	/^  void removeOption(Option *O) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O)
removeOption	CommandLine.cpp	/^  void removeOption(Option *O, SubCommand *SC) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,SubCommand * SC)
removeSimpleKeyCandidatesOnFlowLevel	YAMLParser.cpp	/^  void removeSimpleKeyCandidatesOnFlowLevel(unsigned Level);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(unsigned Level)
removeSimpleKeyCandidatesOnFlowLevel	YAMLParser.cpp	/^void Scanner::removeSimpleKeyCandidatesOnFlowLevel(unsigned Level) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(unsigned Level)
removeStaleSimpleKeyCandidates	YAMLParser.cpp	/^  void removeStaleSimpleKeyCandidates();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
removeStaleSimpleKeyCandidates	YAMLParser.cpp	/^void Scanner::removeStaleSimpleKeyCandidates() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
removeTimer	Timer.cpp	/^void TimerGroup::removeTimer(Timer &T) {$/;"	kind:f	class:TimerGroup	typeref:typename:void	signature:(Timer & T)
remove_dots	Path.cpp	/^bool remove_dots(SmallVectorImpl<char> &path, bool remove_dot_dot) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(SmallVectorImpl<char> & path,bool remove_dot_dot)
remove_dots	Path.cpp	/^static SmallString<256> remove_dots(StringRef path, bool remove_dot_dot) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:SmallString<256>	file:	signature:(StringRef path,bool remove_dot_dot)
remove_fatal_error_handler	ErrorHandling.cpp	/^void llvm::remove_fatal_error_handler() {$/;"	kind:f	class:llvm	typeref:typename:void	signature:()
remove_filename	Path.cpp	/^void remove_filename(SmallVectorImpl<char> &path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path)
remove_leading_dotslash	Path.cpp	/^StringRef remove_leading_dotslash(StringRef Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef Path)
rend	Path.cpp	/^reverse_iterator rend(StringRef Path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:reverse_iterator	signature:(StringRef Path)
repeat	regcomp.c	/^repeat(struct parse *p,$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,sopno start,int from,int to)
repeat	regcomp.c	/^static void repeat(struct parse *, sopno, int, int);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,sopno,int,int)
replaceRoot	IntervalMap.cpp	/^void Path::replaceRoot(void *Root, unsigned Size, IdxPair Offsets) {$/;"	kind:f	class:llvm::IntervalMapImpl::Path	typeref:typename:void	signature:(void * Root,unsigned Size,IdxPair Offsets)
replace_extension	Path.cpp	/^void replace_extension(SmallVectorImpl<char> &path, const Twine &extension) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & path,const Twine & extension)
replace_filename	Path.cpp	/^void directory_entry::replace_filename(const Twine &filename, file_status st) {$/;"	kind:f	class:llvm::sys::fs::directory_entry	typeref:typename:void	signature:(const Twine & filename,file_status st)
replace_path_prefix	Path.cpp	/^void replace_path_prefix(SmallVectorImpl<char> &Path,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:void	signature:(SmallVectorImpl<char> & Path,const StringRef & OldPrefix,const StringRef & NewPrefix)
report_fatal_error	Error.cpp	/^void report_fatal_error(Error Err, bool GenCrashDiag) {$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(Error Err,bool GenCrashDiag)
report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(StringRef Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(StringRef Reason,bool GenCrashDiag)
report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(const Twine &Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const Twine & Reason,bool GenCrashDiag)
report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(const char *Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const char * Reason,bool GenCrashDiag)
report_fatal_error	ErrorHandling.cpp	/^void llvm::report_fatal_error(const std::string &Reason, bool GenCrashDiag) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(const std::string & Reason,bool GenCrashDiag)
rerr	regerror.c	/^static struct rerr {$/;"	kind:s	file:
rerr::code	regerror.c	/^	int code;$/;"	kind:m	struct:rerr	typeref:typename:int	file:	access:public
rerr::explain	regerror.c	/^	const char *explain;$/;"	kind:m	struct:rerr	typeref:typename:const char *	file:	access:public
rerr::name	regerror.c	/^	const char *name;$/;"	kind:m	struct:rerr	typeref:typename:const char *	file:	access:public
reserve	FoldingSet.cpp	/^void FoldingSetImpl::reserve(unsigned EltCount) {$/;"	kind:f	class:FoldingSetImpl	typeref:typename:void	signature:(unsigned EltCount)
reset	CommandLine.cpp	/^  void reset() {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:()
reset	CommandLine.cpp	/^void SubCommand::reset() {$/;"	kind:f	class:SubCommand	typeref:typename:void	signature:()
resetColor	raw_ostream.cpp	/^raw_ostream &raw_fd_ostream::resetColor() {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:raw_ostream &	signature:()
result	SHA1.cpp	/^StringRef SHA1::result() {$/;"	kind:f	class:SHA1	typeref:typename:StringRef	signature:()
reverseBits	APInt.cpp	/^APInt APInt::reverseBits() const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:() const
reverseColor	raw_ostream.cpp	/^raw_ostream &raw_fd_ostream::reverseColor() {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:raw_ostream &	signature:()
rfind	StringRef.cpp	/^size_t StringRef::rfind(StringRef Str) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str) const
rfind_lower	StringRef.cpp	/^size_t StringRef::rfind_lower(StringRef Str) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(StringRef Str) const
rfind_lower	StringRef.cpp	/^size_t StringRef::rfind_lower(char C, size_t From) const {$/;"	kind:f	class:StringRef	typeref:typename:size_t	signature:(char C,size_t From) const
rm_eo	regex_impl.h	/^  llvm_regoff_t rm_eo;		\/* end of match *\/$/;"	kind:m	struct:__anona48880470108	typeref:typename:llvm_regoff_t	access:public
rm_so	regex_impl.h	/^  llvm_regoff_t rm_so;		\/* start of match *\/$/;"	kind:m	struct:__anona48880470108	typeref:typename:llvm_regoff_t	access:public
rol	SHA1.cpp	/^static uint32_t rol(uint32_t Number, int Bits) {$/;"	kind:f	typeref:typename:uint32_t	file:	signature:(uint32_t Number,int Bits)
rollIndent	YAMLParser.cpp	/^  bool rollIndent( int ToColumn$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(int ToColumn,Token::TokenKind Kind,TokenQueueT::iterator InsertPoint)
rollIndent	YAMLParser.cpp	/^bool Scanner::rollIndent( int ToColumn$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(int ToColumn,Token::TokenKind Kind,TokenQueueT::iterator InsertPoint)
root_dir_start	Path.cpp	/^  size_t root_dir_start(StringRef str) {$/;"	kind:f	namespace:__anon912220430110	typeref:typename:size_t	signature:(StringRef str)
root_directory	Path.cpp	/^StringRef root_directory(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
root_name	Path.cpp	/^StringRef root_name(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
root_path	Path.cpp	/^StringRef root_path(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
rotl	APInt.cpp	/^APInt APInt::rotl(const APInt &rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & rotateAmt) const
rotl	APInt.cpp	/^APInt APInt::rotl(unsigned rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned rotateAmt) const
rotl64	xxhash.cpp	/^static uint64_t rotl64(uint64_t X, size_t R) {$/;"	kind:f	typeref:typename:uint64_t	file:	signature:(uint64_t X,size_t R)
rotr	APInt.cpp	/^APInt APInt::rotr(const APInt &rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & rotateAmt) const
rotr	APInt.cpp	/^APInt APInt::rotr(unsigned rotateAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned rotateAmt) const
round	xxhash.cpp	/^static uint64_t round(uint64_t Acc, uint64_t Input) {$/;"	kind:f	typeref:typename:uint64_t	file:	signature:(uint64_t Acc,uint64_t Input)
roundAwayFromZero	APFloat.cpp	/^bool IEEEFloat::roundAwayFromZero(roundingMode rounding_mode,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:bool	signature:(roundingMode rounding_mode,lostFraction lost_fraction,unsigned int bit) const
roundSignificandWithExponent	APFloat.cpp	/^IEEEFloat::roundSignificandWithExponent(const integerPart *decSigParts,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const integerPart * decSigParts,unsigned sigPartCount,int exp,roundingMode rounding_mode)
roundToDouble	APInt.cpp	/^double APInt::roundToDouble(bool isSigned) const {$/;"	kind:f	class:APInt	typeref:typename:double	signature:(bool isSigned) const
roundToIntegral	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::roundToIntegral(roundingMode rounding_mode) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(roundingMode rounding_mode)
sCurrentExceptionHandle	CrashRecoveryContext.cpp	/^static sys::ThreadLocal<const void> sCurrentExceptionHandle;$/;"	kind:v	typeref:typename:sys::ThreadLocal<const void>	file:
sadd_ov	APInt.cpp	/^APInt APInt::sadd_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
samesets	regcomp.c	/^samesets(struct re_guts *g, int c1, int c2)$/;"	kind:f	typeref:typename:int	file:	signature:(struct re_guts * g,int c1,int c2)
samesets	regcomp.c	/^static int samesets(struct re_guts *, int, int);$/;"	kind:p	typeref:typename:int	file:	signature:(struct re_guts *,int,int)
save	StringSaver.cpp	/^StringRef StringSaver::save(StringRef S) {$/;"	kind:f	class:StringSaver	typeref:typename:StringRef	signature:(StringRef S)
saveSimpleKeyCandidate	YAMLParser.cpp	/^  void saveSimpleKeyCandidate( TokenQueueT::iterator Tok$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(TokenQueueT::iterator Tok,unsigned AtColumn,bool IsRequired)
saveSimpleKeyCandidate	YAMLParser.cpp	/^void Scanner::saveSimpleKeyCandidate( TokenQueueT::iterator Tok$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(TokenQueueT::iterator Tok,unsigned AtColumn,bool IsRequired)
scalarString	YAMLTraits.cpp	/^void Input::scalarString(StringRef &S, bool) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(StringRef & S,bool)
scalarString	YAMLTraits.cpp	/^void Output::scalarString(StringRef &S, bool MustQuote) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(StringRef & S,bool MustQuote)
scalbn	APFloat.cpp	/^IEEEFloat scalbn(IEEEFloat X, int Exp, IEEEFloat::roundingMode RoundingMode) {$/;"	kind:f	namespace:llvm::detail	typeref:typename:IEEEFloat	signature:(IEEEFloat X,int Exp,IEEEFloat::roundingMode RoundingMode)
scale	BranchProbability.cpp	/^static uint64_t scale(uint64_t Num, uint32_t N, uint32_t D) {$/;"	kind:f	typeref:typename:uint64_t	file:	signature:(uint64_t Num,uint32_t N,uint32_t D)
scale	BranchProbability.cpp	/^uint64_t BranchProbability::scale(uint64_t Num) const {$/;"	kind:f	class:BranchProbability	typeref:typename:uint64_t	signature:(uint64_t Num) const
scaleByInverse	BranchProbability.cpp	/^uint64_t BranchProbability::scaleByInverse(uint64_t Num) const {$/;"	kind:f	class:BranchProbability	typeref:typename:uint64_t	signature:(uint64_t Num) const
scanAliasOrAnchor	YAMLParser.cpp	/^  bool scanAliasOrAnchor(bool IsAlias);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsAlias)
scanAliasOrAnchor	YAMLParser.cpp	/^bool Scanner::scanAliasOrAnchor(bool IsAlias) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsAlias)
scanBlockChompingIndicator	YAMLParser.cpp	/^  char scanBlockChompingIndicator();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:char	file:	access:private	signature:()
scanBlockChompingIndicator	YAMLParser.cpp	/^char Scanner::scanBlockChompingIndicator() {$/;"	kind:f	class:Scanner	typeref:typename:char	signature:()
scanBlockEntry	YAMLParser.cpp	/^  bool scanBlockEntry();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanBlockEntry	YAMLParser.cpp	/^bool Scanner::scanBlockEntry() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanBlockIndentationIndicator	YAMLParser.cpp	/^  unsigned scanBlockIndentationIndicator();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:unsigned	file:	access:private	signature:()
scanBlockIndentationIndicator	YAMLParser.cpp	/^unsigned Scanner::scanBlockIndentationIndicator() {$/;"	kind:f	class:Scanner	typeref:typename:unsigned	signature:()
scanBlockScalar	YAMLParser.cpp	/^  bool scanBlockScalar(bool IsLiteral);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsLiteral)
scanBlockScalar	YAMLParser.cpp	/^bool Scanner::scanBlockScalar(bool IsLiteral) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsLiteral)
scanBlockScalarHeader	YAMLParser.cpp	/^  bool scanBlockScalarHeader(char &ChompingIndicator, unsigned &IndentIndicator,$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(char & ChompingIndicator,unsigned & IndentIndicator,bool & IsDone)
scanBlockScalarHeader	YAMLParser.cpp	/^bool Scanner::scanBlockScalarHeader(char &ChompingIndicator,$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(char & ChompingIndicator,unsigned & IndentIndicator,bool & IsDone)
scanBlockScalarIndent	YAMLParser.cpp	/^  bool scanBlockScalarIndent(unsigned BlockIndent, unsigned BlockExitIndent,$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(unsigned BlockIndent,unsigned BlockExitIndent,bool & IsDone)
scanBlockScalarIndent	YAMLParser.cpp	/^bool Scanner::scanBlockScalarIndent(unsigned BlockIndent,$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(unsigned BlockIndent,unsigned BlockExitIndent,bool & IsDone)
scanDirective	YAMLParser.cpp	/^  bool scanDirective();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanDirective	YAMLParser.cpp	/^bool Scanner::scanDirective() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanDocumentIndicator	YAMLParser.cpp	/^  bool scanDocumentIndicator(bool IsStart);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsStart)
scanDocumentIndicator	YAMLParser.cpp	/^bool Scanner::scanDocumentIndicator(bool IsStart) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsStart)
scanFlowCollectionEnd	YAMLParser.cpp	/^  bool scanFlowCollectionEnd(bool IsSequence);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsSequence)
scanFlowCollectionEnd	YAMLParser.cpp	/^bool Scanner::scanFlowCollectionEnd(bool IsSequence) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsSequence)
scanFlowCollectionStart	YAMLParser.cpp	/^  bool scanFlowCollectionStart(bool IsSequence);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsSequence)
scanFlowCollectionStart	YAMLParser.cpp	/^bool Scanner::scanFlowCollectionStart(bool IsSequence) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsSequence)
scanFlowEntry	YAMLParser.cpp	/^  bool scanFlowEntry();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanFlowEntry	YAMLParser.cpp	/^bool Scanner::scanFlowEntry() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanFlowScalar	YAMLParser.cpp	/^  bool scanFlowScalar(bool IsDoubleQuoted);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(bool IsDoubleQuoted)
scanFlowScalar	YAMLParser.cpp	/^bool Scanner::scanFlowScalar(bool IsDoubleQuoted) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(bool IsDoubleQuoted)
scanKey	YAMLParser.cpp	/^  bool scanKey();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanKey	YAMLParser.cpp	/^bool Scanner::scanKey() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanPlainScalar	YAMLParser.cpp	/^  bool scanPlainScalar();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanPlainScalar	YAMLParser.cpp	/^bool Scanner::scanPlainScalar() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanStreamEnd	YAMLParser.cpp	/^  bool scanStreamEnd();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanStreamEnd	YAMLParser.cpp	/^bool Scanner::scanStreamEnd() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanStreamStart	YAMLParser.cpp	/^  bool scanStreamStart();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanStreamStart	YAMLParser.cpp	/^bool Scanner::scanStreamStart() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanTag	YAMLParser.cpp	/^  bool scanTag();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanTag	YAMLParser.cpp	/^bool Scanner::scanTag() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scanToNextToken	YAMLParser.cpp	/^  void scanToNextToken();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
scanToNextToken	YAMLParser.cpp	/^void Scanner::scanToNextToken() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
scanTokens	YAMLParser.cpp	/^bool yaml::scanTokens(StringRef Input) {$/;"	kind:f	class:yaml	typeref:typename:bool	signature:(StringRef Input)
scanValue	YAMLParser.cpp	/^  bool scanValue();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:()
scanValue	YAMLParser.cpp	/^bool Scanner::scanValue() {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:()
scan_ns_uri_char	YAMLParser.cpp	/^  void scan_ns_uri_char();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
scan_ns_uri_char	YAMLParser.cpp	/^void Scanner::scan_ns_uri_char() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
sdiv	APInt.cpp	/^APInt APInt::sdiv(const APInt &RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
sdiv_ov	APInt.cpp	/^APInt APInt::sdiv_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
sdivrem	APInt.cpp	/^void APInt::sdivrem(const APInt &LHS, const APInt &RHS,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & LHS,const APInt & RHS,APInt & Quotient,APInt & Remainder)
seek	raw_ostream.cpp	/^uint64_t raw_fd_ostream::seek(uint64_t off) {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:uint64_t	signature:(uint64_t off)
semanticsMaxExponent	APFloat.cpp	/^  APFloatBase::semanticsMaxExponent(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:APFloatBase::ExponentType	signature:(const fltSemantics & semantics)
semanticsMinExponent	APFloat.cpp	/^  APFloatBase::semanticsMinExponent(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:APFloatBase::ExponentType	signature:(const fltSemantics & semantics)
semanticsPrecision	APFloat.cpp	/^  unsigned int APFloatBase::semanticsPrecision(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:unsigned int	signature:(const fltSemantics & semantics)
semanticsSizeInBits	APFloat.cpp	/^  unsigned int APFloatBase::semanticsSizeInBits(const fltSemantics &semantics) {$/;"	kind:f	class:llvm::APFloatBase	typeref:typename:unsigned int	signature:(const fltSemantics & semantics)
separators	Path.cpp	/^  const char  separators = '\/';$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char
separators	Path.cpp	/^  const char *separators = "\\\\\/";$/;"	kind:v	namespace:__anon912220430110	typeref:typename:const char *
setArch	Triple.cpp	/^void Triple::setArch(ArchType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(ArchType Kind)
setArchName	Triple.cpp	/^void Triple::setArchName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
setArgStr	CommandLine.cpp	/^void Option::setArgStr(StringRef S) {$/;"	kind:f	class:Option	typeref:typename:void	signature:(StringRef S)
setBit	APInt.cpp	/^void APInt::setBit(unsigned bitPosition) {$/;"	kind:f	class:APInt	typeref:typename:void	signature:(unsigned bitPosition)
setContext	YAMLTraits.cpp	/^void IO::setContext(void *Context) {$/;"	kind:f	class:IO	typeref:typename:void	signature:(void * Context)
setCurrentDebugType	Debug.cpp	/^void setCurrentDebugType(const char *Type) {$/;"	kind:f	namespace:llvm	typeref:typename:void	signature:(const char * Type)
setCurrentDocument	YAMLTraits.cpp	/^bool Input::setCurrentDocument() {$/;"	kind:f	class:Input	typeref:typename:bool	signature:()
setEnvironment	Triple.cpp	/^void Triple::setEnvironment(EnvironmentType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(EnvironmentType Kind)
setEnvironmentName	Triple.cpp	/^void Triple::setEnvironmentName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
setError	YAMLParser.cpp	/^  void setError(const Twine &Message) {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:public	signature:(const Twine & Message)
setError	YAMLParser.cpp	/^  void setError(const Twine &Message, StringRef::iterator Position) {$/;"	kind:f	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:public	signature:(const Twine & Message,StringRef::iterator Position)
setError	YAMLParser.cpp	/^void Document::setError(const Twine &Message, Token &Location) const {$/;"	kind:f	class:Document	typeref:typename:void	signature:(const Twine & Message,Token & Location) const
setError	YAMLParser.cpp	/^void Node::setError(const Twine &Msg, Token &Tok) const {$/;"	kind:f	class:Node	typeref:typename:void	signature:(const Twine & Msg,Token & Tok) const
setError	YAMLTraits.cpp	/^void Input::setError(HNode *hnode, const Twine &message) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(HNode * hnode,const Twine & message)
setError	YAMLTraits.cpp	/^void Input::setError(Node *node, const Twine &message) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(Node * node,const Twine & message)
setError	YAMLTraits.cpp	/^void Input::setError(const Twine &Message) {$/;"	kind:f	class:Input	typeref:typename:void	signature:(const Twine & Message)
setError	YAMLTraits.cpp	/^void Output::setError(const Twine &message) {$/;"	kind:f	class:Output	typeref:typename:void	signature:(const Twine & message)
setInstance	ThreadLocal.cpp	/^void ThreadLocalImpl::setInstance(const void* d) {$/;"	kind:f	class:llvm::ThreadLocalImpl	typeref:typename:void	signature:(const void * d)
setOS	Triple.cpp	/^void Triple::setOS(OSType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(OSType Kind)
setOSAndEnvironmentName	Triple.cpp	/^void Triple::setOSAndEnvironmentName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
setOSName	Triple.cpp	/^void Triple::setOSName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
setObjectFormat	Triple.cpp	/^void Triple::setObjectFormat(ObjectFormatType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(ObjectFormatType Kind)
setSwitchedThread	CrashRecoveryContext.cpp	/^  void setSwitchedThread() { $/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	typeref:typename:void	file:	access:public	signature:()
setThreadBackgroundPriority	CrashRecoveryContext.cpp	/^static void setThreadBackgroundPriority() {$/;"	kind:f	typeref:typename:void	file:	signature:()
setTriple	Triple.cpp	/^void Triple::setTriple(const Twine &Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(const Twine & Str)
setVendor	Triple.cpp	/^void Triple::setVendor(VendorType Kind) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(VendorType Kind)
setVendorName	Triple.cpp	/^void Triple::setVendorName(StringRef Str) {$/;"	kind:f	class:Triple	typeref:typename:void	signature:(StringRef Str)
set_fixed_execution_hash_seed	Hashing.cpp	/^void llvm::set_fixed_execution_hash_seed(size_t fixed_value) {$/;"	kind:f	class:llvm	typeref:typename:void	signature:(size_t fixed_value)
setbits	regex2.h	/^	uch *setbits;		\/* -> uch[csetsize][ncsets\/CHAR_BIT] *\/$/;"	kind:m	struct:re_guts	typeref:typename:uch *	access:public
seterr	regcomp.c	/^seterr(struct parse *p, int e)$/;"	kind:f	typeref:typename:int	file:	signature:(struct parse * p,int e)
seterr	regcomp.c	/^static int seterr(struct parse *, int);$/;"	kind:p	typeref:typename:int	file:	signature:(struct parse *,int)
sets	regex2.h	/^	cset *sets;		\/* -> cset [ncsets] *\/$/;"	kind:m	struct:re_guts	typeref:typename:cset *	access:public
sext	APInt.cpp	/^APInt APInt::sext(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
sextOrSelf	APInt.cpp	/^APInt APInt::sextOrSelf(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
sextOrTrunc	APInt.cpp	/^APInt APInt::sextOrTrunc(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
shiftRight	APFloat.cpp	/^shiftRight(integerPart *dst, unsigned int parts, unsigned int bits)$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(integerPart * dst,unsigned int parts,unsigned int bits)
shiftSignificandLeft	APFloat.cpp	/^void IEEEFloat::shiftSignificandLeft(unsigned int bits) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(unsigned int bits)
shiftSignificandRight	APFloat.cpp	/^lostFraction IEEEFloat::shiftSignificandRight(unsigned int bits) {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:lostFraction	signature:(unsigned int bits)
shl	APInt.cpp	/^APInt APInt::shl(const APInt &shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & shiftAmt) const
shlSlowCase	APInt.cpp	/^APInt APInt::shlSlowCase(unsigned shiftAmt) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned shiftAmt) const
shouldUseMmap	MemoryBuffer.cpp	/^static bool shouldUseMmap(int FD,$/;"	kind:f	typeref:typename:bool	file:	signature:(int FD,size_t FileSize,size_t MapSize,off_t Offset,bool RequiresNullTerminator,int PageSize,bool IsVolatileSize)
shrink_and_clear	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::shrink_and_clear() {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:()
significandLSB	APFloat.cpp	/^unsigned int IEEEFloat::significandLSB() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:() const
significandMSB	APFloat.cpp	/^unsigned int IEEEFloat::significandMSB() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:unsigned int	signature:() const
significandParts	APFloat.cpp	/^const integerPart *IEEEFloat::significandParts() const {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:const integerPart *	signature:() const
significandParts	APFloat.cpp	/^integerPart *IEEEFloat::significandParts() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:integerPart *	signature:()
sizeInBits	APFloat.cpp	/^    unsigned int sizeInBits;$/;"	kind:m	struct:llvm::fltSemantics	typeref:typename:unsigned int	file:	access:public
skip	YAMLParser.cpp	/^  void skip(uint32_t Distance);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:(uint32_t Distance)
skip	YAMLParser.cpp	/^bool Document::skip()  {$/;"	kind:f	class:Document	typeref:typename:bool	signature:()
skip	YAMLParser.cpp	/^void Scanner::skip(uint32_t Distance) {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:(uint32_t Distance)
skip	YAMLParser.cpp	/^void Stream::skip() {$/;"	kind:f	class:Stream	typeref:typename:void	signature:()
skipComment	YAMLParser.cpp	/^  void skipComment();$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:void	file:	access:private	signature:()
skipComment	YAMLParser.cpp	/^void Scanner::skipComment() {$/;"	kind:f	class:Scanner	typeref:typename:void	signature:()
skipIfAtLineEnd	LineIterator.cpp	/^static bool skipIfAtLineEnd(const char *&P) {$/;"	kind:f	typeref:typename:bool	file:	signature:(const char * & P)
skipLeadingZeroesAndAnyDot	APFloat.cpp	/^skipLeadingZeroesAndAnyDot(StringRef::iterator begin, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:StringRef::iterator	file:	signature:(StringRef::iterator begin,StringRef::iterator end,StringRef::iterator * dot)
skip_b_break	YAMLParser.cpp	/^  StringRef::iterator skip_b_break(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
skip_b_break	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_b_break(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
skip_nb_char	YAMLParser.cpp	/^  StringRef::iterator skip_nb_char(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
skip_nb_char	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_nb_char(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
skip_ns_char	YAMLParser.cpp	/^  StringRef::iterator skip_ns_char(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
skip_ns_char	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_ns_char(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
skip_s_space	YAMLParser.cpp	/^  StringRef::iterator skip_s_space(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
skip_s_space	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_s_space(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
skip_s_white	YAMLParser.cpp	/^  StringRef::iterator skip_s_white(StringRef::iterator Position);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(StringRef::iterator Position)
skip_s_white	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_s_white(StringRef::iterator Position) {$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(StringRef::iterator Position)
skip_while	YAMLParser.cpp	/^  StringRef::iterator skip_while( SkipWhileFunc Func$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:StringRef::iterator	file:	access:private	signature:(SkipWhileFunc Func,StringRef::iterator Position)
skip_while	YAMLParser.cpp	/^StringRef::iterator Scanner::skip_while( SkipWhileFunc Func$/;"	kind:f	class:Scanner	typeref:typename:StringRef::iterator	signature:(SkipWhileFunc Func,StringRef::iterator Position)
slen	regcomp.c	/^	sopno slen;		\/* malloced strip length (used) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno	file:	access:public
slt	APInt.cpp	/^bool APInt::slt(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const APInt & RHS) const
smul_ov	APInt.cpp	/^APInt APInt::smul_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
smultis	regex2.h	/^	size_t smultis;$/;"	kind:m	struct:__anon0767ba880108	typeref:typename:size_t	access:public
snprintf	regerror.c	/^#define snprintf /;"	kind:d	file:
sop	regex2.h	/^typedef unsigned long sop;	\/* strip operator *\/$/;"	kind:t	typeref:typename:unsigned long
sopno	regex2.h	/^typedef long sopno;$/;"	kind:t	typeref:typename:long
sort	Statistic.cpp	/^  void sort();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo	typeref:typename:void	file:	access:private	signature:()
sort	Statistic.cpp	/^void StatisticInfo::sort() {$/;"	kind:f	class:StatisticInfo	typeref:typename:void	signature:()
sortOpts	CommandLine.cpp	/^static void sortOpts(StringMap<Option *> &OptMap,$/;"	kind:f	typeref:typename:void	file:	signature:(StringMap<Option * > & OptMap,SmallVectorImpl<std::pair<const char *,Option * >> & Opts,bool ShowHidden)
sortSubCommands	CommandLine.cpp	/^sortSubCommands(const SmallPtrSetImpl<SubCommand *> &SubMap,$/;"	kind:f	typeref:typename:void	file:	signature:(const SmallPtrSetImpl<SubCommand * > & SubMap,SmallVectorImpl<std::pair<const char *,SubCommand * >> & Subs)
split	StringRef.cpp	/^void StringRef::split(SmallVectorImpl<StringRef> &A, char Separator,$/;"	kind:f	class:StringRef	typeref:typename:void	signature:(SmallVectorImpl<StringRef> & A,char Separator,int MaxSplit,bool KeepEmpty) const
split	StringRef.cpp	/^void StringRef::split(SmallVectorImpl<StringRef> &A,$/;"	kind:f	class:StringRef	typeref:typename:void	signature:(SmallVectorImpl<StringRef> & A,StringRef Separator,int MaxSplit,bool KeepEmpty) const
splitLiteralAndReplacement	FormatVariadic.cpp	/^formatv_object_base::splitLiteralAndReplacement(StringRef Fmt) {$/;"	kind:f	class:formatv_object_base	typeref:typename:std::pair<ReplacementItem,StringRef>	signature:(StringRef Fmt)
sqrt	APInt.cpp	/^APInt APInt::sqrt() const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:() const
srem	APInt.cpp	/^APInt APInt::srem(const APInt &RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
sshl_ov	APInt.cpp	/^APInt APInt::sshl_ov(const APInt &ShAmt, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & ShAmt,bool & Overflow) const
ssize	regcomp.c	/^	sopno ssize;		\/* malloced strip size (allocated) *\/$/;"	kind:m	struct:parse	typeref:typename:sopno	file:	access:public
ssub_ov	APInt.cpp	/^APInt APInt::ssub_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
startTimer	Timer.cpp	/^void Timer::startTimer() {$/;"	kind:f	class:Timer	typeref:typename:void	signature:()
startswith	Path.cpp	/^static bool startswith(StringRef Magic, const char (&S)[N]) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	file:	signature:(StringRef Magic,const char (& S)[N])
startswith_lower	StringRef.cpp	/^bool StringRef::startswith_lower(StringRef Prefix) const {$/;"	kind:f	class:StringRef	typeref:typename:bool	signature:(StringRef Prefix) const
states	regexec.c	/^#define	states	/;"	kind:d	file:
states1	regexec.c	/^#define	states1	/;"	kind:d	file:
status	Path.cpp	/^std::error_code directory_entry::status(file_status &result) const {$/;"	kind:f	class:llvm::sys::fs::directory_entry	typeref:typename:std::error_code	signature:(file_status & result) const
status_known	Path.cpp	/^bool status_known(file_status s) {$/;"	kind:f	namespace:llvm::sys::fs	typeref:typename:bool	signature:(file_status s)
stem	Path.cpp	/^StringRef stem(StringRef path) {$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:StringRef	signature:(StringRef path)
stopTimer	Timer.cpp	/^void Timer::stopTimer() {$/;"	kind:f	class:Timer	typeref:typename:void	signature:()
str	Twine.cpp	/^std::string Twine::str() const {$/;"	kind:f	class:Twine	typeref:typename:std::string	signature:() const
stringifyResult	MD5.cpp	/^void MD5::stringifyResult(MD5Result &Result, SmallString<32> &Str) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(MD5Result & Result,SmallString<32> & Str)
strip	regcomp.c	/^	sop *strip;		\/* malloced strip *\/$/;"	kind:m	struct:parse	typeref:typename:sop *	file:	access:public
strip	regex2.h	/^	sop *strip;		\/* malloced area for strip *\/$/;"	kind:m	struct:re_guts	typeref:typename:sop *	access:public
stripTrailingZeros	ScaledNumber.cpp	/^static std::string stripTrailingZeros(const std::string &Float) {$/;"	kind:f	typeref:typename:std::string	file:	signature:(const std::string & Float)
stripsnug	regcomp.c	/^static void stripsnug(struct parse *, struct re_guts *);$/;"	kind:p	typeref:typename:void	file:	signature:(struct parse *,struct re_guts *)
stripsnug	regcomp.c	/^stripsnug(struct parse *p, struct re_guts *g)$/;"	kind:f	typeref:typename:void	file:	signature:(struct parse * p,struct re_guts * g)
strm	Debug.cpp	/^    circular_raw_ostream strm;$/;"	kind:m	struct:llvm::dbgs::dbgstream	typeref:typename:circular_raw_ostream	file:	access:public
sub	APInt.cpp	/^static bool sub(uint64_t *dest, const uint64_t *x, const uint64_t *y,$/;"	kind:f	typeref:typename:bool	file:	signature:(uint64_t * dest,const uint64_t * x,const uint64_t * y,unsigned len)
sub	Regex.cpp	/^std::string Regex::sub(StringRef Repl, StringRef String,$/;"	kind:f	class:Regex	typeref:typename:std::string	signature:(StringRef Repl,StringRef String,std::string * Error)
sub_1	APInt.cpp	/^static bool sub_1(uint64_t x[], unsigned len, uint64_t y) {$/;"	kind:f	typeref:typename:bool	file:	signature:(uint64_t x[],unsigned len,uint64_t y)
subtract	APFloat.cpp	/^IEEEFloat::opStatus IEEEFloat::subtract(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:IEEEFloat::opStatus	signature:(const IEEEFloat & rhs,roundingMode rounding_mode)
subtractSignificand	APFloat.cpp	/^integerPart IEEEFloat::subtractSignificand(const IEEEFloat &rhs,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:integerPart	signature:(const IEEEFloat & rhs,integerPart borrow)
succ_begin	DAGDeltaAlgorithm.cpp	/^  succ_iterator_ty succ_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_iterator_ty	file:	access:private	signature:(change_ty Node)
succ_closure_begin	DAGDeltaAlgorithm.cpp	/^  succ_closure_iterator_ty succ_closure_begin(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
succ_closure_end	DAGDeltaAlgorithm.cpp	/^  succ_closure_iterator_ty succ_closure_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_closure_iterator_ty	file:	access:private	signature:(change_ty Node)
succ_closure_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::set<change_ty>::iterator succ_closure_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::set<change_ty>::iterator	file:	access:private
succ_end	DAGDeltaAlgorithm.cpp	/^  succ_iterator_ty succ_end(change_ty Node) {$/;"	kind:f	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:succ_iterator_ty	file:	access:private	signature:(change_ty Node)
succ_iterator_ty	DAGDeltaAlgorithm.cpp	/^  typedef std::vector<change_ty>::iterator succ_iterator_ty;$/;"	kind:t	class:__anon664fcfb30110::DAGDeltaAlgorithmImpl	typeref:typename:std::vector<change_ty>::iterator	file:	access:private
swap	SmallPtrSet.cpp	/^void SmallPtrSetImplBase::swap(SmallPtrSetImplBase &RHS) {$/;"	kind:f	class:SmallPtrSetImplBase	typeref:typename:void	signature:(SmallPtrSetImplBase & RHS)
sys	Errno.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
sys	Locale.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
sys	Path.cpp	/^namespace sys  {$/;"	kind:n	namespace:llvm	file:
sys	Path.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
sys	Unicode.cpp	/^namespace sys {$/;"	kind:n	namespace:llvm	file:
sys	Unix/Unix.h	/^namespace sys {$/;"	kind:n	namespace:llvm
sys	Windows/WindowsSupport.h	/^namespace sys {$/;"	kind:n	namespace:llvm
sys::CAP_AES	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
sys::CAP_PMULL	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
sys::CAP_SHA1	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
sys::CAP_SHA2	Host.cpp	/^  enum { CAP_AES = 0x1, CAP_PMULL = 0x2, CAP_SHA1 = 0x4, CAP_SHA2 = 0x8 };$/;"	kind:e	enum:sys::getHostCPUFeatures::__anon6346c9340203	file:	access:public
sys::CompareAndSwap	Atomic.cpp	/^sys::cas_flag sys::CompareAndSwap(volatile sys::cas_flag* ptr,$/;"	kind:f	class:sys	typeref:typename:sys::cas_flag	signature:(volatile sys::cas_flag * ptr,sys::cas_flag new_value,sys::cas_flag old_value)
sys::ExecuteAndWait	Program.cpp	/^int sys::ExecuteAndWait(StringRef Program, const char **args, const char **envp,$/;"	kind:f	class:sys	typeref:typename:int	signature:(StringRef Program,const char ** args,const char ** envp,const StringRef ** redirects,unsigned secondsToWait,unsigned memoryLimit,std::string * ErrMsg,bool * ExecutionFailed)
sys::ExecuteNoWait	Program.cpp	/^ProcessInfo sys::ExecuteNoWait(StringRef Program, const char **args,$/;"	kind:f	class:sys	typeref:typename:ProcessInfo	signature:(StringRef Program,const char ** args,const char ** envp,const StringRef ** redirects,unsigned memoryLimit,std::string * ErrMsg,bool * ExecutionFailed)
sys::MemoryFence	Atomic.cpp	/^void sys::MemoryFence() {$/;"	kind:f	class:sys	typeref:typename:void	signature:()
sys::getHostCPUFeatures	Host.cpp	/^bool sys::getHostCPUFeatures(StringMap<bool> &Features) { return false; }$/;"	kind:f	class:sys	typeref:typename:bool	signature:(StringMap<bool> & Features)
sys::getHostCPUFeatures	Host.cpp	/^bool sys::getHostCPUFeatures(StringMap<bool> &Features) {$/;"	kind:f	class:sys	typeref:typename:bool	signature:(StringMap<bool> & Features)
sys::getHostCPUFeatures::__anon6346c934010a::c	Host.cpp	/^    char c[12];$/;"	kind:m	union:sys::getHostCPUFeatures::__anon6346c934010a	typeref:typename:char[12]	file:	access:public
sys::getHostCPUFeatures::__anon6346c934010a::u	Host.cpp	/^    unsigned u[3];$/;"	kind:m	union:sys::getHostCPUFeatures::__anon6346c934010a	typeref:typename:unsigned[3]	file:	access:public
sys::getHostCPUName	Host.cpp	/^StringRef sys::getHostCPUName() { return "generic"; }$/;"	kind:f	class:sys	typeref:typename:StringRef	signature:()
sys::getHostCPUName	Host.cpp	/^StringRef sys::getHostCPUName() {$/;"	kind:f	class:sys	typeref:typename:StringRef	signature:()
sys::getHostNumPhysicalCores	Host.cpp	/^int sys::getHostNumPhysicalCores() {$/;"	kind:f	class:sys	typeref:typename:int	signature:()
sys::getProcessTriple	Host.cpp	/^std::string sys::getProcessTriple() {$/;"	kind:f	class:sys	typeref:typename:std::string	signature:()
take	Windows/WindowsSupport.h	/^  handle_type take() {$/;"	kind:f	class:ScopedHandle	typeref:typename:handle_type	access:public	signature:()
targets	TargetRegistry.cpp	/^iterator_range<TargetRegistry::iterator> TargetRegistry::targets() {$/;"	kind:f	class:TargetRegistry	typeref:typename:iterator_range<TargetRegistry::iterator>	signature:()
tcAdd	APInt.cpp	/^APInt::tcAdd(integerPart *dst, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,const integerPart * rhs,integerPart c,unsigned int parts)
tcAnd	APInt.cpp	/^APInt::tcAnd(integerPart *dst, const integerPart *rhs, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * rhs,unsigned int parts)
tcAssign	APInt.cpp	/^APInt::tcAssign(integerPart *dst, const integerPart *src, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * src,unsigned int parts)
tcClearBit	APInt.cpp	/^APInt::tcClearBit(integerPart *parts, unsigned int bit)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * parts,unsigned int bit)
tcCompare	APInt.cpp	/^APInt::tcCompare(const integerPart *lhs, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(const integerPart * lhs,const integerPart * rhs,unsigned int parts)
tcComplement	APInt.cpp	/^APInt::tcComplement(integerPart *dst, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts)
tcDecrement	APInt.cpp	/^APInt::tcDecrement(integerPart *dst, unsigned int parts) {$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,unsigned int parts)
tcDivide	APInt.cpp	/^APInt::tcDivide(integerPart *lhs, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(integerPart * lhs,const integerPart * rhs,integerPart * remainder,integerPart * srhs,unsigned int parts)
tcExtract	APInt.cpp	/^APInt::tcExtract(integerPart *dst, unsigned int dstCount,const integerPart *src,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int dstCount,const integerPart * src,unsigned int srcBits,unsigned int srcLSB)
tcExtractBit	APInt.cpp	/^APInt::tcExtractBit(const integerPart *parts, unsigned int bit)$/;"	kind:f	class:APInt	typeref:typename:int	signature:(const integerPart * parts,unsigned int bit)
tcFullMultiply	APInt.cpp	/^APInt::tcFullMultiply(integerPart *dst, const integerPart *lhs,$/;"	kind:f	class:APInt	typeref:typename:unsigned int	signature:(integerPart * dst,const integerPart * lhs,const integerPart * rhs,unsigned int lhsParts,unsigned int rhsParts)
tcIncrement	APInt.cpp	/^APInt::tcIncrement(integerPart *dst, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,unsigned int parts)
tcIsZero	APInt.cpp	/^APInt::tcIsZero(const integerPart *src, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const integerPart * src,unsigned int parts)
tcLSB	APInt.cpp	/^APInt::tcLSB(const integerPart *parts, unsigned int n)$/;"	kind:f	class:APInt	typeref:typename:unsigned int	signature:(const integerPart * parts,unsigned int n)
tcMSB	APInt.cpp	/^APInt::tcMSB(const integerPart *parts, unsigned int n)$/;"	kind:f	class:APInt	typeref:typename:unsigned int	signature:(const integerPart * parts,unsigned int n)
tcMultiply	APInt.cpp	/^APInt::tcMultiply(integerPart *dst, const integerPart *lhs,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(integerPart * dst,const integerPart * lhs,const integerPart * rhs,unsigned int parts)
tcMultiplyPart	APInt.cpp	/^APInt::tcMultiplyPart(integerPart *dst, const integerPart *src,$/;"	kind:f	class:APInt	typeref:typename:int	signature:(integerPart * dst,const integerPart * src,integerPart multiplier,integerPart carry,unsigned int srcParts,unsigned int dstParts,bool add)
tcNegate	APInt.cpp	/^APInt::tcNegate(integerPart *dst, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts)
tcOr	APInt.cpp	/^APInt::tcOr(integerPart *dst, const integerPart *rhs, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * rhs,unsigned int parts)
tcSet	APInt.cpp	/^APInt::tcSet(integerPart *dst, integerPart part, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,integerPart part,unsigned int parts)
tcSetBit	APInt.cpp	/^APInt::tcSetBit(integerPart *parts, unsigned int bit)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * parts,unsigned int bit)
tcSetLeastSignificantBits	APInt.cpp	/^APInt::tcSetLeastSignificantBits(integerPart *dst, unsigned int parts,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts,unsigned int bits)
tcShiftLeft	APInt.cpp	/^APInt::tcShiftLeft(integerPart *dst, unsigned int parts, unsigned int count)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts,unsigned int count)
tcShiftRight	APInt.cpp	/^APInt::tcShiftRight(integerPart *dst, unsigned int parts, unsigned int count)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,unsigned int parts,unsigned int count)
tcSubtract	APInt.cpp	/^APInt::tcSubtract(integerPart *dst, const integerPart *rhs,$/;"	kind:f	class:APInt	typeref:typename:integerPart	signature:(integerPart * dst,const integerPart * rhs,integerPart c,unsigned int parts)
tcXor	APInt.cpp	/^APInt::tcXor(integerPart *dst, const integerPart *rhs, unsigned int parts)$/;"	kind:f	class:APInt	typeref:typename:void	signature:(integerPart * dst,const integerPart * rhs,unsigned int parts)
tlIsRecoveringFromCrash	CrashRecoveryContext.cpp	/^       tlIsRecoveringFromCrash;$/;"	kind:v	typeref:typename:ManagedStatic<sys::ThreadLocal<const CrashRecoveryContext>>	file:
toDuration	Unix/Unix.h	/^inline std::chrono::microseconds toDuration(const struct timeval &TV) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::chrono::microseconds	signature:(const struct timeval & TV)
toDuration	Windows/WindowsSupport.h	/^inline std::chrono::nanoseconds toDuration(FILETIME Time) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:std::chrono::nanoseconds	signature:(FILETIME Time)
toFILETIME	Windows/WindowsSupport.h	/^inline FILETIME toFILETIME(TimePoint<> TP) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:FILETIME	signature:(TimePoint<> TP)
toNullTerminatedStringRef	Twine.cpp	/^StringRef Twine::toNullTerminatedStringRef(SmallVectorImpl<char> &Out) const {$/;"	kind:f	class:Twine	typeref:typename:StringRef	signature:(SmallVectorImpl<char> & Out) const
toString	APFloat.cpp	/^void IEEEFloat::toString(SmallVectorImpl<char> &Str, unsigned FormatPrecision,$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:(SmallVectorImpl<char> & Str,unsigned FormatPrecision,unsigned FormatMaxPadding) const
toString	APInt.cpp	/^std::string APInt::toString(unsigned Radix = 10, bool Signed = true) const {$/;"	kind:f	class:APInt	typeref:typename:std::string	signature:(unsigned Radix=10,bool Signed=true) const
toString	APInt.cpp	/^void APInt::toString(SmallVectorImpl<char> &Str, unsigned Radix,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(SmallVectorImpl<char> & Str,unsigned Radix,bool Signed,bool formatAsCLiteral) const
toString	ScaledNumber.cpp	/^std::string ScaledNumberBase::toString(uint64_t D, int16_t E, int Width,$/;"	kind:f	class:ScaledNumberBase	typeref:typename:std::string	signature:(uint64_t D,int16_t E,int Width,unsigned Precision)
toStringAPFloat	ScaledNumber.cpp	/^static std::string toStringAPFloat(uint64_t D, int E, unsigned Precision) {$/;"	kind:f	typeref:typename:std::string	file:	signature:(uint64_t D,int E,unsigned Precision)
toTimePoint	Windows/WindowsSupport.h	/^inline TimePoint<> toTimePoint(FILETIME Time) {$/;"	kind:f	namespace:llvm::sys	typeref:typename:TimePoint<>	signature:(FILETIME Time)
toTimeSpec	Unix/Unix.h	/^inline struct timespec toTimeSpec(TimePoint<> TP) {$/;"	kind:f	namespace:llvm::sys	typeref:struct:timespec	signature:(TimePoint<> TP)
toTimeVal	Unix/Unix.h	/^inline struct timeval toTimeVal(TimePoint<std::chrono::microseconds> TP) {$/;"	kind:f	namespace:llvm::sys	typeref:struct:timeval	signature:(TimePoint<std::chrono::microseconds> TP)
toVector	Twine.cpp	/^void Twine::toVector(SmallVectorImpl<char> &Out) const {$/;"	kind:f	class:Twine	typeref:typename:void	signature:(SmallVectorImpl<char> & Out) const
to_hexString	ScopedPrinter.cpp	/^const std::string to_hexString(uint64_t Value, bool UpperCase) {$/;"	kind:f	namespace:llvm	typeref:typename:const std::string	signature:(uint64_t Value,bool UpperCase)
tool_output_file	ToolOutputFile.cpp	/^tool_output_file::tool_output_file(StringRef Filename, int FD)$/;"	kind:f	class:tool_output_file	signature:(StringRef Filename,int FD)
tool_output_file	ToolOutputFile.cpp	/^tool_output_file::tool_output_file(StringRef Filename, std::error_code &EC,$/;"	kind:f	class:tool_output_file	signature:(StringRef Filename,std::error_code & EC,sys::fs::OpenFlags Flags)
tool_output_file::CleanupInstaller::CleanupInstaller	ToolOutputFile.cpp	/^tool_output_file::CleanupInstaller::CleanupInstaller(StringRef Filename)$/;"	kind:f	class:tool_output_file::CleanupInstaller	signature:(StringRef Filename)
tool_output_file::CleanupInstaller::~CleanupInstaller	ToolOutputFile.cpp	/^tool_output_file::CleanupInstaller::~CleanupInstaller() {$/;"	kind:f	class:tool_output_file::CleanupInstaller	signature:()
tool_output_file::tool_output_file	ToolOutputFile.cpp	/^tool_output_file::tool_output_file(StringRef Filename, int FD)$/;"	kind:f	class:tool_output_file	signature:(StringRef Filename,int FD)
tool_output_file::tool_output_file	ToolOutputFile.cpp	/^tool_output_file::tool_output_file(StringRef Filename, std::error_code &EC,$/;"	kind:f	class:tool_output_file	signature:(StringRef Filename,std::error_code & EC,sys::fs::OpenFlags Flags)
totalExponent	APFloat.cpp	/^totalExponent(StringRef::iterator p, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:int	file:	signature:(StringRef::iterator p,StringRef::iterator end,int exponentAdjustment)
trailingBytesForUTF8	ConvertUTF.cpp	/^static const char trailingBytesForUTF8[256] = {$/;"	kind:v	namespace:llvm	typeref:typename:const char[256]	file:
trailingHexadecimalFraction	APFloat.cpp	/^trailingHexadecimalFraction(StringRef::iterator p, StringRef::iterator end,$/;"	kind:f	namespace:llvm	typeref:typename:lostFraction	file:	signature:(StringRef::iterator p,StringRef::iterator end,unsigned int digitValue)
translateLocChar	FormatVariadic.cpp	/^static Optional<AlignStyle> translateLocChar(char C) {$/;"	kind:f	typeref:typename:Optional<AlignStyle>	file:	signature:(char C)
trunc	APInt.cpp	/^APInt APInt::trunc(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
tryacquire	Mutex.cpp	/^MutexImpl::tryacquire()$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
tryacquire	Mutex.cpp	/^bool MutexImpl::tryacquire() { return true; }$/;"	kind:f	class:llvm::MutexImpl	typeref:typename:bool	signature:()
u	Host.cpp	/^    unsigned u[3];$/;"	kind:m	union:sys::getHostCPUFeatures::__anon6346c934010a	typeref:typename:unsigned[3]	file:	access:public
uadd_ov	APInt.cpp	/^APInt APInt::uadd_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
uch	regutils.h	/^typedef unsigned char uch;$/;"	kind:t	typeref:typename:unsigned char
udiv	APInt.cpp	/^APInt APInt::udiv(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
udivrem	APInt.cpp	/^void APInt::udivrem(const APInt &LHS, const APInt &RHS,$/;"	kind:f	class:APInt	typeref:typename:void	signature:(const APInt & LHS,const APInt & RHS,APInt & Quotient,APInt & Remainder)
ulpsFromBoundary	APFloat.cpp	/^ulpsFromBoundary(const integerPart *parts, unsigned int bits, bool isNearest)$/;"	kind:f	namespace:llvm	typeref:typename:integerPart	file:	signature:(const integerPart * parts,unsigned int bits,bool isNearest)
ult	APInt.cpp	/^bool APInt::ult(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:bool	signature:(const APInt & RHS) const
umul_ov	APInt.cpp	/^APInt APInt::umul_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
uncompress	Compression.cpp	/^zlib::Status zlib::uncompress(StringRef InputBuffer, char *UncompressedBuffer,$/;"	kind:f	class:zlib	typeref:typename:zlib::Status	signature:(StringRef InputBuffer,char * UncompressedBuffer,size_t & UncompressedSize)
uncompress	Compression.cpp	/^zlib::Status zlib::uncompress(StringRef InputBuffer,$/;"	kind:f	class:zlib	typeref:typename:zlib::Status	signature:(StringRef InputBuffer,SmallVectorImpl<char> & UncompressedBuffer,size_t UncompressedSize)
uncompress	IntEqClasses.cpp	/^void IntEqClasses::uncompress() {$/;"	kind:f	class:IntEqClasses	typeref:typename:void	signature:()
unescapeDoubleQuoted	YAMLParser.cpp	/^StringRef ScalarNode::unescapeDoubleQuoted( StringRef UnquotedValue$/;"	kind:f	class:ScalarNode	typeref:typename:StringRef	signature:(StringRef UnquotedValue,StringRef::size_type i,SmallVectorImpl<char> & Storage) const
unicode	Unicode.cpp	/^namespace unicode {$/;"	kind:n	namespace:llvm::sys	file:
unregisterCleanup	CrashRecoveryContext.cpp	/^CrashRecoveryContext::unregisterCleanup(CrashRecoveryContextCleanup *cleanup) {$/;"	kind:f	class:CrashRecoveryContext	typeref:typename:void	signature:(CrashRecoveryContextCleanup * cleanup)
unregisterSubCommand	CommandLine.cpp	/^  void unregisterSubCommand(SubCommand *sub) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(SubCommand * sub)
unregisterSubCommand	CommandLine.cpp	/^void SubCommand::unregisterSubCommand() {$/;"	kind:f	class:SubCommand	typeref:typename:void	signature:()
unrollIndent	YAMLParser.cpp	/^  bool unrollIndent(int ToColumn);$/;"	kind:p	class:llvm::yaml::Scanner	typeref:typename:bool	file:	access:private	signature:(int ToColumn)
unrollIndent	YAMLParser.cpp	/^bool Scanner::unrollIndent(int ToColumn) {$/;"	kind:f	class:Scanner	typeref:typename:bool	signature:(int ToColumn)
unsafeRemoveLockFile	LockFileManager.cpp	/^std::error_code LockFileManager::unsafeRemoveLockFile() {$/;"	kind:f	class:LockFileManager	typeref:typename:std::error_code	signature:()
update	JamCRC.cpp	/^void JamCRC::update(ArrayRef<char> Data) {$/;"	kind:f	class:JamCRC	typeref:typename:void	signature:(ArrayRef<char> Data)
update	MD5.cpp	/^void MD5::update(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(ArrayRef<uint8_t> Data)
update	MD5.cpp	/^void MD5::update(StringRef Str) {$/;"	kind:f	class:llvm::MD5	typeref:typename:void	signature:(StringRef Str)
update	SHA1.cpp	/^void SHA1::update(ArrayRef<uint8_t> Data) {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:(ArrayRef<uint8_t> Data)
updateArgStr	CommandLine.cpp	/^  void updateArgStr(Option *O, StringRef NewName) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,StringRef NewName)
updateArgStr	CommandLine.cpp	/^  void updateArgStr(Option *O, StringRef NewName, SubCommand *SC) {$/;"	kind:f	class:__anon2c11109d0110::CommandLineParser	typeref:typename:void	file:	access:public	signature:(Option * O,StringRef NewName,SubCommand * SC)
upper	StringRef.cpp	/^std::string StringRef::upper() const {$/;"	kind:f	class:StringRef	typeref:typename:std::string	signature:() const
urem	APInt.cpp	/^APInt APInt::urem(const APInt& RHS) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS) const
user_cache_directory	Path.cpp	/^bool user_cache_directory(SmallVectorImpl<char> &Result, const Twine &Path1,$/;"	kind:f	namespace:llvm::sys::path	typeref:typename:bool	signature:(SmallVectorImpl<char> & Result,const Twine & Path1,const Twine & Path2,const Twine & Path3)
ushl_ov	APInt.cpp	/^APInt APInt::ushl_ov(const APInt &ShAmt, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & ShAmt,bool & Overflow) const
usub_ov	APInt.cpp	/^APInt APInt::usub_ov(const APInt &RHS, bool &Overflow) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(const APInt & RHS,bool & Overflow) const
wait	ThreadPool.cpp	/^void ThreadPool::wait() {$/;"	kind:f	class:ThreadPool	typeref:typename:void	signature:()
waitForUnlock	LockFileManager.cpp	/^LockFileManager::WaitForUnlockResult LockFileManager::waitForUnlock() {$/;"	kind:f	class:LockFileManager	typeref:typename:LockFileManager::WaitForUnlockResult	signature:()
wasEscaped	YAMLParser.cpp	/^static bool wasEscaped(StringRef::iterator First,$/;"	kind:f	typeref:typename:bool	file:	signature:(StringRef::iterator First,StringRef::iterator Position)
wasEscaped	YAMLParser.cpp	/^wasEscaped(StringRef::iterator First, StringRef::iterator Position);$/;"	kind:p	typeref:typename:LLVM_ATTRIBUTE_NOINLINE bool	file:	signature:(StringRef::iterator First,StringRef::iterator Position)
widenPath	Windows/WindowsSupport.h	/^std::error_code widenPath(const Twine &Path8,$/;"	kind:p	namespace:llvm::sys::path	typeref:typename:std::error_code	signature:(const Twine & Path8,SmallVectorImpl<wchar_t> & Path16)
windows	Windows/WindowsSupport.h	/^namespace windows {$/;"	kind:n	namespace:llvm::sys
write	raw_ostream.cpp	/^raw_ostream &raw_ostream::write(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(const char * Ptr,size_t Size)
write	raw_ostream.cpp	/^raw_ostream &raw_ostream::write(unsigned char C) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned char C)
writeSignedDecimal	APFloat.cpp	/^writeSignedDecimal (char *dst, int value)$/;"	kind:f	namespace:llvm	typeref:typename:char *	file:	signature:(char * dst,int value)
writeTimestampFile	CachePruning.cpp	/^static void writeTimestampFile(StringRef TimestampFile) {$/;"	kind:f	typeref:typename:void	file:	signature:(StringRef TimestampFile)
writeUnsignedDecimal	APFloat.cpp	/^writeUnsignedDecimal (char *dst, unsigned int n)$/;"	kind:f	namespace:llvm	typeref:typename:char *	file:	signature:(char * dst,unsigned int n)
writeWithCommas	NativeFormatting.cpp	/^static void writeWithCommas(raw_ostream &S, ArrayRef<char> Buffer) {$/;"	kind:f	typeref:typename:void	file:	signature:(raw_ostream & S,ArrayRef<char> Buffer)
write_double	NativeFormatting.cpp	/^void llvm::write_double(raw_ostream &S, double N, FloatStyle Style,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,double N,FloatStyle Style,Optional<size_t> Precision)
write_escaped	raw_ostream.cpp	/^raw_ostream &raw_ostream::write_escaped(StringRef Str,$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(StringRef Str,bool UseHexEscapes)
write_hex	NativeFormatting.cpp	/^void llvm::write_hex(raw_ostream &S, uint64_t N, HexPrintStyle Style,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,uint64_t N,HexPrintStyle Style,Optional<size_t> Width)
write_hex	raw_ostream.cpp	/^raw_ostream &raw_ostream::write_hex(unsigned long long N) {$/;"	kind:f	class:raw_ostream	typeref:typename:raw_ostream &	signature:(unsigned long long N)
write_impl	FormattedStream.cpp	/^void formatted_raw_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:formatted_raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
write_impl	circular_raw_ostream.cpp	/^void circular_raw_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:circular_raw_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
write_impl	raw_os_ostream.cpp	/^void raw_os_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_os_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
write_impl	raw_ostream.cpp	/^void raw_fd_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_fd_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
write_impl	raw_ostream.cpp	/^void raw_null_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_null_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
write_impl	raw_ostream.cpp	/^void raw_string_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_string_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
write_impl	raw_ostream.cpp	/^void raw_svector_ostream::write_impl(const char *Ptr, size_t Size) {$/;"	kind:f	class:raw_svector_ostream	typeref:typename:void	signature:(const char * Ptr,size_t Size)
write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, int N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,int N,size_t MinDigits,IntegerStyle Style)
write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,long N,size_t MinDigits,IntegerStyle Style)
write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, long long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,long long N,size_t MinDigits,IntegerStyle Style)
write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, unsigned int N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,unsigned int N,size_t MinDigits,IntegerStyle Style)
write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, unsigned long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,unsigned long N,size_t MinDigits,IntegerStyle Style)
write_integer	NativeFormatting.cpp	/^void llvm::write_integer(raw_ostream &S, unsigned long long N, size_t MinDigits,$/;"	kind:f	class:llvm	typeref:typename:void	signature:(raw_ostream & S,unsigned long long N,size_t MinDigits,IntegerStyle Style)
write_signed	NativeFormatting.cpp	/^static void write_signed(raw_ostream &S, T N, size_t MinDigits,$/;"	kind:f	typeref:typename:void	file:	signature:(raw_ostream & S,T N,size_t MinDigits,IntegerStyle Style)
write_unsigned	NativeFormatting.cpp	/^static void write_unsigned(raw_ostream &S, T N, size_t MinDigits,$/;"	kind:f	typeref:typename:void	file:	signature:(raw_ostream & S,T N,size_t MinDigits,IntegerStyle Style,bool IsNegative=false)
write_unsigned_impl	NativeFormatting.cpp	/^static void write_unsigned_impl(raw_ostream &S, T N, size_t MinDigits,$/;"	kind:f	typeref:typename:void	file:	signature:(raw_ostream & S,T N,size_t MinDigits,IntegerStyle Style,bool IsNegative)
writebyte	SHA1.cpp	/^void SHA1::writebyte(uint8_t Data) {$/;"	kind:f	class:SHA1	typeref:typename:void	signature:(uint8_t Data)
writer_acquire	RWMutex.cpp	/^RWMutexImpl::writer_acquire()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
writer_acquire	RWMutex.cpp	/^bool RWMutexImpl::writer_acquire() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
writer_release	RWMutex.cpp	/^RWMutexImpl::writer_release()$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
writer_release	RWMutex.cpp	/^bool RWMutexImpl::writer_release() { return true; }$/;"	kind:f	class:llvm::RWMutexImpl	typeref:typename:bool	signature:()
x87DoubleExtended	APFloat.cpp	/^  const fltSemantics APFloatBase::x87DoubleExtended = {16383, -16382, 64, 80};$/;"	kind:m	class:llvm::APFloatBase	typeref:typename:const fltSemantics
xxHash64	xxhash.cpp	/^uint64_t llvm::xxHash64(StringRef Data) {$/;"	kind:f	class:llvm	typeref:typename:uint64_t	signature:(StringRef Data)
yaml	YAMLParser.cpp	/^namespace yaml {$/;"	kind:n	namespace:llvm	file:
yaml::dumpTokens	YAMLParser.cpp	/^bool yaml::dumpTokens(StringRef Input, raw_ostream &OS) {$/;"	kind:f	class:yaml	typeref:typename:bool	signature:(StringRef Input,raw_ostream & OS)
yaml::escape	YAMLParser.cpp	/^std::string yaml::escape(StringRef Input) {$/;"	kind:f	class:yaml	typeref:typename:std::string	signature:(StringRef Input)
yaml::scanTokens	YAMLParser.cpp	/^bool yaml::scanTokens(StringRef Input) {$/;"	kind:f	class:yaml	typeref:typename:bool	signature:(StringRef Input)
zeroSignificand	APFloat.cpp	/^void IEEEFloat::zeroSignificand() {$/;"	kind:f	class:llvm::detail::IEEEFloat	typeref:typename:void	signature:()
zext	APInt.cpp	/^APInt APInt::zext(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
zextOrSelf	APInt.cpp	/^APInt APInt::zextOrSelf(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
zextOrTrunc	APInt.cpp	/^APInt APInt::zextOrTrunc(unsigned width) const {$/;"	kind:f	class:APInt	typeref:typename:APInt	signature:(unsigned width) const
zlib::compress	Compression.cpp	/^zlib::Status zlib::compress(StringRef InputBuffer,$/;"	kind:f	class:zlib	typeref:typename:zlib::Status	signature:(StringRef InputBuffer,SmallVectorImpl<char> & CompressedBuffer,CompressionLevel Level)
zlib::crc32	Compression.cpp	/^uint32_t zlib::crc32(StringRef Buffer) {$/;"	kind:f	class:zlib	typeref:typename:uint32_t	signature:(StringRef Buffer)
zlib::isAvailable	Compression.cpp	/^bool zlib::isAvailable() { return false; }$/;"	kind:f	class:zlib	typeref:typename:bool	signature:()
zlib::isAvailable	Compression.cpp	/^bool zlib::isAvailable() { return true; }$/;"	kind:f	class:zlib	typeref:typename:bool	signature:()
zlib::uncompress	Compression.cpp	/^zlib::Status zlib::uncompress(StringRef InputBuffer, char *UncompressedBuffer,$/;"	kind:f	class:zlib	typeref:typename:zlib::Status	signature:(StringRef InputBuffer,char * UncompressedBuffer,size_t & UncompressedSize)
zlib::uncompress	Compression.cpp	/^zlib::Status zlib::uncompress(StringRef InputBuffer,$/;"	kind:f	class:zlib	typeref:typename:zlib::Status	signature:(StringRef InputBuffer,SmallVectorImpl<char> & UncompressedBuffer,size_t UncompressedSize)
~CleanupInstaller	ToolOutputFile.cpp	/^tool_output_file::CleanupInstaller::~CleanupInstaller() {$/;"	kind:f	class:tool_output_file::CleanupInstaller	signature:()
~CrashRecoveryContext	CrashRecoveryContext.cpp	/^CrashRecoveryContext::~CrashRecoveryContext() {$/;"	kind:f	class:CrashRecoveryContext	signature:()
~CrashRecoveryContextCleanup	CrashRecoveryContext.cpp	/^CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup() {}$/;"	kind:f	class:CrashRecoveryContextCleanup	signature:()
~CrashRecoveryContextImpl	CrashRecoveryContext.cpp	/^  ~CrashRecoveryContextImpl() {$/;"	kind:f	struct:__anon80fe52fb0110::CrashRecoveryContextImpl	file:	access:public	signature:()
~DeltaAlgorithm	DeltaAlgorithm.cpp	/^DeltaAlgorithm::~DeltaAlgorithm() {$/;"	kind:f	class:DeltaAlgorithm	signature:()
~FileOutputBuffer	FileOutputBuffer.cpp	/^FileOutputBuffer::~FileOutputBuffer() {$/;"	kind:f	class:llvm::FileOutputBuffer	signature:()
~FoldingSetImpl	FoldingSet.cpp	/^FoldingSetImpl::~FoldingSetImpl() {$/;"	kind:f	class:FoldingSetImpl	signature:()
~HelpPrinter	CommandLine.cpp	/^  virtual ~HelpPrinter() {}$/;"	kind:f	class:__anon2c11109d0510::HelpPrinter	file:	access:public	signature:()
~IEEEFloat	APFloat.cpp	/^IEEEFloat::~IEEEFloat() { freeSignificand(); }$/;"	kind:f	class:llvm::detail::IEEEFloat	signature:()
~IO	YAMLTraits.cpp	/^IO::~IO() {$/;"	kind:f	class:IO	signature:()
~Input	YAMLTraits.cpp	/^Input::~Input() {$/;"	kind:f	class:Input	signature:()
~LockFileManager	LockFileManager.cpp	/^LockFileManager::~LockFileManager() {$/;"	kind:f	class:LockFileManager	signature:()
~MemoryBuffer	MemoryBuffer.cpp	/^MemoryBuffer::~MemoryBuffer() { }$/;"	kind:f	class:MemoryBuffer	signature:()
~MutexImpl	Mutex.cpp	/^MutexImpl::~MutexImpl() { }$/;"	kind:f	class:llvm::MutexImpl	signature:()
~MutexImpl	Mutex.cpp	/^MutexImpl::~MutexImpl()$/;"	kind:f	class:llvm::MutexImpl	signature:()
~Name2PairMap	Timer.cpp	/^  ~Name2PairMap() {$/;"	kind:f	class:__anoncc40abd70210::Name2PairMap	file:	access:public	signature:()
~OptionRegistry	Options.cpp	/^OptionRegistry::~OptionRegistry() {$/;"	kind:f	class:OptionRegistry	signature:()
~Output	YAMLTraits.cpp	/^Output::~Output() {$/;"	kind:f	class:Output	signature:()
~PrettyStackTraceEntry	PrettyStackTrace.cpp	/^PrettyStackTraceEntry::~PrettyStackTraceEntry() {$/;"	kind:f	class:PrettyStackTraceEntry	signature:()
~RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::~RWMutexImpl() { }$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
~RWMutexImpl	RWMutex.cpp	/^RWMutexImpl::~RWMutexImpl()$/;"	kind:f	class:llvm::RWMutexImpl	signature:()
~Regex	Regex.cpp	/^Regex::~Regex() {$/;"	kind:f	class:Regex	signature:()
~RemoveUniqueLockFileOnSignal	LockFileManager.cpp	/^  ~RemoveUniqueLockFileOnSignal() {$/;"	kind:f	class:__anonb734c93a0110::RemoveUniqueLockFileOnSignal	file:	access:public	signature:()
~ScopedHandle	Windows/WindowsSupport.h	/^  ~ScopedHandle() {$/;"	kind:f	class:ScopedHandle	access:public	signature:()
~SourceMgr	SourceMgr.cpp	/^SourceMgr::~SourceMgr() {$/;"	kind:f	class:SourceMgr	signature:()
~SpecialCaseList	SpecialCaseList.cpp	/^SpecialCaseList::~SpecialCaseList() {}$/;"	kind:f	class:llvm::SpecialCaseList	signature:()
~StatisticInfo	Statistic.cpp	/^  ~StatisticInfo();$/;"	kind:p	class:__anon7a04bdce0110::StatisticInfo	file:	access:public	signature:()
~StatisticInfo	Statistic.cpp	/^StatisticInfo::~StatisticInfo() {$/;"	kind:f	class:StatisticInfo	signature:()
~Stream	YAMLParser.cpp	/^Stream::~Stream() {}$/;"	kind:f	class:Stream	signature:()
~StringPool	StringPool.cpp	/^StringPool::~StringPool() {$/;"	kind:f	class:StringPool	signature:()
~ThreadLocalImpl	ThreadLocal.cpp	/^ThreadLocalImpl::~ThreadLocalImpl() { }$/;"	kind:f	class:llvm::ThreadLocalImpl	signature:()
~ThreadPool	ThreadPool.cpp	/^ThreadPool::~ThreadPool() {$/;"	kind:f	class:ThreadPool	signature:()
~Timer	Timer.cpp	/^Timer::~Timer() {$/;"	kind:f	class:Timer	signature:()
~TimerGroup	Timer.cpp	/^TimerGroup::~TimerGroup() {$/;"	kind:f	class:TimerGroup	signature:()
~raw_fd_ostream	raw_ostream.cpp	/^raw_fd_ostream::~raw_fd_ostream() {$/;"	kind:f	class:raw_fd_ostream	signature:()
~raw_null_ostream	raw_ostream.cpp	/^raw_null_ostream::~raw_null_ostream() {$/;"	kind:f	class:raw_null_ostream	signature:()
~raw_os_ostream	raw_os_ostream.cpp	/^raw_os_ostream::~raw_os_ostream() {$/;"	kind:f	class:raw_os_ostream	signature:()
~raw_ostream	raw_ostream.cpp	/^raw_ostream::~raw_ostream() {$/;"	kind:f	class:raw_ostream	signature:()
~raw_string_ostream	raw_ostream.cpp	/^raw_string_ostream::~raw_string_ostream() {$/;"	kind:f	class:raw_string_ostream	signature:()
