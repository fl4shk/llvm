!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/249c3c0/
CALL	SPCPUISelLowering.h	/^  CALL$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
CTX	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  const MCContext &CTX;$/;"	kind:m	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:const MCContext &	file:	access:private
CanLowerReturn	SPCPUISelLowering.cpp	/^bool SPCPUTargetLowering::CanLowerReturn($/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:bool	signature:(CallingConv::ID CallConv,MachineFunction & MF,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & Outs,LLVMContext & Context) const
CanLowerReturn	SPCPUISelLowering.h	/^  bool CanLowerReturn(CallingConv::ID CallConv, MachineFunction &MF,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:bool	access:private	signature:(CallingConv::ID CallConv,MachineFunction & MF,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & ArgsFlags,LLVMContext & Context) const
Ctx	SPCPUMCInstLower.h	/^  MCContext *Ctx;$/;"	kind:m	class:llvm::SPCPUMCInstLower	typeref:typename:MCContext *	access:private
DEBUG_TYPE	InstPrinter/SPCPUInstPrinter.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	SPCPUAsmPrinter.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DEBUG_TYPE	SPCPUSubtarget.cpp	/^#define DEBUG_TYPE /;"	kind:d	file:
DL	SPCPUSubtarget.h	/^  const DataLayout DL;       \/\/ Calculates type size & alignment.$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:const DataLayout	access:private
ELFSPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^  ELFSPCPUAsmBackend(const Target &T, const StringRef TT, uint8_t _OSABI)$/;"	kind:f	class:__anon3c7e6baf0210::ELFSPCPUAsmBackend	file:	access:public	signature:(const Target & T,const StringRef TT,uint8_t _OSABI)
ELFSPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^class ELFSPCPUAsmBackend : public SPCPUAsmBackend {$/;"	kind:c	namespace:__anon3c7e6baf0210	file:	inherits:SPCPUAsmBackend
EmitByte	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void EmitByte(unsigned char C, raw_ostream &OS) const { OS << (char)C; }$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:public	signature:(unsigned char C,raw_ostream & OS) const
EmitConstant	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void EmitConstant(uint64_t Val, unsigned Size, raw_ostream &OS) const {$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:public	signature:(uint64_t Val,unsigned Size,raw_ostream & OS) const
EmitFunctionBodyStart	SPCPUAsmPrinter.cpp	/^  void EmitFunctionBodyStart();$/;"	kind:p	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:void	file:	access:public	signature:()
EmitFunctionBodyStart	SPCPUAsmPrinter.cpp	/^void SPCPUAsmPrinter::EmitFunctionBodyStart() {$/;"	kind:f	class:SPCPUAsmPrinter	typeref:typename:void	signature:()
EmitFunctionEntryLabel	SPCPUAsmPrinter.cpp	/^  void EmitFunctionEntryLabel();$/;"	kind:p	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:void	file:	access:public	signature:()
EmitFunctionEntryLabel	SPCPUAsmPrinter.cpp	/^void SPCPUAsmPrinter::EmitFunctionEntryLabel() {$/;"	kind:f	class:SPCPUAsmPrinter	typeref:typename:void	signature:()
EmitInstruction	SPCPUAsmPrinter.cpp	/^  void EmitInstruction(const MachineInstr *MI);$/;"	kind:p	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:void	file:	access:public	signature:(const MachineInstr * MI)
EmitInstruction	SPCPUAsmPrinter.cpp	/^void SPCPUAsmPrinter::EmitInstruction(const MachineInstr *MI) {$/;"	kind:f	class:SPCPUAsmPrinter	typeref:typename:void	signature:(const MachineInstr * MI)
FIRST_NUMBER	SPCPUISelLowering.h	/^  FIRST_NUMBER = ISD::BUILTIN_OP_END,$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
FrameLowering	SPCPUSubtarget.h	/^  SPCPUFrameLowering FrameLowering;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUFrameLowering	access:private
GET_INSTRINFO_CTOR_DTOR	SPCPUInstrInfo.cpp	/^#define GET_INSTRINFO_CTOR_DTOR$/;"	kind:d	file:
GET_INSTRINFO_ENUM	MCTargetDesc/SPCPUMCTargetDesc.h	/^#define GET_INSTRINFO_ENUM$/;"	kind:d
GET_INSTRINFO_HEADER	SPCPUInstrInfo.h	/^#define GET_INSTRINFO_HEADER$/;"	kind:d
GET_INSTRINFO_MC_DESC	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^#define GET_INSTRINFO_MC_DESC$/;"	kind:d	file:
GET_INSTRUCTION_NAME	InstPrinter/SPCPUInstPrinter.cpp	/^#define GET_INSTRUCTION_NAME$/;"	kind:d	file:
GET_REGINFO_ENUM	MCTargetDesc/SPCPUMCTargetDesc.h	/^#define GET_REGINFO_ENUM$/;"	kind:d
GET_REGINFO_HEADER	SPCPURegisterInfo.h	/^#define GET_REGINFO_HEADER$/;"	kind:d
GET_REGINFO_MC_DESC	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^#define GET_REGINFO_MC_DESC$/;"	kind:d	file:
GET_REGINFO_TARGET_DESC	SPCPURegisterInfo.cpp	/^#define GET_REGINFO_TARGET_DESC$/;"	kind:d	file:
GET_SUBTARGETINFO_CTOR	SPCPUSubtarget.cpp	/^#define GET_SUBTARGETINFO_CTOR$/;"	kind:d	file:
GET_SUBTARGETINFO_ENUM	MCTargetDesc/SPCPUMCTargetDesc.h	/^#define GET_SUBTARGETINFO_ENUM$/;"	kind:d
GET_SUBTARGETINFO_HEADER	SPCPUSubtarget.h	/^#define GET_SUBTARGETINFO_HEADER$/;"	kind:d
GET_SUBTARGETINFO_MC_DESC	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^#define GET_SUBTARGETINFO_MC_DESC$/;"	kind:d	file:
GET_SUBTARGETINFO_TARGET_DESC	SPCPUSubtarget.cpp	/^#define GET_SUBTARGETINFO_TARGET_DESC$/;"	kind:d	file:
Initialize	SPCPUMCInstLower.cpp	/^void SPCPUMCInstLower::Initialize(Mangler *M, MCContext *C) {$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:void	signature:(Mangler * M,MCContext * C)
Initialize	SPCPUMCInstLower.h	/^  void Initialize(Mangler *mang, MCContext *C);$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:void	access:public	signature:(Mangler * mang,MCContext * C)
InstrInfo	SPCPUSubtarget.h	/^  SPCPUInstrInfo InstrInfo;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUInstrInfo	access:private
InstrItins	SPCPUSubtarget.h	/^  InstrItineraryData InstrItins;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:InstrItineraryData	access:private
LLVMInitializeSPCPUAsmParser	AsmParser/SPCPUAsmParser.cpp	/^extern "C" void LLVMInitializeSPCPUAsmParser() {$/;"	kind:f	typeref:typename:void	signature:()
LLVMInitializeSPCPUAsmPrinter	SPCPUAsmPrinter.cpp	/^extern "C" void LLVMInitializeSPCPUAsmPrinter() {$/;"	kind:f	typeref:typename:void	signature:()
LLVMInitializeSPCPUDisassembler	Disassembler/SPCPUDisassembler.cpp	/^extern "C" void LLVMInitializeSPCPUDisassembler() {$/;"	kind:f	typeref:typename:void	signature:()
LLVMInitializeSPCPUTarget	SPCPUTargetMachine.cpp	/^extern "C" void LLVMInitializeSPCPUTarget() {$/;"	kind:f	typeref:typename:void	signature:()
LLVMInitializeSPCPUTargetInfo	TargetInfo/SPCPUTargetInfo.cpp	/^extern "C" void LLVMInitializeSPCPUTargetInfo() {$/;"	kind:f	typeref:typename:void	signature:()
LLVMInitializeSPCPUTargetMC	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^extern "C" void LLVMInitializeSPCPUTargetMC() {$/;"	kind:f	typeref:typename:void	signature:()
LOAD_SYM	SPCPUISelLowering.h	/^  LOAD_SYM,$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
Lower	SPCPUMCInstLower.cpp	/^void SPCPUMCInstLower::Lower(const MachineInstr *MI, MCInst &OutMI) const {$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:void	signature:(const MachineInstr * MI,MCInst & OutMI) const
Lower	SPCPUMCInstLower.h	/^  void Lower(const MachineInstr *MI, MCInst &OutMI) const;$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:void	access:public	signature:(const MachineInstr * MI,MCInst & OutMI) const
LowerCall	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(TargetLowering::CallLoweringInfo & CLI,SmallVectorImpl<SDValue> & InVals) const
LowerCall	SPCPUISelLowering.h	/^  SDValue LowerCall(TargetLowering::CallLoweringInfo &CLI,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(TargetLowering::CallLoweringInfo & CLI,SmallVectorImpl<SDValue> & InVals) const
LowerCallResult	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerCallResult($/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Chain,SDValue InGlue,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,SDLoc dl,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
LowerCallResult	SPCPUISelLowering.h	/^  SDValue LowerCallResult(SDValue Chain, SDValue InGlue,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Chain,SDValue InGlue,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,SDLoc dl,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
LowerFormalArguments	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerFormalArguments(SDValue Chain, CallingConv::ID CallConv,$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,const SDLoc & DL,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
LowerFormalArguments	SPCPUISelLowering.h	/^  SDValue LowerFormalArguments(SDValue Chain, CallingConv::ID CallConv,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,const SDLoc & DL,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
LowerGlobalAddress	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerGlobalAddress(SDValue Op, SelectionDAG& DAG) const$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Op,SelectionDAG & DAG) const
LowerGlobalAddress	SPCPUISelLowering.h	/^  SDValue LowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const;$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Op,SelectionDAG & DAG) const
LowerOperand	SPCPUMCInstLower.cpp	/^MCOperand SPCPUMCInstLower::LowerOperand(const MachineOperand &MO,$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:MCOperand	signature:(const MachineOperand & MO,unsigned offset) const
LowerOperand	SPCPUMCInstLower.h	/^  MCOperand LowerOperand(const MachineOperand &MO, unsigned offset = 0) const;$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:MCOperand	access:public	signature:(const MachineOperand & MO,unsigned offset=0) const
LowerOperation	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerOperation(SDValue Op, SelectionDAG &DAG) const {$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Op,SelectionDAG & DAG) const
LowerOperation	SPCPUISelLowering.h	/^  virtual SDValue LowerOperation(SDValue Op, SelectionDAG &DAG) const override;$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:public	signature:(SDValue Op,SelectionDAG & DAG) const
LowerReturn	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerReturn(SDValue Chain, CallingConv::ID CallConv, bool isVarArg,$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & Outs,const SmallVectorImpl<SDValue> & OutVals,const SDLoc & DL,SelectionDAG & DAG) const
LowerReturn	SPCPUISelLowering.h	/^  SDValue LowerReturn(SDValue Chain, CallingConv::ID CallConv, bool isVarArg,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & Outs,const SmallVectorImpl<SDValue> & OutVals,const SDLoc & DL,SelectionDAG & DAG) const
LowerSymbolOperand	SPCPUMCInstLower.cpp	/^MCOperand SPCPUMCInstLower::LowerSymbolOperand(const MachineOperand &MO,$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:MCOperand	signature:(const MachineOperand & MO,MachineOperandType MOTy,unsigned Offset) const
LowerSymbolOperand	SPCPUMCInstLower.h	/^  MCOperand LowerSymbolOperand(const MachineOperand &MO,$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:MCOperand	access:private	signature:(const MachineOperand & MO,MachineOperandType MOTy,unsigned Offset) const
MCII	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  const MCInstrInfo &MCII;$/;"	kind:m	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:const MCInstrInfo &	file:	access:private
MachineOperandType	SPCPUMCInstLower.h	/^  typedef MachineOperand::MachineOperandType MachineOperandType;$/;"	kind:t	class:llvm::SPCPUMCInstLower	typeref:typename:MachineOperand::MachineOperandType	access:private
Mang	SPCPUMCInstLower.h	/^  Mangler *Mang;$/;"	kind:m	class:llvm::SPCPUMCInstLower	typeref:typename:Mangler *	access:private
NodeType	SPCPUISelLowering.h	/^enum NodeType {$/;"	kind:g	namespace:llvm::SPCPUISD
OSABI	MCTargetDesc/SPCPUAsmBackend.cpp	/^  uint8_t OSABI;$/;"	kind:m	class:__anon3c7e6baf0210::ELFSPCPUAsmBackend	typeref:typename:uint8_t	file:	access:public
ParseSubtargetFeatures	SPCPUSubtarget.h	/^  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);$/;"	kind:p	class:llvm::SPCPUSubtarget	typeref:typename:void	access:public	signature:(StringRef CPU,StringRef FS)
Printer	SPCPUMCInstLower.h	/^  AsmPrinter &Printer;$/;"	kind:m	class:llvm::SPCPUMCInstLower	typeref:typename:AsmPrinter &	access:private
RET_FLAG	SPCPUISelLowering.h	/^  RET_FLAG,$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
RI	SPCPUInstrInfo.h	/^  const SPCPURegisterInfo RI;$/;"	kind:m	class:llvm::SPCPUInstrInfo	typeref:typename:const SPCPURegisterInfo	access:private
SPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^  SPCPUAsmBackend(const Target &T, const StringRef TT) : MCAsmBackend() {}$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	file:	access:public	signature:(const Target & T,const StringRef TT)
SPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^class SPCPUAsmBackend : public MCAsmBackend {$/;"	kind:c	namespace:__anon3c7e6baf0110	file:	inherits:MCAsmBackend
SPCPUAsmPrinter	SPCPUAsmPrinter.cpp	/^  explicit SPCPUAsmPrinter(TargetMachine &TM,$/;"	kind:f	class:__anon8c6b42060110::SPCPUAsmPrinter	file:	access:public	signature:(TargetMachine & TM,std::unique_ptr<MCStreamer> Streamer)
SPCPUAsmPrinter	SPCPUAsmPrinter.cpp	/^class SPCPUAsmPrinter : public AsmPrinter {$/;"	kind:c	namespace:__anon8c6b42060110	file:	inherits:AsmPrinter
SPCPUAsmPrinter::EmitFunctionBodyStart	SPCPUAsmPrinter.cpp	/^void SPCPUAsmPrinter::EmitFunctionBodyStart() {$/;"	kind:f	class:SPCPUAsmPrinter	typeref:typename:void	signature:()
SPCPUAsmPrinter::EmitFunctionEntryLabel	SPCPUAsmPrinter.cpp	/^void SPCPUAsmPrinter::EmitFunctionEntryLabel() {$/;"	kind:f	class:SPCPUAsmPrinter	typeref:typename:void	signature:()
SPCPUAsmPrinter::EmitInstruction	SPCPUAsmPrinter.cpp	/^void SPCPUAsmPrinter::EmitInstruction(const MachineInstr *MI) {$/;"	kind:f	class:SPCPUAsmPrinter	typeref:typename:void	signature:(const MachineInstr * MI)
SPCPUDAGToDAGISel	SPCPUISelDAGToDAG.cpp	/^  explicit SPCPUDAGToDAGISel(SPCPUTargetMachine &TM, CodeGenOpt::Level OptLevel)$/;"	kind:f	class:__anone1cf9c490110::SPCPUDAGToDAGISel	file:	access:public	signature:(SPCPUTargetMachine & TM,CodeGenOpt::Level OptLevel)
SPCPUDAGToDAGISel	SPCPUISelDAGToDAG.cpp	/^class SPCPUDAGToDAGISel : public SelectionDAGISel {$/;"	kind:c	namespace:__anone1cf9c490110	file:	inherits:SelectionDAGISel
SPCPUDAGToDAGISel::Select	SPCPUISelDAGToDAG.cpp	/^void SPCPUDAGToDAGISel::Select(SDNode *N) {$/;"	kind:f	class:SPCPUDAGToDAGISel	typeref:typename:void	signature:(SDNode * N)
SPCPUDAGToDAGISel::SelectAddr	SPCPUISelDAGToDAG.cpp	/^bool SPCPUDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {$/;"	kind:f	class:SPCPUDAGToDAGISel	typeref:typename:bool	signature:(SDValue Addr,SDValue & Base,SDValue & Offset)
SPCPUELFObjectWriter	MCTargetDesc/SPCPUAsmBackend.cpp	/^  SPCPUELFObjectWriter(uint8_t OSABI)$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUELFObjectWriter	file:	access:public	signature:(uint8_t OSABI)
SPCPUELFObjectWriter	MCTargetDesc/SPCPUAsmBackend.cpp	/^class SPCPUELFObjectWriter : public MCELFObjectTargetWriter {$/;"	kind:c	namespace:__anon3c7e6baf0110	file:	inherits:MCELFObjectTargetWriter
SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^    SPCPUELFObjectWriter(uint8_t OSABI);$/;"	kind:p	class:__anon3589f0110110::SPCPUELFObjectWriter	file:	access:public	signature:(uint8_t OSABI)
SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^  class SPCPUELFObjectWriter : public MCELFObjectTargetWriter {$/;"	kind:c	namespace:__anon3589f0110110	file:	inherits:MCELFObjectTargetWriter
SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^SPCPUELFObjectWriter::SPCPUELFObjectWriter(uint8_t OSABI)$/;"	kind:f	class:SPCPUELFObjectWriter	signature:(uint8_t OSABI)
SPCPUELFObjectWriter::SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^SPCPUELFObjectWriter::SPCPUELFObjectWriter(uint8_t OSABI)$/;"	kind:f	class:SPCPUELFObjectWriter	signature:(uint8_t OSABI)
SPCPUELFObjectWriter::getRelocType	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^unsigned SPCPUELFObjectWriter::getRelocType(MCContext &Ctx, const MCValue &Target,$/;"	kind:f	class:SPCPUELFObjectWriter	typeref:typename:unsigned	signature:(MCContext & Ctx,const MCValue & Target,const MCFixup & Fixup,bool IsPCRel) const
SPCPUELFObjectWriter::~SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^SPCPUELFObjectWriter::~SPCPUELFObjectWriter() {}$/;"	kind:f	class:SPCPUELFObjectWriter	signature:()
SPCPUFrameLowering	SPCPUFrameLowering.cpp	/^SPCPUFrameLowering::SPCPUFrameLowering()$/;"	kind:f	class:SPCPUFrameLowering	signature:()
SPCPUFrameLowering	SPCPUFrameLowering.h	/^  SPCPUFrameLowering();$/;"	kind:p	class:llvm::SPCPUFrameLowering	access:public	signature:()
SPCPUFrameLowering	SPCPUFrameLowering.h	/^class SPCPUFrameLowering : public TargetFrameLowering {$/;"	kind:c	namespace:llvm	inherits:TargetFrameLowering
SPCPUFrameLowering::SPCPUFrameLowering	SPCPUFrameLowering.cpp	/^SPCPUFrameLowering::SPCPUFrameLowering()$/;"	kind:f	class:SPCPUFrameLowering	signature:()
SPCPUFrameLowering::computeStackSize	SPCPUFrameLowering.cpp	/^uint64_t SPCPUFrameLowering::computeStackSize(MachineFunction &MF) const {$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:uint64_t	signature:(MachineFunction & MF) const
SPCPUFrameLowering::eliminateCallFramePseudoInstr	SPCPUFrameLowering.cpp	/^MachineBasicBlock::iterator SPCPUFrameLowering::eliminateCallFramePseudoInstr($/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:MachineBasicBlock::iterator	signature:(MachineFunction & MF,MachineBasicBlock & MBB,MachineBasicBlock::iterator I) const
SPCPUFrameLowering::emitEpilogue	SPCPUFrameLowering.cpp	/^void SPCPUFrameLowering::emitEpilogue(MachineFunction &MF,$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:void	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
SPCPUFrameLowering::emitPrologue	SPCPUFrameLowering.cpp	/^void SPCPUFrameLowering::emitPrologue(MachineFunction &MF,$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:void	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
SPCPUFrameLowering::hasFP	SPCPUFrameLowering.cpp	/^bool SPCPUFrameLowering::hasFP(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:bool	signature:(const MachineFunction & MF) const
SPCPUFunctionInfo	SPCPUMachineFunctionInfo.h	/^  SPCPUFunctionInfo() {}$/;"	kind:f	class:llvm::SPCPUFunctionInfo	access:public	signature:()
SPCPUFunctionInfo	SPCPUMachineFunctionInfo.h	/^class SPCPUFunctionInfo : public MachineFunctionInfo {$/;"	kind:c	namespace:llvm	inherits:MachineFunctionInfo
SPCPUISD	SPCPUISelLowering.h	/^namespace SPCPUISD {$/;"	kind:n	namespace:llvm
SPCPUInstPrinter	InstPrinter/SPCPUInstPrinter.cpp	/^SPCPUInstPrinter::SPCPUInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,$/;"	kind:f	class:SPCPUInstPrinter	signature:(const MCAsmInfo & MAI,const MCInstrInfo & MII,const MCRegisterInfo & MRI)
SPCPUInstPrinter	InstPrinter/SPCPUInstPrinter.h	/^  SPCPUInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,$/;"	kind:p	class:llvm::SPCPUInstPrinter	access:public	signature:(const MCAsmInfo & MAI,const MCInstrInfo & MII,const MCRegisterInfo & MRI)
SPCPUInstPrinter	InstPrinter/SPCPUInstPrinter.h	/^class SPCPUInstPrinter : public MCInstPrinter {$/;"	kind:c	namespace:llvm	inherits:MCInstPrinter
SPCPUInstPrinter::SPCPUInstPrinter	InstPrinter/SPCPUInstPrinter.cpp	/^SPCPUInstPrinter::SPCPUInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,$/;"	kind:f	class:SPCPUInstPrinter	signature:(const MCAsmInfo & MAI,const MCInstrInfo & MII,const MCRegisterInfo & MRI)
SPCPUInstPrinter::printAddrModeMemSrc	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printAddrModeMemSrc(const MCInst *MI, unsigned OpNum,$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(const MCInst * MI,unsigned OpNum,raw_ostream & O)
SPCPUInstPrinter::printInst	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printInst(const MCInst *MI, raw_ostream &O,$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(const MCInst * MI,raw_ostream & O,StringRef Annot,const MCSubtargetInfo & STI)
SPCPUInstPrinter::printOperand	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printOperand(const MCInst *MI, unsigned OpNo,$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(const MCInst * MI,unsigned OpNo,raw_ostream & O)
SPCPUInstPrinter::printRegName	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printRegName(raw_ostream &OS, unsigned RegNo) const {$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(raw_ostream & OS,unsigned RegNo) const
SPCPUInstrInfo	SPCPUInstrInfo.cpp	/^SPCPUInstrInfo::SPCPUInstrInfo()$/;"	kind:f	class:SPCPUInstrInfo	signature:()
SPCPUInstrInfo	SPCPUInstrInfo.h	/^  SPCPUInstrInfo();$/;"	kind:p	class:llvm::SPCPUInstrInfo	access:public	signature:()
SPCPUInstrInfo	SPCPUInstrInfo.h	/^class SPCPUInstrInfo : public SPCPUGenInstrInfo {$/;"	kind:c	namespace:llvm	inherits:SPCPUGenInstrInfo
SPCPUInstrInfo::SPCPUInstrInfo	SPCPUInstrInfo.cpp	/^SPCPUInstrInfo::SPCPUInstrInfo()$/;"	kind:f	class:SPCPUInstrInfo	signature:()
SPCPUInstrInfo::analyzeBranch	SPCPUInstrInfo.cpp	/^bool SPCPUInstrInfo::analyzeBranch(MachineBasicBlock &MBB, MachineBasicBlock *&TBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:bool	signature:(MachineBasicBlock & MBB,MachineBasicBlock * & TBB,MachineBasicBlock * & FBB,SmallVectorImpl<MachineOperand> & Cond,bool AllowModify) const
SPCPUInstrInfo::anchor	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::anchor() {}$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:()
SPCPUInstrInfo::copyPhysReg	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::copyPhysReg(MachineBasicBlock &MBB, MachineBasicBlock::iterator I,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,const DebugLoc & DL,unsigned DestReg,unsigned SrcReg,bool KillSrc) const
SPCPUInstrInfo::expandPostRAPseudo	SPCPUInstrInfo.cpp	/^bool SPCPUInstrInfo::expandPostRAPseudo(MachineInstr &MI) const {$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:bool	signature:(MachineInstr & MI) const
SPCPUInstrInfo::insertBranch	SPCPUInstrInfo.cpp	/^unsigned SPCPUInstrInfo::insertBranch(MachineBasicBlock &MBB, MachineBasicBlock *TBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:unsigned	signature:(MachineBasicBlock & MBB,MachineBasicBlock * TBB,MachineBasicBlock * FBB,ArrayRef<MachineOperand> Cond,const DebugLoc & DL,int * BytesAdded) const
SPCPUInstrInfo::loadRegFromStackSlot	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::loadRegFromStackSlot(MachineBasicBlock &MBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,unsigned DestReg,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
SPCPUInstrInfo::removeBranch	SPCPUInstrInfo.cpp	/^unsigned SPCPUInstrInfo::removeBranch(MachineBasicBlock &MBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:unsigned	signature:(MachineBasicBlock & MBB,int * BytesRemoved) const
SPCPUInstrInfo::storeRegToStackSlot	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::storeRegToStackSlot(MachineBasicBlock &MBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,unsigned SrcReg,bool isKill,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
SPCPUMCAsmInfo	MCTargetDesc/SPCPUMCAsmInfo.cpp	/^SPCPUMCAsmInfo::SPCPUMCAsmInfo(const Triple &TT) {$/;"	kind:f	class:SPCPUMCAsmInfo	signature:(const Triple & TT)
SPCPUMCAsmInfo	MCTargetDesc/SPCPUMCAsmInfo.h	/^  explicit SPCPUMCAsmInfo(const Triple &TT);$/;"	kind:p	class:llvm::SPCPUMCAsmInfo	access:public	signature:(const Triple & TT)
SPCPUMCAsmInfo	MCTargetDesc/SPCPUMCAsmInfo.h	/^class SPCPUMCAsmInfo : public MCAsmInfoELF {$/;"	kind:c	namespace:llvm	inherits:MCAsmInfoELF
SPCPUMCAsmInfo::SPCPUMCAsmInfo	MCTargetDesc/SPCPUMCAsmInfo.cpp	/^SPCPUMCAsmInfo::SPCPUMCAsmInfo(const Triple &TT) {$/;"	kind:f	class:SPCPUMCAsmInfo	signature:(const Triple & TT)
SPCPUMCAsmInfo::anchor	MCTargetDesc/SPCPUMCAsmInfo.cpp	/^void SPCPUMCAsmInfo::anchor() {}$/;"	kind:f	class:SPCPUMCAsmInfo	typeref:typename:void	signature:()
SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  SPCPUMCCodeEmitter(const MCInstrInfo &mcii, MCContext &ctx)$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	file:	access:public	signature:(const MCInstrInfo & mcii,MCContext & ctx)
SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  SPCPUMCCodeEmitter(const SPCPUMCCodeEmitter &) = delete;$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	file:	access:private	signature:(const SPCPUMCCodeEmitter &)
SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^class SPCPUMCCodeEmitter : public MCCodeEmitter {$/;"	kind:c	namespace:__anon7af9528b0110	file:	inherits:MCCodeEmitter
SPCPUMCCodeEmitter::encodeInstruction	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^void SPCPUMCCodeEmitter::encodeInstruction(const MCInst &MI, raw_ostream &OS,$/;"	kind:f	class:SPCPUMCCodeEmitter	typeref:typename:void	signature:(const MCInst & MI,raw_ostream & OS,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
SPCPUMCCodeEmitter::getMachineOpValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^unsigned SPCPUMCCodeEmitter::getMachineOpValue(const MCInst &MI,$/;"	kind:f	class:SPCPUMCCodeEmitter	typeref:typename:unsigned	signature:(const MCInst & MI,const MCOperand & MO,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
SPCPUMCCodeEmitter::getMemSrcValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^unsigned SPCPUMCCodeEmitter::getMemSrcValue(const MCInst &MI, unsigned OpIdx,$/;"	kind:f	class:SPCPUMCCodeEmitter	typeref:typename:unsigned	signature:(const MCInst & MI,unsigned OpIdx,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
SPCPUMCInstLower	SPCPUMCInstLower.cpp	/^SPCPUMCInstLower::SPCPUMCInstLower(class AsmPrinter &asmprinter)$/;"	kind:f	class:SPCPUMCInstLower	signature:(class AsmPrinter & asmprinter)
SPCPUMCInstLower	SPCPUMCInstLower.h	/^  SPCPUMCInstLower(class AsmPrinter &asmprinter);$/;"	kind:p	class:llvm::SPCPUMCInstLower	access:public	signature:(class AsmPrinter & asmprinter)
SPCPUMCInstLower	SPCPUMCInstLower.h	/^class LLVM_LIBRARY_VISIBILITY SPCPUMCInstLower {$/;"	kind:c	namespace:llvm
SPCPUMCInstLower::Initialize	SPCPUMCInstLower.cpp	/^void SPCPUMCInstLower::Initialize(Mangler *M, MCContext *C) {$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:void	signature:(Mangler * M,MCContext * C)
SPCPUMCInstLower::Lower	SPCPUMCInstLower.cpp	/^void SPCPUMCInstLower::Lower(const MachineInstr *MI, MCInst &OutMI) const {$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:void	signature:(const MachineInstr * MI,MCInst & OutMI) const
SPCPUMCInstLower::LowerOperand	SPCPUMCInstLower.cpp	/^MCOperand SPCPUMCInstLower::LowerOperand(const MachineOperand &MO,$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:MCOperand	signature:(const MachineOperand & MO,unsigned offset) const
SPCPUMCInstLower::LowerSymbolOperand	SPCPUMCInstLower.cpp	/^MCOperand SPCPUMCInstLower::LowerSymbolOperand(const MachineOperand &MO,$/;"	kind:f	class:SPCPUMCInstLower	typeref:typename:MCOperand	signature:(const MachineOperand & MO,MachineOperandType MOTy,unsigned Offset) const
SPCPUMCInstLower::SPCPUMCInstLower	SPCPUMCInstLower.cpp	/^SPCPUMCInstLower::SPCPUMCInstLower(class AsmPrinter &asmprinter)$/;"	kind:f	class:SPCPUMCInstLower	signature:(class AsmPrinter & asmprinter)
SPCPUPassConfig	SPCPUTargetMachine.cpp	/^  SPCPUPassConfig(SPCPUTargetMachine *TM, PassManagerBase &PM)$/;"	kind:f	class:__anonb21e219d0110::SPCPUPassConfig	file:	access:public	signature:(SPCPUTargetMachine * TM,PassManagerBase & PM)
SPCPUPassConfig	SPCPUTargetMachine.cpp	/^class SPCPUPassConfig : public TargetPassConfig {$/;"	kind:c	namespace:__anonb21e219d0110	file:	inherits:TargetPassConfig
SPCPUPassConfig::addInstSelector	SPCPUTargetMachine.cpp	/^bool SPCPUPassConfig::addInstSelector() {$/;"	kind:f	class:SPCPUPassConfig	typeref:typename:bool	signature:()
SPCPUPassConfig::addPreEmitPass	SPCPUTargetMachine.cpp	/^void SPCPUPassConfig::addPreEmitPass() {}$/;"	kind:f	class:SPCPUPassConfig	typeref:typename:void	signature:()
SPCPUPassConfig::addPreISel	SPCPUTargetMachine.cpp	/^bool SPCPUPassConfig::addPreISel() { return false; }$/;"	kind:f	class:SPCPUPassConfig	typeref:typename:bool	signature:()
SPCPURegisterInfo	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::SPCPURegisterInfo() : SPCPUGenRegisterInfo(SPCPU::lr) {}$/;"	kind:f	class:SPCPURegisterInfo	signature:()
SPCPURegisterInfo	SPCPURegisterInfo.h	/^  SPCPURegisterInfo();$/;"	kind:p	struct:llvm::SPCPURegisterInfo	access:public	signature:()
SPCPURegisterInfo	SPCPURegisterInfo.h	/^struct SPCPURegisterInfo : public SPCPUGenRegisterInfo {$/;"	kind:s	namespace:llvm	inherits:SPCPUGenRegisterInfo
SPCPURegisterInfo::SPCPURegisterInfo	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::SPCPURegisterInfo() : SPCPUGenRegisterInfo(SPCPU::lr) {}$/;"	kind:f	class:SPCPURegisterInfo	signature:()
SPCPURegisterInfo::eliminateFrameIndex	SPCPURegisterInfo.cpp	/^void SPCPURegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:void	signature:(MachineBasicBlock::iterator II,int SPAdj,unsigned FIOperandNum,RegScavenger * RS) const
SPCPURegisterInfo::getCallPreservedMask	SPCPURegisterInfo.cpp	/^const uint32_t *SPCPURegisterInfo::getCallPreservedMask$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:const uint32_t *	signature:(const MachineFunction & MF,CallingConv::ID) const
SPCPURegisterInfo::getCalleeSavedRegs	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::getCalleeSavedRegs(const MachineFunction *MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:const uint16_t *	signature:(const MachineFunction * MF) const
SPCPURegisterInfo::getFrameRegister	SPCPURegisterInfo.cpp	/^unsigned SPCPURegisterInfo::getFrameRegister(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:unsigned	signature:(const MachineFunction & MF) const
SPCPURegisterInfo::getReservedRegs	SPCPURegisterInfo.cpp	/^BitVector SPCPURegisterInfo::getReservedRegs(const MachineFunction &MF) $/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:BitVector	signature:(const MachineFunction & MF) const
SPCPURegisterInfo::requiresRegisterScavenging	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::requiresRegisterScavenging(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:bool	signature:(const MachineFunction & MF) const
SPCPURegisterInfo::trackLivenessAfterRegAlloc	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::trackLivenessAfterRegAlloc(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:bool	signature:(const MachineFunction & MF) const
SPCPURegisterInfo::useFPForScavengingIndex	SPCPURegisterInfo.cpp	/^bool SPCPURegisterInfo::useFPForScavengingIndex(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:bool	signature:(const MachineFunction & MF) const
SPCPUSelectionDAGInfo	SPCPUSelectionDAGInfo.h	/^class SPCPUSelectionDAGInfo : public SelectionDAGTargetInfo {$/;"	kind:c	namespace:llvm	inherits:SelectionDAGTargetInfo
SPCPUSelectionDAGInfo::~SPCPUSelectionDAGInfo	SPCPUSelectionDAGInfo.cpp	/^SPCPUSelectionDAGInfo::~SPCPUSelectionDAGInfo() {}$/;"	kind:f	class:SPCPUSelectionDAGInfo	signature:()
SPCPUSubtarget	SPCPUSubtarget.cpp	/^SPCPUSubtarget::SPCPUSubtarget(const Triple &TT, StringRef CPU, StringRef FS,$/;"	kind:f	class:SPCPUSubtarget	signature:(const Triple & TT,StringRef CPU,StringRef FS,SPCPUTargetMachine & TM)
SPCPUSubtarget	SPCPUSubtarget.h	/^  SPCPUSubtarget(const Triple &TT, StringRef CPU,$/;"	kind:p	class:llvm::SPCPUSubtarget	access:public	signature:(const Triple & TT,StringRef CPU,StringRef FS,SPCPUTargetMachine & TM)
SPCPUSubtarget	SPCPUSubtarget.h	/^class SPCPUSubtarget : public SPCPUGenSubtargetInfo {$/;"	kind:c	namespace:llvm	inherits:SPCPUGenSubtargetInfo
SPCPUSubtarget::SPCPUSubtarget	SPCPUSubtarget.cpp	/^SPCPUSubtarget::SPCPUSubtarget(const Triple &TT, StringRef CPU, StringRef FS,$/;"	kind:f	class:SPCPUSubtarget	signature:(const Triple & TT,StringRef CPU,StringRef FS,SPCPUTargetMachine & TM)
SPCPUSubtarget::anchor	SPCPUSubtarget.cpp	/^void SPCPUSubtarget::anchor() {}$/;"	kind:f	class:SPCPUSubtarget	typeref:typename:void	signature:()
SPCPUTargetLowering	SPCPUISelLowering.cpp	/^SPCPUTargetLowering::SPCPUTargetLowering(SPCPUTargetMachine &SPCPUTM)$/;"	kind:f	class:SPCPUTargetLowering	signature:(SPCPUTargetMachine & SPCPUTM)
SPCPUTargetLowering	SPCPUISelLowering.h	/^  explicit SPCPUTargetLowering(SPCPUTargetMachine &TM);$/;"	kind:p	class:llvm::SPCPUTargetLowering	access:public	signature:(SPCPUTargetMachine & TM)
SPCPUTargetLowering	SPCPUISelLowering.h	/^class SPCPUTargetLowering : public TargetLowering {$/;"	kind:c	namespace:llvm	inherits:TargetLowering
SPCPUTargetLowering::CanLowerReturn	SPCPUISelLowering.cpp	/^bool SPCPUTargetLowering::CanLowerReturn($/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:bool	signature:(CallingConv::ID CallConv,MachineFunction & MF,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & Outs,LLVMContext & Context) const
SPCPUTargetLowering::LowerCall	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(TargetLowering::CallLoweringInfo & CLI,SmallVectorImpl<SDValue> & InVals) const
SPCPUTargetLowering::LowerCallResult	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerCallResult($/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Chain,SDValue InGlue,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,SDLoc dl,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
SPCPUTargetLowering::LowerFormalArguments	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerFormalArguments(SDValue Chain, CallingConv::ID CallConv,$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,const SDLoc & DL,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
SPCPUTargetLowering::LowerGlobalAddress	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerGlobalAddress(SDValue Op, SelectionDAG& DAG) const$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Op,SelectionDAG & DAG) const
SPCPUTargetLowering::LowerOperation	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerOperation(SDValue Op, SelectionDAG &DAG) const {$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Op,SelectionDAG & DAG) const
SPCPUTargetLowering::LowerReturn	SPCPUISelLowering.cpp	/^SDValue SPCPUTargetLowering::LowerReturn(SDValue Chain, CallingConv::ID CallConv, bool isVarArg,$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:SDValue	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & Outs,const SmallVectorImpl<SDValue> & OutVals,const SDLoc & DL,SelectionDAG & DAG) const
SPCPUTargetLowering::SPCPUTargetLowering	SPCPUISelLowering.cpp	/^SPCPUTargetLowering::SPCPUTargetLowering(SPCPUTargetMachine &SPCPUTM)$/;"	kind:f	class:SPCPUTargetLowering	signature:(SPCPUTargetMachine & SPCPUTM)
SPCPUTargetLowering::getTargetNodeName	SPCPUISelLowering.cpp	/^const char *SPCPUTargetLowering::getTargetNodeName(unsigned Opcode) const {$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:const char *	signature:(unsigned Opcode) const
SPCPUTargetMachine	SPCPUTargetMachine.cpp	/^SPCPUTargetMachine::SPCPUTargetMachine($/;"	kind:f	class:SPCPUTargetMachine	signature:(const Target & T,const Triple & TT,StringRef CPU,StringRef FS,const TargetOptions & Options,Optional<Reloc::Model> RM,CodeModel::Model CM,CodeGenOpt::Level OL)
SPCPUTargetMachine	SPCPUTargetMachine.h	/^  SPCPUTargetMachine(const Target &T, const Triple &TT, StringRef CPU, StringRef FS,$/;"	kind:p	class:llvm::SPCPUTargetMachine	access:public	signature:(const Target & T,const Triple & TT,StringRef CPU,StringRef FS,const TargetOptions & Options,Optional<Reloc::Model> RM,CodeModel::Model CM,CodeGenOpt::Level OL)
SPCPUTargetMachine	SPCPUTargetMachine.h	/^class SPCPUTargetMachine : public LLVMTargetMachine {$/;"	kind:c	namespace:llvm	inherits:LLVMTargetMachine
SPCPUTargetMachine::SPCPUTargetMachine	SPCPUTargetMachine.cpp	/^SPCPUTargetMachine::SPCPUTargetMachine($/;"	kind:f	class:SPCPUTargetMachine	signature:(const Target & T,const Triple & TT,StringRef CPU,StringRef FS,const TargetOptions & Options,Optional<Reloc::Model> RM,CodeModel::Model CM,CodeGenOpt::Level OL)
SPCPUTargetMachine::createPassConfig	SPCPUTargetMachine.cpp	/^TargetPassConfig *SPCPUTargetMachine::createPassConfig(PassManagerBase &PM) {$/;"	kind:f	class:SPCPUTargetMachine	typeref:typename:TargetPassConfig *	signature:(PassManagerBase & PM)
Select	SPCPUISelDAGToDAG.cpp	/^  void Select(SDNode *N) override;$/;"	kind:p	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:void	file:	access:public	signature:(SDNode * N)
Select	SPCPUISelDAGToDAG.cpp	/^void SPCPUDAGToDAGISel::Select(SDNode *N) {$/;"	kind:f	class:SPCPUDAGToDAGISel	typeref:typename:void	signature:(SDNode * N)
SelectAddr	SPCPUISelDAGToDAG.cpp	/^  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset);$/;"	kind:p	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:bool	file:	access:public	signature:(SDValue Addr,SDValue & Base,SDValue & Offset)
SelectAddr	SPCPUISelDAGToDAG.cpp	/^bool SPCPUDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {$/;"	kind:f	class:SPCPUDAGToDAGISel	typeref:typename:bool	signature:(SDValue Addr,SDValue & Base,SDValue & Offset)
Subtarget	SPCPUISelDAGToDAG.cpp	/^  const SPCPUSubtarget &Subtarget;$/;"	kind:m	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:const SPCPUSubtarget &	file:	access:private
Subtarget	SPCPUISelLowering.h	/^  const SPCPUSubtarget &Subtarget;$/;"	kind:m	class:llvm::SPCPUTargetLowering	typeref:typename:const SPCPUSubtarget &	access:private
Subtarget	SPCPUTargetMachine.h	/^  SPCPUSubtarget Subtarget;$/;"	kind:m	class:llvm::SPCPUTargetMachine	typeref:typename:SPCPUSubtarget	access:private
TLInfo	SPCPUSubtarget.h	/^  SPCPUTargetLowering TLInfo;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUTargetLowering	access:private
TLOF	SPCPUTargetMachine.h	/^  std::unique_ptr<TargetLoweringObjectFile> TLOF;$/;"	kind:m	class:llvm::SPCPUTargetMachine	typeref:typename:std::unique_ptr<TargetLoweringObjectFile>	access:private
TSInfo	SPCPUSubtarget.h	/^  SPCPUSelectionDAGInfo TSInfo;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUSelectionDAGInfo	access:private
TheSPCPUTarget	TargetInfo/SPCPUTargetInfo.cpp	/^  Target TheSPCPUTarget;$/;"	kind:v	namespace:llvm	typeref:typename:Target
__anon3589f0110110	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^namespace {$/;"	kind:n	file:
__anon3589f0110110::SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^  class SPCPUELFObjectWriter : public MCELFObjectTargetWriter {$/;"	kind:c	namespace:__anon3589f0110110	file:	inherits:MCELFObjectTargetWriter
__anon3589f0110110::SPCPUELFObjectWriter::SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^    SPCPUELFObjectWriter(uint8_t OSABI);$/;"	kind:p	class:__anon3589f0110110::SPCPUELFObjectWriter	file:	access:public	signature:(uint8_t OSABI)
__anon3589f0110110::SPCPUELFObjectWriter::getRelocType	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^    unsigned getRelocType(MCContext &Ctx, const MCValue &Target,$/;"	kind:p	class:__anon3589f0110110::SPCPUELFObjectWriter	typeref:typename:unsigned	file:	access:public	signature:(MCContext & Ctx,const MCValue & Target,const MCFixup & Fixup,bool IsPCRel) const
__anon3589f0110110::SPCPUELFObjectWriter::~SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^    virtual ~SPCPUELFObjectWriter();$/;"	kind:p	class:__anon3589f0110110::SPCPUELFObjectWriter	file:	access:public	signature:()
__anon3c7e6baf0110	MCTargetDesc/SPCPUAsmBackend.cpp	/^namespace {$/;"	kind:n	file:
__anon3c7e6baf0110::SPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^class SPCPUAsmBackend : public MCAsmBackend {$/;"	kind:c	namespace:__anon3c7e6baf0110	file:	inherits:MCAsmBackend
__anon3c7e6baf0110::SPCPUAsmBackend::SPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^  SPCPUAsmBackend(const Target &T, const StringRef TT) : MCAsmBackend() {}$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	file:	access:public	signature:(const Target & T,const StringRef TT)
__anon3c7e6baf0110::SPCPUAsmBackend::applyFixup	MCTargetDesc/SPCPUAsmBackend.cpp	/^  void applyFixup(const MCFixup &Fixup, char *Data, unsigned DataSize,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:void	file:	access:public	signature:(const MCFixup & Fixup,char * Data,unsigned DataSize,uint64_t Value,bool IsPCRel) const
__anon3c7e6baf0110::SPCPUAsmBackend::fixupNeedsRelaxation	MCTargetDesc/SPCPUAsmBackend.cpp	/^  bool fixupNeedsRelaxation(const MCFixup &Fixup, uint64_t Value,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:bool	file:	access:public	signature:(const MCFixup & Fixup,uint64_t Value,const MCRelaxableFragment * DF,const MCAsmLayout & Layout) const
__anon3c7e6baf0110::SPCPUAsmBackend::getNumFixupKinds	MCTargetDesc/SPCPUAsmBackend.cpp	/^  unsigned getNumFixupKinds() const override {$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:unsigned	file:	access:public	signature:() const
__anon3c7e6baf0110::SPCPUAsmBackend::getPointerSize	MCTargetDesc/SPCPUAsmBackend.cpp	/^  unsigned getPointerSize() const { return 4; }$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:unsigned	file:	access:public	signature:() const
__anon3c7e6baf0110::SPCPUAsmBackend::mayNeedRelaxation	MCTargetDesc/SPCPUAsmBackend.cpp	/^  bool mayNeedRelaxation(const MCInst &Inst) const override { return false; }$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:bool	file:	access:public	signature:(const MCInst & Inst) const
__anon3c7e6baf0110::SPCPUAsmBackend::processFixupValue	MCTargetDesc/SPCPUAsmBackend.cpp	/^  void processFixupValue(const MCAssembler &Asm, const MCAsmLayout &Layout,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:void	file:	access:public	signature:(const MCAssembler & Asm,const MCAsmLayout & Layout,const MCFixup & Fixup,const MCFragment * DF,const MCValue & Target,uint64_t & Value,bool & IsResolved)
__anon3c7e6baf0110::SPCPUAsmBackend::relaxInstruction	MCTargetDesc/SPCPUAsmBackend.cpp	/^  void relaxInstruction(const MCInst &Inst, const MCSubtargetInfo &STI,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:void	file:	access:public	signature:(const MCInst & Inst,const MCSubtargetInfo & STI,MCInst & Res) const
__anon3c7e6baf0110::SPCPUAsmBackend::writeNopData	MCTargetDesc/SPCPUAsmBackend.cpp	/^  bool writeNopData(uint64_t Count, MCObjectWriter *OW) const override {$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:bool	file:	access:public	signature:(uint64_t Count,MCObjectWriter * OW) const
__anon3c7e6baf0110::SPCPUAsmBackend::~SPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^  ~SPCPUAsmBackend() {}$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	file:	access:public	signature:()
__anon3c7e6baf0110::SPCPUELFObjectWriter	MCTargetDesc/SPCPUAsmBackend.cpp	/^class SPCPUELFObjectWriter : public MCELFObjectTargetWriter {$/;"	kind:c	namespace:__anon3c7e6baf0110	file:	inherits:MCELFObjectTargetWriter
__anon3c7e6baf0110::SPCPUELFObjectWriter::SPCPUELFObjectWriter	MCTargetDesc/SPCPUAsmBackend.cpp	/^  SPCPUELFObjectWriter(uint8_t OSABI)$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUELFObjectWriter	file:	access:public	signature:(uint8_t OSABI)
__anon3c7e6baf0210	MCTargetDesc/SPCPUAsmBackend.cpp	/^namespace {$/;"	kind:n	file:
__anon3c7e6baf0210::ELFSPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^class ELFSPCPUAsmBackend : public SPCPUAsmBackend {$/;"	kind:c	namespace:__anon3c7e6baf0210	file:	inherits:SPCPUAsmBackend
__anon3c7e6baf0210::ELFSPCPUAsmBackend::ELFSPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^  ELFSPCPUAsmBackend(const Target &T, const StringRef TT, uint8_t _OSABI)$/;"	kind:f	class:__anon3c7e6baf0210::ELFSPCPUAsmBackend	file:	access:public	signature:(const Target & T,const StringRef TT,uint8_t _OSABI)
__anon3c7e6baf0210::ELFSPCPUAsmBackend::OSABI	MCTargetDesc/SPCPUAsmBackend.cpp	/^  uint8_t OSABI;$/;"	kind:m	class:__anon3c7e6baf0210::ELFSPCPUAsmBackend	typeref:typename:uint8_t	file:	access:public
__anon3c7e6baf0210::ELFSPCPUAsmBackend::createObjectWriter	MCTargetDesc/SPCPUAsmBackend.cpp	/^  MCObjectWriter *createObjectWriter(raw_pwrite_stream &OS) const override {$/;"	kind:f	class:__anon3c7e6baf0210::ELFSPCPUAsmBackend	typeref:typename:MCObjectWriter *	file:	access:public	signature:(raw_pwrite_stream & OS) const
__anon7af9528b0110	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^namespace {$/;"	kind:n	file:
__anon7af9528b0110::SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^class SPCPUMCCodeEmitter : public MCCodeEmitter {$/;"	kind:c	namespace:__anon7af9528b0110	file:	inherits:MCCodeEmitter
__anon7af9528b0110::SPCPUMCCodeEmitter::CTX	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  const MCContext &CTX;$/;"	kind:m	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:const MCContext &	file:	access:private
__anon7af9528b0110::SPCPUMCCodeEmitter::EmitByte	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void EmitByte(unsigned char C, raw_ostream &OS) const { OS << (char)C; }$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:public	signature:(unsigned char C,raw_ostream & OS) const
__anon7af9528b0110::SPCPUMCCodeEmitter::EmitConstant	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void EmitConstant(uint64_t Val, unsigned Size, raw_ostream &OS) const {$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:public	signature:(uint64_t Val,unsigned Size,raw_ostream & OS) const
__anon7af9528b0110::SPCPUMCCodeEmitter::MCII	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  const MCInstrInfo &MCII;$/;"	kind:m	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:const MCInstrInfo &	file:	access:private
__anon7af9528b0110::SPCPUMCCodeEmitter::SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  SPCPUMCCodeEmitter(const MCInstrInfo &mcii, MCContext &ctx)$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	file:	access:public	signature:(const MCInstrInfo & mcii,MCContext & ctx)
__anon7af9528b0110::SPCPUMCCodeEmitter::SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  SPCPUMCCodeEmitter(const SPCPUMCCodeEmitter &) = delete;$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	file:	access:private	signature:(const SPCPUMCCodeEmitter &)
__anon7af9528b0110::SPCPUMCCodeEmitter::encodeInstruction	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void encodeInstruction(const MCInst &MI, raw_ostream &OS,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:public	signature:(const MCInst & MI,raw_ostream & OS,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
__anon7af9528b0110::SPCPUMCCodeEmitter::getBinaryCodeForInstr	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  uint64_t getBinaryCodeForInstr(const MCInst &MI,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:uint64_t	file:	access:public	signature:(const MCInst & MI,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
__anon7af9528b0110::SPCPUMCCodeEmitter::getMachineOpValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  unsigned getMachineOpValue(const MCInst &MI, const MCOperand &MO,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:unsigned	file:	access:public	signature:(const MCInst & MI,const MCOperand & MO,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
__anon7af9528b0110::SPCPUMCCodeEmitter::getMemSrcValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  unsigned getMemSrcValue(const MCInst &MI, unsigned OpIdx,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:unsigned	file:	access:public	signature:(const MCInst & MI,unsigned OpIdx,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
__anon7af9528b0110::SPCPUMCCodeEmitter::operator =	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void operator=(const SPCPUMCCodeEmitter &) = delete;$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:private	signature:(const SPCPUMCCodeEmitter &)
__anon7af9528b0110::SPCPUMCCodeEmitter::~SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  ~SPCPUMCCodeEmitter() {}$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	file:	access:public	signature:()
__anon8c6b42060110	SPCPUAsmPrinter.cpp	/^namespace {$/;"	kind:n	file:
__anon8c6b42060110::SPCPUAsmPrinter	SPCPUAsmPrinter.cpp	/^class SPCPUAsmPrinter : public AsmPrinter {$/;"	kind:c	namespace:__anon8c6b42060110	file:	inherits:AsmPrinter
__anon8c6b42060110::SPCPUAsmPrinter::EmitFunctionBodyStart	SPCPUAsmPrinter.cpp	/^  void EmitFunctionBodyStart();$/;"	kind:p	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:void	file:	access:public	signature:()
__anon8c6b42060110::SPCPUAsmPrinter::EmitFunctionEntryLabel	SPCPUAsmPrinter.cpp	/^  void EmitFunctionEntryLabel();$/;"	kind:p	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:void	file:	access:public	signature:()
__anon8c6b42060110::SPCPUAsmPrinter::EmitInstruction	SPCPUAsmPrinter.cpp	/^  void EmitInstruction(const MachineInstr *MI);$/;"	kind:p	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:void	file:	access:public	signature:(const MachineInstr * MI)
__anon8c6b42060110::SPCPUAsmPrinter::SPCPUAsmPrinter	SPCPUAsmPrinter.cpp	/^  explicit SPCPUAsmPrinter(TargetMachine &TM,$/;"	kind:f	class:__anon8c6b42060110::SPCPUAsmPrinter	file:	access:public	signature:(TargetMachine & TM,std::unique_ptr<MCStreamer> Streamer)
__anon8c6b42060110::SPCPUAsmPrinter::getPassName	SPCPUAsmPrinter.cpp	/^  virtual llvm::StringRef getPassName() const { return "SPCPU Assembly Printer"; }$/;"	kind:f	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:llvm::StringRef	file:	access:public	signature:() const
__anonb21e219d0110	SPCPUTargetMachine.cpp	/^namespace {$/;"	kind:n	file:
__anonb21e219d0110::SPCPUPassConfig	SPCPUTargetMachine.cpp	/^class SPCPUPassConfig : public TargetPassConfig {$/;"	kind:c	namespace:__anonb21e219d0110	file:	inherits:TargetPassConfig
__anonb21e219d0110::SPCPUPassConfig::SPCPUPassConfig	SPCPUTargetMachine.cpp	/^  SPCPUPassConfig(SPCPUTargetMachine *TM, PassManagerBase &PM)$/;"	kind:f	class:__anonb21e219d0110::SPCPUPassConfig	file:	access:public	signature:(SPCPUTargetMachine * TM,PassManagerBase & PM)
__anonb21e219d0110::SPCPUPassConfig::addInstSelector	SPCPUTargetMachine.cpp	/^  virtual bool addInstSelector() override;$/;"	kind:p	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:bool	file:	access:public	signature:()
__anonb21e219d0110::SPCPUPassConfig::addPreEmitPass	SPCPUTargetMachine.cpp	/^  virtual void addPreEmitPass() override;$/;"	kind:p	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:void	file:	access:public	signature:()
__anonb21e219d0110::SPCPUPassConfig::addPreISel	SPCPUTargetMachine.cpp	/^  virtual bool addPreISel() override;$/;"	kind:p	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:bool	file:	access:public	signature:()
__anonb21e219d0110::SPCPUPassConfig::getSPCPUTargetMachine	SPCPUTargetMachine.cpp	/^  SPCPUTargetMachine &getSPCPUTargetMachine() const {$/;"	kind:f	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:SPCPUTargetMachine &	file:	access:public	signature:() const
__anone1cf9c490110	SPCPUISelDAGToDAG.cpp	/^namespace {$/;"	kind:n	file:
__anone1cf9c490110::SPCPUDAGToDAGISel	SPCPUISelDAGToDAG.cpp	/^class SPCPUDAGToDAGISel : public SelectionDAGISel {$/;"	kind:c	namespace:__anone1cf9c490110	file:	inherits:SelectionDAGISel
__anone1cf9c490110::SPCPUDAGToDAGISel::SPCPUDAGToDAGISel	SPCPUISelDAGToDAG.cpp	/^  explicit SPCPUDAGToDAGISel(SPCPUTargetMachine &TM, CodeGenOpt::Level OptLevel)$/;"	kind:f	class:__anone1cf9c490110::SPCPUDAGToDAGISel	file:	access:public	signature:(SPCPUTargetMachine & TM,CodeGenOpt::Level OptLevel)
__anone1cf9c490110::SPCPUDAGToDAGISel::Select	SPCPUISelDAGToDAG.cpp	/^  void Select(SDNode *N) override;$/;"	kind:p	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:void	file:	access:public	signature:(SDNode * N)
__anone1cf9c490110::SPCPUDAGToDAGISel::SelectAddr	SPCPUISelDAGToDAG.cpp	/^  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset);$/;"	kind:p	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:bool	file:	access:public	signature:(SDValue Addr,SDValue & Base,SDValue & Offset)
__anone1cf9c490110::SPCPUDAGToDAGISel::Subtarget	SPCPUISelDAGToDAG.cpp	/^  const SPCPUSubtarget &Subtarget;$/;"	kind:m	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:const SPCPUSubtarget &	file:	access:private
__anone1cf9c490110::SPCPUDAGToDAGISel::getPassName	SPCPUISelDAGToDAG.cpp	/^  virtual llvm::StringRef getPassName() const override {$/;"	kind:f	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:llvm::StringRef	file:	access:public	signature:() const
addInstSelector	SPCPUTargetMachine.cpp	/^  virtual bool addInstSelector() override;$/;"	kind:p	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:bool	file:	access:public	signature:()
addInstSelector	SPCPUTargetMachine.cpp	/^bool SPCPUPassConfig::addInstSelector() {$/;"	kind:f	class:SPCPUPassConfig	typeref:typename:bool	signature:()
addPreEmitPass	SPCPUTargetMachine.cpp	/^  virtual void addPreEmitPass() override;$/;"	kind:p	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:void	file:	access:public	signature:()
addPreEmitPass	SPCPUTargetMachine.cpp	/^void SPCPUPassConfig::addPreEmitPass() {}$/;"	kind:f	class:SPCPUPassConfig	typeref:typename:void	signature:()
addPreISel	SPCPUTargetMachine.cpp	/^  virtual bool addPreISel() override;$/;"	kind:p	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:bool	file:	access:public	signature:()
addPreISel	SPCPUTargetMachine.cpp	/^bool SPCPUPassConfig::addPreISel() { return false; }$/;"	kind:f	class:SPCPUPassConfig	typeref:typename:bool	signature:()
adjustCodeGenOpts	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^static void adjustCodeGenOpts(const Triple &TT, Reloc::Model RM,$/;"	kind:f	typeref:typename:void	file:	signature:(const Triple & TT,Reloc::Model RM,CodeModel::Model & CM)
analyzeBranch	SPCPUInstrInfo.cpp	/^bool SPCPUInstrInfo::analyzeBranch(MachineBasicBlock &MBB, MachineBasicBlock *&TBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:bool	signature:(MachineBasicBlock & MBB,MachineBasicBlock * & TBB,MachineBasicBlock * & FBB,SmallVectorImpl<MachineOperand> & Cond,bool AllowModify) const
analyzeBranch	SPCPUInstrInfo.h	/^  bool analyzeBranch(MachineBasicBlock &MBB, MachineBasicBlock *&TBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:bool	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock * & TBB,MachineBasicBlock * & FBB,SmallVectorImpl<MachineOperand> & Cond,bool AllowModify=false) const
anchor	MCTargetDesc/SPCPUMCAsmInfo.cpp	/^void SPCPUMCAsmInfo::anchor() {}$/;"	kind:f	class:SPCPUMCAsmInfo	typeref:typename:void	signature:()
anchor	MCTargetDesc/SPCPUMCAsmInfo.h	/^  virtual void anchor();$/;"	kind:p	class:llvm::SPCPUMCAsmInfo	typeref:typename:void	access:private	signature:()
anchor	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::anchor() {}$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:()
anchor	SPCPUInstrInfo.h	/^  virtual void anchor();$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:private	signature:()
anchor	SPCPUSubtarget.cpp	/^void SPCPUSubtarget::anchor() {}$/;"	kind:f	class:SPCPUSubtarget	typeref:typename:void	signature:()
anchor	SPCPUSubtarget.h	/^  virtual void anchor();$/;"	kind:p	class:llvm::SPCPUSubtarget	typeref:typename:void	access:private	signature:()
applyFixup	MCTargetDesc/SPCPUAsmBackend.cpp	/^  void applyFixup(const MCFixup &Fixup, char *Data, unsigned DataSize,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:void	file:	access:public	signature:(const MCFixup & Fixup,char * Data,unsigned DataSize,uint64_t Value,bool IsPCRel) const
computeDataLayout	SPCPUTargetMachine.cpp	/^static std::string computeDataLayout(const Triple &TT, StringRef CPU,$/;"	kind:f	typeref:typename:std::string	file:	signature:(const Triple & TT,StringRef CPU,const TargetOptions & Options)
computeStackSize	SPCPUFrameLowering.cpp	/^uint64_t SPCPUFrameLowering::computeStackSize(MachineFunction &MF) const {$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:uint64_t	signature:(MachineFunction & MF) const
computeStackSize	SPCPUFrameLowering.h	/^  uint64_t computeStackSize(MachineFunction &MF) const;$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:uint64_t	access:private	signature:(MachineFunction & MF) const
copyPhysReg	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::copyPhysReg(MachineBasicBlock &MBB, MachineBasicBlock::iterator I,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,const DebugLoc & DL,unsigned DestReg,unsigned SrcReg,bool KillSrc) const
copyPhysReg	SPCPUInstrInfo.h	/^  void copyPhysReg(MachineBasicBlock &MBB, MachineBasicBlock::iterator I,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,const DebugLoc & DL,unsigned DestReg,unsigned SrcReg,bool KillSrc) const
createObjectWriter	MCTargetDesc/SPCPUAsmBackend.cpp	/^  MCObjectWriter *createObjectWriter(raw_pwrite_stream &OS) const override {$/;"	kind:f	class:__anon3c7e6baf0210::ELFSPCPUAsmBackend	typeref:typename:MCObjectWriter *	file:	access:public	signature:(raw_pwrite_stream & OS) const
createPassConfig	SPCPUTargetMachine.cpp	/^TargetPassConfig *SPCPUTargetMachine::createPassConfig(PassManagerBase &PM) {$/;"	kind:f	class:SPCPUTargetMachine	typeref:typename:TargetPassConfig *	signature:(PassManagerBase & PM)
createPassConfig	SPCPUTargetMachine.h	/^  virtual TargetPassConfig *createPassConfig(PassManagerBase &PM) override;$/;"	kind:p	class:llvm::SPCPUTargetMachine	typeref:typename:TargetPassConfig *	access:public	signature:(PassManagerBase & PM)
createSPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^MCAsmBackend *llvm::createSPCPUAsmBackend(const Target &T,$/;"	kind:f	class:llvm	typeref:typename:MCAsmBackend *	signature:(const Target & T,const MCRegisterInfo & MRI,const Triple & TT,StringRef CPU,const MCTargetOptions & Options)
createSPCPUAsmBackend	MCTargetDesc/SPCPUMCTargetDesc.h	/^MCAsmBackend *createSPCPUAsmBackend(const Target &T,$/;"	kind:p	namespace:llvm	typeref:typename:MCAsmBackend *	signature:(const Target & T,const MCRegisterInfo & MRI,const Triple & TT,StringRef CPU,const MCTargetOptions & Options)
createSPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^MCObjectWriter *llvm::createSPCPUELFObjectWriter(raw_pwrite_stream &OS, uint8_t OSABI) {$/;"	kind:f	class:llvm	typeref:typename:MCObjectWriter *	signature:(raw_pwrite_stream & OS,uint8_t OSABI)
createSPCPUELFObjectWriter	MCTargetDesc/SPCPUMCTargetDesc.h	/^MCObjectWriter *createSPCPUELFObjectWriter(raw_pwrite_stream &OS, uint8_t OSABI);$/;"	kind:p	namespace:llvm	typeref:typename:MCObjectWriter *	signature:(raw_pwrite_stream & OS,uint8_t OSABI)
createSPCPUISelDag	SPCPU.h	/^FunctionPass *createSPCPUISelDag(SPCPUTargetMachine &TM,$/;"	kind:p	namespace:llvm	typeref:typename:FunctionPass *	signature:(SPCPUTargetMachine & TM,CodeGenOpt::Level OptLevel)
createSPCPUISelDag	SPCPUISelDAGToDAG.cpp	/^FunctionPass *llvm::createSPCPUISelDag(SPCPUTargetMachine &TM,$/;"	kind:f	class:llvm	typeref:typename:FunctionPass *	signature:(SPCPUTargetMachine & TM,CodeGenOpt::Level OptLevel)
createSPCPUMCAsmInfo	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^static MCAsmInfo *createSPCPUMCAsmInfo(const MCRegisterInfo &MRI,$/;"	kind:f	typeref:typename:MCAsmInfo *	file:	signature:(const MCRegisterInfo & MRI,const Triple & TT)
createSPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^MCCodeEmitter *llvm::createSPCPUMCCodeEmitter(const MCInstrInfo &MCII,$/;"	kind:f	class:llvm	typeref:typename:MCCodeEmitter *	signature:(const MCInstrInfo & MCII,const MCRegisterInfo & MRI,MCContext & Ctx)
createSPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCTargetDesc.h	/^MCCodeEmitter *createSPCPUMCCodeEmitter(const MCInstrInfo &MCII,$/;"	kind:p	namespace:llvm	typeref:typename:MCCodeEmitter *	signature:(const MCInstrInfo & MCII,const MCRegisterInfo & MRI,MCContext & Ctx)
createSPCPUMCInstPrinter	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^createSPCPUMCInstPrinter(const Triple &TT, unsigned SyntaxVariant,$/;"	kind:f	typeref:typename:MCInstPrinter *	file:	signature:(const Triple & TT,unsigned SyntaxVariant,const MCAsmInfo & MAI,const MCInstrInfo & MII,const MCRegisterInfo & MRI)
createSPCPUMCInstrInfo	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^static MCInstrInfo *createSPCPUMCInstrInfo() {$/;"	kind:f	typeref:typename:MCInstrInfo *	file:	signature:()
createSPCPUMCRegisterInfo	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^static MCRegisterInfo *createSPCPUMCRegisterInfo(const Triple &TT) {$/;"	kind:f	typeref:typename:MCRegisterInfo *	file:	signature:(const Triple & TT)
createSPCPUMCSubtargetInfo	MCTargetDesc/SPCPUMCTargetDesc.cpp	/^static MCSubtargetInfo *createSPCPUMCSubtargetInfo(const Triple &TT,$/;"	kind:f	typeref:typename:MCSubtargetInfo *	file:	signature:(const Triple & TT,StringRef CPU,StringRef FS)
eliminateCallFramePseudoInstr	SPCPUFrameLowering.cpp	/^MachineBasicBlock::iterator SPCPUFrameLowering::eliminateCallFramePseudoInstr($/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:MachineBasicBlock::iterator	signature:(MachineFunction & MF,MachineBasicBlock & MBB,MachineBasicBlock::iterator I) const
eliminateCallFramePseudoInstr	SPCPUFrameLowering.h	/^  eliminateCallFramePseudoInstr(MachineFunction &MF, MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:MachineBasicBlock::iterator	access:public	signature:(MachineFunction & MF,MachineBasicBlock & MBB,MachineBasicBlock::iterator I) const
eliminateFrameIndex	SPCPURegisterInfo.cpp	/^void SPCPURegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:void	signature:(MachineBasicBlock::iterator II,int SPAdj,unsigned FIOperandNum,RegScavenger * RS) const
eliminateFrameIndex	SPCPURegisterInfo.h	/^  void eliminateFrameIndex(MachineBasicBlock::iterator II, int SPAdj,$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock::iterator II,int SPAdj,unsigned FIOperandNum,RegScavenger * RS=NULL) const
emitEpilogue	SPCPUFrameLowering.cpp	/^void SPCPUFrameLowering::emitEpilogue(MachineFunction &MF,$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:void	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
emitEpilogue	SPCPUFrameLowering.h	/^  void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const override;$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:void	access:public	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
emitPrologue	SPCPUFrameLowering.cpp	/^void SPCPUFrameLowering::emitPrologue(MachineFunction &MF,$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:void	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
emitPrologue	SPCPUFrameLowering.h	/^  void emitPrologue(MachineFunction &MF,$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:void	access:public	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
encodeInstruction	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void encodeInstruction(const MCInst &MI, raw_ostream &OS,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:public	signature:(const MCInst & MI,raw_ostream & OS,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
encodeInstruction	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^void SPCPUMCCodeEmitter::encodeInstruction(const MCInst &MI, raw_ostream &OS,$/;"	kind:f	class:SPCPUMCCodeEmitter	typeref:typename:void	signature:(const MCInst & MI,raw_ostream & OS,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
expandPostRAPseudo	SPCPUInstrInfo.cpp	/^bool SPCPUInstrInfo::expandPostRAPseudo(MachineInstr &MI) const {$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:bool	signature:(MachineInstr & MI) const
expandPostRAPseudo	SPCPUInstrInfo.h	/^  bool expandPostRAPseudo(MachineInstr &MI) const override;$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:bool	access:public	signature:(MachineInstr & MI) const
fixupNeedsRelaxation	MCTargetDesc/SPCPUAsmBackend.cpp	/^  bool fixupNeedsRelaxation(const MCFixup &Fixup, uint64_t Value,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:bool	file:	access:public	signature:(const MCFixup & Fixup,uint64_t Value,const MCRelaxableFragment * DF,const MCAsmLayout & Layout) const
getBinaryCodeForInstr	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  uint64_t getBinaryCodeForInstr(const MCInst &MI,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:uint64_t	file:	access:public	signature:(const MCInst & MI,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
getCallPreservedMask	SPCPURegisterInfo.cpp	/^const uint32_t *SPCPURegisterInfo::getCallPreservedMask$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:const uint32_t *	signature:(const MachineFunction & MF,CallingConv::ID) const
getCallPreservedMask	SPCPURegisterInfo.h	/^  const uint32_t *getCallPreservedMask(const MachineFunction &MF,$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:const uint32_t *	access:public	signature:(const MachineFunction & MF,CallingConv::ID) const
getCalleeSavedRegs	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::getCalleeSavedRegs(const MachineFunction *MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:const uint16_t *	signature:(const MachineFunction * MF) const
getCalleeSavedRegs	SPCPURegisterInfo.h	/^  const uint16_t *getCalleeSavedRegs(const MachineFunction *MF = 0) const$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:const uint16_t *	access:public	signature:(const MachineFunction * MF=0) const
getEffectiveRelocModel	SPCPUTargetMachine.cpp	/^static Reloc::Model getEffectiveRelocModel(const Triple &TT,$/;"	kind:f	typeref:typename:Reloc::Model	file:	signature:(const Triple & TT,Optional<Reloc::Model> RM)
getFrameLowering	SPCPUSubtarget.h	/^  const SPCPUFrameLowering *getFrameLowering() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUFrameLowering *	access:public	signature:() const
getFrameRegister	SPCPURegisterInfo.cpp	/^unsigned SPCPURegisterInfo::getFrameRegister(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:unsigned	signature:(const MachineFunction & MF) const
getFrameRegister	SPCPURegisterInfo.h	/^  unsigned getFrameRegister(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:unsigned	access:public	signature:(const MachineFunction & MF) const
getInstrInfo	SPCPUSubtarget.h	/^  const SPCPUInstrInfo *getInstrInfo() const override { return &InstrInfo; }$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUInstrInfo *	access:public	signature:() const
getInstrItineraryData	SPCPUSubtarget.h	/^  const InstrItineraryData *getInstrItineraryData() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const InstrItineraryData *	access:public	signature:() const
getMachineOpValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  unsigned getMachineOpValue(const MCInst &MI, const MCOperand &MO,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:unsigned	file:	access:public	signature:(const MCInst & MI,const MCOperand & MO,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
getMachineOpValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^unsigned SPCPUMCCodeEmitter::getMachineOpValue(const MCInst &MI,$/;"	kind:f	class:SPCPUMCCodeEmitter	typeref:typename:unsigned	signature:(const MCInst & MI,const MCOperand & MO,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
getMemSrcValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  unsigned getMemSrcValue(const MCInst &MI, unsigned OpIdx,$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:unsigned	file:	access:public	signature:(const MCInst & MI,unsigned OpIdx,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
getMemSrcValue	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^unsigned SPCPUMCCodeEmitter::getMemSrcValue(const MCInst &MI, unsigned OpIdx,$/;"	kind:f	class:SPCPUMCCodeEmitter	typeref:typename:unsigned	signature:(const MCInst & MI,unsigned OpIdx,SmallVectorImpl<MCFixup> & Fixups,const MCSubtargetInfo & STI) const
getNumFixupKinds	MCTargetDesc/SPCPUAsmBackend.cpp	/^  unsigned getNumFixupKinds() const override {$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:unsigned	file:	access:public	signature:() const
getObjFileLowering	SPCPUTargetMachine.h	/^  TargetLoweringObjectFile *getObjFileLowering() const override {$/;"	kind:f	class:llvm::SPCPUTargetMachine	typeref:typename:TargetLoweringObjectFile *	access:public	signature:() const
getPassName	SPCPUAsmPrinter.cpp	/^  virtual llvm::StringRef getPassName() const { return "SPCPU Assembly Printer"; }$/;"	kind:f	class:__anon8c6b42060110::SPCPUAsmPrinter	typeref:typename:llvm::StringRef	file:	access:public	signature:() const
getPassName	SPCPUISelDAGToDAG.cpp	/^  virtual llvm::StringRef getPassName() const override {$/;"	kind:f	class:__anone1cf9c490110::SPCPUDAGToDAGISel	typeref:typename:llvm::StringRef	file:	access:public	signature:() const
getPointerSize	MCTargetDesc/SPCPUAsmBackend.cpp	/^  unsigned getPointerSize() const { return 4; }$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:unsigned	file:	access:public	signature:() const
getRegisterInfo	SPCPUInstrInfo.h	/^  const SPCPURegisterInfo &getRegisterInfo() const { return RI; }$/;"	kind:f	class:llvm::SPCPUInstrInfo	typeref:typename:const SPCPURegisterInfo &	access:public	signature:() const
getRegisterInfo	SPCPUSubtarget.h	/^  const SPCPURegisterInfo *getRegisterInfo() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPURegisterInfo *	access:public	signature:() const
getRegisterName	InstPrinter/SPCPUInstPrinter.h	/^  static const char *getRegisterName(unsigned RegNo);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:const char *	access:public	signature:(unsigned RegNo)
getRelocType	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^    unsigned getRelocType(MCContext &Ctx, const MCValue &Target,$/;"	kind:p	class:__anon3589f0110110::SPCPUELFObjectWriter	typeref:typename:unsigned	file:	access:public	signature:(MCContext & Ctx,const MCValue & Target,const MCFixup & Fixup,bool IsPCRel) const
getRelocType	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^unsigned SPCPUELFObjectWriter::getRelocType(MCContext &Ctx, const MCValue &Target,$/;"	kind:f	class:SPCPUELFObjectWriter	typeref:typename:unsigned	signature:(MCContext & Ctx,const MCValue & Target,const MCFixup & Fixup,bool IsPCRel) const
getReservedRegs	SPCPURegisterInfo.cpp	/^BitVector SPCPURegisterInfo::getReservedRegs(const MachineFunction &MF) $/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:BitVector	signature:(const MachineFunction & MF) const
getReservedRegs	SPCPURegisterInfo.h	/^  BitVector getReservedRegs(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:BitVector	access:public	signature:(const MachineFunction & MF) const
getSPCPUTargetMachine	SPCPUTargetMachine.cpp	/^  SPCPUTargetMachine &getSPCPUTargetMachine() const {$/;"	kind:f	class:__anonb21e219d0110::SPCPUPassConfig	typeref:typename:SPCPUTargetMachine &	file:	access:public	signature:() const
getSelectionDAGInfo	SPCPUSubtarget.h	/^  const SPCPUSelectionDAGInfo *getSelectionDAGInfo() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUSelectionDAGInfo *	access:public	signature:() const
getSubtargetImpl	SPCPUTargetMachine.h	/^  const SPCPUSubtarget * getSubtargetImpl() const {$/;"	kind:f	class:llvm::SPCPUTargetMachine	typeref:typename:const SPCPUSubtarget *	access:public	signature:() const
getSubtargetImpl	SPCPUTargetMachine.h	/^  getSubtargetImpl(const Function &) const override {$/;"	kind:f	class:llvm::SPCPUTargetMachine	typeref:typename:const TargetSubtargetInfo *	access:public	signature:(const Function &) const
getTargetLowering	SPCPUSubtarget.h	/^  const SPCPUTargetLowering *getTargetLowering() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUTargetLowering *	access:public	signature:() const
getTargetNodeName	SPCPUISelLowering.cpp	/^const char *SPCPUTargetLowering::getTargetNodeName(unsigned Opcode) const {$/;"	kind:f	class:SPCPUTargetLowering	typeref:typename:const char *	signature:(unsigned Opcode) const
getTargetNodeName	SPCPUISelLowering.h	/^  virtual const char *getTargetNodeName(unsigned Opcode) const override;$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:const char *	access:public	signature:(unsigned Opcode) const
hasFP	SPCPUFrameLowering.cpp	/^bool SPCPUFrameLowering::hasFP(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPUFrameLowering	typeref:typename:bool	signature:(const MachineFunction & MF) const
hasFP	SPCPUFrameLowering.h	/^  bool hasFP(const MachineFunction &MF) const override;$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
insertBranch	SPCPUInstrInfo.cpp	/^unsigned SPCPUInstrInfo::insertBranch(MachineBasicBlock &MBB, MachineBasicBlock *TBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:unsigned	signature:(MachineBasicBlock & MBB,MachineBasicBlock * TBB,MachineBasicBlock * FBB,ArrayRef<MachineOperand> Cond,const DebugLoc & DL,int * BytesAdded) const
insertBranch	SPCPUInstrInfo.h	/^  unsigned insertBranch(MachineBasicBlock &MBB, MachineBasicBlock *TBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:unsigned	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock * TBB,MachineBasicBlock * FBB,ArrayRef<MachineOperand> Cond,const DebugLoc & DL,int * BytesAdded=nullptr) const
llvm	InstPrinter/SPCPUInstPrinter.h	/^namespace llvm {$/;"	kind:n
llvm	MCTargetDesc/SPCPUMCAsmInfo.h	/^namespace llvm {$/;"	kind:n
llvm	MCTargetDesc/SPCPUMCTargetDesc.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPU.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUFrameLowering.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUISelLowering.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUInstrInfo.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUMCInstLower.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUMachineFunctionInfo.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPURegisterInfo.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUSelectionDAGInfo.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUSubtarget.h	/^namespace llvm {$/;"	kind:n
llvm	SPCPUTargetMachine.h	/^namespace llvm {$/;"	kind:n
llvm	TargetInfo/SPCPUTargetInfo.cpp	/^namespace llvm$/;"	kind:n	file:
llvm::CALL	SPCPUISelLowering.h	/^  CALL$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
llvm::FIRST_NUMBER	SPCPUISelLowering.h	/^  FIRST_NUMBER = ISD::BUILTIN_OP_END,$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
llvm::LOAD_SYM	SPCPUISelLowering.h	/^  LOAD_SYM,$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
llvm::RET_FLAG	SPCPUISelLowering.h	/^  RET_FLAG,$/;"	kind:e	enum:llvm::SPCPUISD::NodeType	access:public
llvm::SPCPUFrameLowering	SPCPUFrameLowering.h	/^class SPCPUFrameLowering : public TargetFrameLowering {$/;"	kind:c	namespace:llvm	inherits:TargetFrameLowering
llvm::SPCPUFrameLowering::SPCPUFrameLowering	SPCPUFrameLowering.h	/^  SPCPUFrameLowering();$/;"	kind:p	class:llvm::SPCPUFrameLowering	access:public	signature:()
llvm::SPCPUFrameLowering::computeStackSize	SPCPUFrameLowering.h	/^  uint64_t computeStackSize(MachineFunction &MF) const;$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:uint64_t	access:private	signature:(MachineFunction & MF) const
llvm::SPCPUFrameLowering::eliminateCallFramePseudoInstr	SPCPUFrameLowering.h	/^  eliminateCallFramePseudoInstr(MachineFunction &MF, MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:MachineBasicBlock::iterator	access:public	signature:(MachineFunction & MF,MachineBasicBlock & MBB,MachineBasicBlock::iterator I) const
llvm::SPCPUFrameLowering::emitEpilogue	SPCPUFrameLowering.h	/^  void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const override;$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:void	access:public	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
llvm::SPCPUFrameLowering::emitPrologue	SPCPUFrameLowering.h	/^  void emitPrologue(MachineFunction &MF,$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:void	access:public	signature:(MachineFunction & MF,MachineBasicBlock & MBB) const
llvm::SPCPUFrameLowering::hasFP	SPCPUFrameLowering.h	/^  bool hasFP(const MachineFunction &MF) const override;$/;"	kind:p	class:llvm::SPCPUFrameLowering	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
llvm::SPCPUFrameLowering::stackSlotSize	SPCPUFrameLowering.h	/^  static int stackSlotSize() { return 4; }$/;"	kind:f	class:llvm::SPCPUFrameLowering	typeref:typename:int	access:public	signature:()
llvm::SPCPUFunctionInfo	SPCPUMachineFunctionInfo.h	/^class SPCPUFunctionInfo : public MachineFunctionInfo {$/;"	kind:c	namespace:llvm	inherits:MachineFunctionInfo
llvm::SPCPUFunctionInfo::SPCPUFunctionInfo	SPCPUMachineFunctionInfo.h	/^  SPCPUFunctionInfo() {}$/;"	kind:f	class:llvm::SPCPUFunctionInfo	access:public	signature:()
llvm::SPCPUFunctionInfo::~SPCPUFunctionInfo	SPCPUMachineFunctionInfo.h	/^  ~SPCPUFunctionInfo() {}$/;"	kind:f	class:llvm::SPCPUFunctionInfo	access:public	signature:()
llvm::SPCPUISD	SPCPUISelLowering.h	/^namespace SPCPUISD {$/;"	kind:n	namespace:llvm
llvm::SPCPUISD::NodeType	SPCPUISelLowering.h	/^enum NodeType {$/;"	kind:g	namespace:llvm::SPCPUISD
llvm::SPCPUInstPrinter	InstPrinter/SPCPUInstPrinter.h	/^class SPCPUInstPrinter : public MCInstPrinter {$/;"	kind:c	namespace:llvm	inherits:MCInstPrinter
llvm::SPCPUInstPrinter::SPCPUInstPrinter	InstPrinter/SPCPUInstPrinter.h	/^  SPCPUInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,$/;"	kind:p	class:llvm::SPCPUInstPrinter	access:public	signature:(const MCAsmInfo & MAI,const MCInstrInfo & MII,const MCRegisterInfo & MRI)
llvm::SPCPUInstPrinter::getRegisterName	InstPrinter/SPCPUInstPrinter.h	/^  static const char *getRegisterName(unsigned RegNo);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:const char *	access:public	signature:(unsigned RegNo)
llvm::SPCPUInstPrinter::printAddrModeMemSrc	InstPrinter/SPCPUInstPrinter.h	/^  void printAddrModeMemSrc(const MCInst *MI, unsigned OpNum, raw_ostream &O);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:private	signature:(const MCInst * MI,unsigned OpNum,raw_ostream & O)
llvm::SPCPUInstPrinter::printInst	InstPrinter/SPCPUInstPrinter.h	/^  virtual void printInst(const MCInst *MI, raw_ostream &OS, StringRef Annot,$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:public	signature:(const MCInst * MI,raw_ostream & OS,StringRef Annot,const MCSubtargetInfo & STI)
llvm::SPCPUInstPrinter::printInstruction	InstPrinter/SPCPUInstPrinter.h	/^  void printInstruction(const MCInst *MI, raw_ostream &O);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:public	signature:(const MCInst * MI,raw_ostream & O)
llvm::SPCPUInstPrinter::printOperand	InstPrinter/SPCPUInstPrinter.h	/^  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:private	signature:(const MCInst * MI,unsigned OpNo,raw_ostream & O)
llvm::SPCPUInstPrinter::printRegName	InstPrinter/SPCPUInstPrinter.h	/^  virtual void printRegName(raw_ostream &OS, unsigned RegNo) const override;$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:public	signature:(raw_ostream & OS,unsigned RegNo) const
llvm::SPCPUInstrInfo	SPCPUInstrInfo.h	/^class SPCPUInstrInfo : public SPCPUGenInstrInfo {$/;"	kind:c	namespace:llvm	inherits:SPCPUGenInstrInfo
llvm::SPCPUInstrInfo::RI	SPCPUInstrInfo.h	/^  const SPCPURegisterInfo RI;$/;"	kind:m	class:llvm::SPCPUInstrInfo	typeref:typename:const SPCPURegisterInfo	access:private
llvm::SPCPUInstrInfo::SPCPUInstrInfo	SPCPUInstrInfo.h	/^  SPCPUInstrInfo();$/;"	kind:p	class:llvm::SPCPUInstrInfo	access:public	signature:()
llvm::SPCPUInstrInfo::analyzeBranch	SPCPUInstrInfo.h	/^  bool analyzeBranch(MachineBasicBlock &MBB, MachineBasicBlock *&TBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:bool	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock * & TBB,MachineBasicBlock * & FBB,SmallVectorImpl<MachineOperand> & Cond,bool AllowModify=false) const
llvm::SPCPUInstrInfo::anchor	SPCPUInstrInfo.h	/^  virtual void anchor();$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:private	signature:()
llvm::SPCPUInstrInfo::copyPhysReg	SPCPUInstrInfo.h	/^  void copyPhysReg(MachineBasicBlock &MBB, MachineBasicBlock::iterator I,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,const DebugLoc & DL,unsigned DestReg,unsigned SrcReg,bool KillSrc) const
llvm::SPCPUInstrInfo::expandPostRAPseudo	SPCPUInstrInfo.h	/^  bool expandPostRAPseudo(MachineInstr &MI) const override;$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:bool	access:public	signature:(MachineInstr & MI) const
llvm::SPCPUInstrInfo::getRegisterInfo	SPCPUInstrInfo.h	/^  const SPCPURegisterInfo &getRegisterInfo() const { return RI; }$/;"	kind:f	class:llvm::SPCPUInstrInfo	typeref:typename:const SPCPURegisterInfo &	access:public	signature:() const
llvm::SPCPUInstrInfo::insertBranch	SPCPUInstrInfo.h	/^  unsigned insertBranch(MachineBasicBlock &MBB, MachineBasicBlock *TBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:unsigned	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock * TBB,MachineBasicBlock * FBB,ArrayRef<MachineOperand> Cond,const DebugLoc & DL,int * BytesAdded=nullptr) const
llvm::SPCPUInstrInfo::loadRegFromStackSlot	SPCPUInstrInfo.h	/^  virtual void loadRegFromStackSlot(MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator MI,unsigned DestReg,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
llvm::SPCPUInstrInfo::removeBranch	SPCPUInstrInfo.h	/^  unsigned removeBranch(MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:unsigned	access:public	signature:(MachineBasicBlock & MBB,int * BytesRemoved=nullptr) const
llvm::SPCPUInstrInfo::storeRegToStackSlot	SPCPUInstrInfo.h	/^  virtual void storeRegToStackSlot(MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator MI,unsigned SrcReg,bool isKill,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
llvm::SPCPUMCAsmInfo	MCTargetDesc/SPCPUMCAsmInfo.h	/^class SPCPUMCAsmInfo : public MCAsmInfoELF {$/;"	kind:c	namespace:llvm	inherits:MCAsmInfoELF
llvm::SPCPUMCAsmInfo::SPCPUMCAsmInfo	MCTargetDesc/SPCPUMCAsmInfo.h	/^  explicit SPCPUMCAsmInfo(const Triple &TT);$/;"	kind:p	class:llvm::SPCPUMCAsmInfo	access:public	signature:(const Triple & TT)
llvm::SPCPUMCAsmInfo::anchor	MCTargetDesc/SPCPUMCAsmInfo.h	/^  virtual void anchor();$/;"	kind:p	class:llvm::SPCPUMCAsmInfo	typeref:typename:void	access:private	signature:()
llvm::SPCPUMCInstLower	SPCPUMCInstLower.h	/^class LLVM_LIBRARY_VISIBILITY SPCPUMCInstLower {$/;"	kind:c	namespace:llvm
llvm::SPCPUMCInstLower::Ctx	SPCPUMCInstLower.h	/^  MCContext *Ctx;$/;"	kind:m	class:llvm::SPCPUMCInstLower	typeref:typename:MCContext *	access:private
llvm::SPCPUMCInstLower::Initialize	SPCPUMCInstLower.h	/^  void Initialize(Mangler *mang, MCContext *C);$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:void	access:public	signature:(Mangler * mang,MCContext * C)
llvm::SPCPUMCInstLower::Lower	SPCPUMCInstLower.h	/^  void Lower(const MachineInstr *MI, MCInst &OutMI) const;$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:void	access:public	signature:(const MachineInstr * MI,MCInst & OutMI) const
llvm::SPCPUMCInstLower::LowerOperand	SPCPUMCInstLower.h	/^  MCOperand LowerOperand(const MachineOperand &MO, unsigned offset = 0) const;$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:MCOperand	access:public	signature:(const MachineOperand & MO,unsigned offset=0) const
llvm::SPCPUMCInstLower::LowerSymbolOperand	SPCPUMCInstLower.h	/^  MCOperand LowerSymbolOperand(const MachineOperand &MO,$/;"	kind:p	class:llvm::SPCPUMCInstLower	typeref:typename:MCOperand	access:private	signature:(const MachineOperand & MO,MachineOperandType MOTy,unsigned Offset) const
llvm::SPCPUMCInstLower::MachineOperandType	SPCPUMCInstLower.h	/^  typedef MachineOperand::MachineOperandType MachineOperandType;$/;"	kind:t	class:llvm::SPCPUMCInstLower	typeref:typename:MachineOperand::MachineOperandType	access:private
llvm::SPCPUMCInstLower::Mang	SPCPUMCInstLower.h	/^  Mangler *Mang;$/;"	kind:m	class:llvm::SPCPUMCInstLower	typeref:typename:Mangler *	access:private
llvm::SPCPUMCInstLower::Printer	SPCPUMCInstLower.h	/^  AsmPrinter &Printer;$/;"	kind:m	class:llvm::SPCPUMCInstLower	typeref:typename:AsmPrinter &	access:private
llvm::SPCPUMCInstLower::SPCPUMCInstLower	SPCPUMCInstLower.h	/^  SPCPUMCInstLower(class AsmPrinter &asmprinter);$/;"	kind:p	class:llvm::SPCPUMCInstLower	access:public	signature:(class AsmPrinter & asmprinter)
llvm::SPCPURegisterInfo	SPCPURegisterInfo.h	/^struct SPCPURegisterInfo : public SPCPUGenRegisterInfo {$/;"	kind:s	namespace:llvm	inherits:SPCPUGenRegisterInfo
llvm::SPCPURegisterInfo::SPCPURegisterInfo	SPCPURegisterInfo.h	/^  SPCPURegisterInfo();$/;"	kind:p	struct:llvm::SPCPURegisterInfo	access:public	signature:()
llvm::SPCPURegisterInfo::eliminateFrameIndex	SPCPURegisterInfo.h	/^  void eliminateFrameIndex(MachineBasicBlock::iterator II, int SPAdj,$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock::iterator II,int SPAdj,unsigned FIOperandNum,RegScavenger * RS=NULL) const
llvm::SPCPURegisterInfo::getCallPreservedMask	SPCPURegisterInfo.h	/^  const uint32_t *getCallPreservedMask(const MachineFunction &MF,$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:const uint32_t *	access:public	signature:(const MachineFunction & MF,CallingConv::ID) const
llvm::SPCPURegisterInfo::getCalleeSavedRegs	SPCPURegisterInfo.h	/^  const uint16_t *getCalleeSavedRegs(const MachineFunction *MF = 0) const$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:const uint16_t *	access:public	signature:(const MachineFunction * MF=0) const
llvm::SPCPURegisterInfo::getFrameRegister	SPCPURegisterInfo.h	/^  unsigned getFrameRegister(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:unsigned	access:public	signature:(const MachineFunction & MF) const
llvm::SPCPURegisterInfo::getReservedRegs	SPCPURegisterInfo.h	/^  BitVector getReservedRegs(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:BitVector	access:public	signature:(const MachineFunction & MF) const
llvm::SPCPURegisterInfo::requiresRegisterScavenging	SPCPURegisterInfo.h	/^  bool requiresRegisterScavenging(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
llvm::SPCPURegisterInfo::trackLivenessAfterRegAlloc	SPCPURegisterInfo.h	/^  bool trackLivenessAfterRegAlloc(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
llvm::SPCPURegisterInfo::useFPForScavengingIndex	SPCPURegisterInfo.h	/^  bool useFPForScavengingIndex(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
llvm::SPCPUSelectionDAGInfo	SPCPUSelectionDAGInfo.h	/^class SPCPUSelectionDAGInfo : public SelectionDAGTargetInfo {$/;"	kind:c	namespace:llvm	inherits:SelectionDAGTargetInfo
llvm::SPCPUSelectionDAGInfo::~SPCPUSelectionDAGInfo	SPCPUSelectionDAGInfo.h	/^  ~SPCPUSelectionDAGInfo();$/;"	kind:p	class:llvm::SPCPUSelectionDAGInfo	access:public	signature:()
llvm::SPCPUSubtarget	SPCPUSubtarget.h	/^class SPCPUSubtarget : public SPCPUGenSubtargetInfo {$/;"	kind:c	namespace:llvm	inherits:SPCPUGenSubtargetInfo
llvm::SPCPUSubtarget::DL	SPCPUSubtarget.h	/^  const DataLayout DL;       \/\/ Calculates type size & alignment.$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:const DataLayout	access:private
llvm::SPCPUSubtarget::FrameLowering	SPCPUSubtarget.h	/^  SPCPUFrameLowering FrameLowering;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUFrameLowering	access:private
llvm::SPCPUSubtarget::InstrInfo	SPCPUSubtarget.h	/^  SPCPUInstrInfo InstrInfo;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUInstrInfo	access:private
llvm::SPCPUSubtarget::InstrItins	SPCPUSubtarget.h	/^  InstrItineraryData InstrItins;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:InstrItineraryData	access:private
llvm::SPCPUSubtarget::ParseSubtargetFeatures	SPCPUSubtarget.h	/^  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);$/;"	kind:p	class:llvm::SPCPUSubtarget	typeref:typename:void	access:public	signature:(StringRef CPU,StringRef FS)
llvm::SPCPUSubtarget::SPCPUSubtarget	SPCPUSubtarget.h	/^  SPCPUSubtarget(const Triple &TT, StringRef CPU,$/;"	kind:p	class:llvm::SPCPUSubtarget	access:public	signature:(const Triple & TT,StringRef CPU,StringRef FS,SPCPUTargetMachine & TM)
llvm::SPCPUSubtarget::TLInfo	SPCPUSubtarget.h	/^  SPCPUTargetLowering TLInfo;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUTargetLowering	access:private
llvm::SPCPUSubtarget::TSInfo	SPCPUSubtarget.h	/^  SPCPUSelectionDAGInfo TSInfo;$/;"	kind:m	class:llvm::SPCPUSubtarget	typeref:typename:SPCPUSelectionDAGInfo	access:private
llvm::SPCPUSubtarget::anchor	SPCPUSubtarget.h	/^  virtual void anchor();$/;"	kind:p	class:llvm::SPCPUSubtarget	typeref:typename:void	access:private	signature:()
llvm::SPCPUSubtarget::getFrameLowering	SPCPUSubtarget.h	/^  const SPCPUFrameLowering *getFrameLowering() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUFrameLowering *	access:public	signature:() const
llvm::SPCPUSubtarget::getInstrInfo	SPCPUSubtarget.h	/^  const SPCPUInstrInfo *getInstrInfo() const override { return &InstrInfo; }$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUInstrInfo *	access:public	signature:() const
llvm::SPCPUSubtarget::getInstrItineraryData	SPCPUSubtarget.h	/^  const InstrItineraryData *getInstrItineraryData() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const InstrItineraryData *	access:public	signature:() const
llvm::SPCPUSubtarget::getRegisterInfo	SPCPUSubtarget.h	/^  const SPCPURegisterInfo *getRegisterInfo() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPURegisterInfo *	access:public	signature:() const
llvm::SPCPUSubtarget::getSelectionDAGInfo	SPCPUSubtarget.h	/^  const SPCPUSelectionDAGInfo *getSelectionDAGInfo() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUSelectionDAGInfo *	access:public	signature:() const
llvm::SPCPUSubtarget::getTargetLowering	SPCPUSubtarget.h	/^  const SPCPUTargetLowering *getTargetLowering() const override {$/;"	kind:f	class:llvm::SPCPUSubtarget	typeref:typename:const SPCPUTargetLowering *	access:public	signature:() const
llvm::SPCPUTargetLowering	SPCPUISelLowering.h	/^class SPCPUTargetLowering : public TargetLowering {$/;"	kind:c	namespace:llvm	inherits:TargetLowering
llvm::SPCPUTargetLowering::CanLowerReturn	SPCPUISelLowering.h	/^  bool CanLowerReturn(CallingConv::ID CallConv, MachineFunction &MF,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:bool	access:private	signature:(CallingConv::ID CallConv,MachineFunction & MF,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & ArgsFlags,LLVMContext & Context) const
llvm::SPCPUTargetLowering::LowerCall	SPCPUISelLowering.h	/^  SDValue LowerCall(TargetLowering::CallLoweringInfo &CLI,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(TargetLowering::CallLoweringInfo & CLI,SmallVectorImpl<SDValue> & InVals) const
llvm::SPCPUTargetLowering::LowerCallResult	SPCPUISelLowering.h	/^  SDValue LowerCallResult(SDValue Chain, SDValue InGlue,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Chain,SDValue InGlue,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,SDLoc dl,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
llvm::SPCPUTargetLowering::LowerFormalArguments	SPCPUISelLowering.h	/^  SDValue LowerFormalArguments(SDValue Chain, CallingConv::ID CallConv,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::InputArg> & Ins,const SDLoc & DL,SelectionDAG & DAG,SmallVectorImpl<SDValue> & InVals) const
llvm::SPCPUTargetLowering::LowerGlobalAddress	SPCPUISelLowering.h	/^  SDValue LowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const;$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Op,SelectionDAG & DAG) const
llvm::SPCPUTargetLowering::LowerOperation	SPCPUISelLowering.h	/^  virtual SDValue LowerOperation(SDValue Op, SelectionDAG &DAG) const override;$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:public	signature:(SDValue Op,SelectionDAG & DAG) const
llvm::SPCPUTargetLowering::LowerReturn	SPCPUISelLowering.h	/^  SDValue LowerReturn(SDValue Chain, CallingConv::ID CallConv, bool isVarArg,$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:SDValue	access:private	signature:(SDValue Chain,CallingConv::ID CallConv,bool isVarArg,const SmallVectorImpl<ISD::OutputArg> & Outs,const SmallVectorImpl<SDValue> & OutVals,const SDLoc & DL,SelectionDAG & DAG) const
llvm::SPCPUTargetLowering::SPCPUTargetLowering	SPCPUISelLowering.h	/^  explicit SPCPUTargetLowering(SPCPUTargetMachine &TM);$/;"	kind:p	class:llvm::SPCPUTargetLowering	access:public	signature:(SPCPUTargetMachine & TM)
llvm::SPCPUTargetLowering::Subtarget	SPCPUISelLowering.h	/^  const SPCPUSubtarget &Subtarget;$/;"	kind:m	class:llvm::SPCPUTargetLowering	typeref:typename:const SPCPUSubtarget &	access:private
llvm::SPCPUTargetLowering::getTargetNodeName	SPCPUISelLowering.h	/^  virtual const char *getTargetNodeName(unsigned Opcode) const override;$/;"	kind:p	class:llvm::SPCPUTargetLowering	typeref:typename:const char *	access:public	signature:(unsigned Opcode) const
llvm::SPCPUTargetMachine	SPCPUTargetMachine.h	/^class SPCPUTargetMachine : public LLVMTargetMachine {$/;"	kind:c	namespace:llvm	inherits:LLVMTargetMachine
llvm::SPCPUTargetMachine::SPCPUTargetMachine	SPCPUTargetMachine.h	/^  SPCPUTargetMachine(const Target &T, const Triple &TT, StringRef CPU, StringRef FS,$/;"	kind:p	class:llvm::SPCPUTargetMachine	access:public	signature:(const Target & T,const Triple & TT,StringRef CPU,StringRef FS,const TargetOptions & Options,Optional<Reloc::Model> RM,CodeModel::Model CM,CodeGenOpt::Level OL)
llvm::SPCPUTargetMachine::Subtarget	SPCPUTargetMachine.h	/^  SPCPUSubtarget Subtarget;$/;"	kind:m	class:llvm::SPCPUTargetMachine	typeref:typename:SPCPUSubtarget	access:private
llvm::SPCPUTargetMachine::TLOF	SPCPUTargetMachine.h	/^  std::unique_ptr<TargetLoweringObjectFile> TLOF;$/;"	kind:m	class:llvm::SPCPUTargetMachine	typeref:typename:std::unique_ptr<TargetLoweringObjectFile>	access:private
llvm::SPCPUTargetMachine::createPassConfig	SPCPUTargetMachine.h	/^  virtual TargetPassConfig *createPassConfig(PassManagerBase &PM) override;$/;"	kind:p	class:llvm::SPCPUTargetMachine	typeref:typename:TargetPassConfig *	access:public	signature:(PassManagerBase & PM)
llvm::SPCPUTargetMachine::getObjFileLowering	SPCPUTargetMachine.h	/^  TargetLoweringObjectFile *getObjFileLowering() const override {$/;"	kind:f	class:llvm::SPCPUTargetMachine	typeref:typename:TargetLoweringObjectFile *	access:public	signature:() const
llvm::SPCPUTargetMachine::getSubtargetImpl	SPCPUTargetMachine.h	/^  const SPCPUSubtarget * getSubtargetImpl() const {$/;"	kind:f	class:llvm::SPCPUTargetMachine	typeref:typename:const SPCPUSubtarget *	access:public	signature:() const
llvm::SPCPUTargetMachine::getSubtargetImpl	SPCPUTargetMachine.h	/^  getSubtargetImpl(const Function &) const override {$/;"	kind:f	class:llvm::SPCPUTargetMachine	typeref:typename:const TargetSubtargetInfo *	access:public	signature:(const Function &) const
llvm::TheSPCPUTarget	TargetInfo/SPCPUTargetInfo.cpp	/^  Target TheSPCPUTarget;$/;"	kind:v	namespace:llvm	typeref:typename:Target
llvm::createSPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^MCAsmBackend *llvm::createSPCPUAsmBackend(const Target &T,$/;"	kind:f	class:llvm	typeref:typename:MCAsmBackend *	signature:(const Target & T,const MCRegisterInfo & MRI,const Triple & TT,StringRef CPU,const MCTargetOptions & Options)
llvm::createSPCPUAsmBackend	MCTargetDesc/SPCPUMCTargetDesc.h	/^MCAsmBackend *createSPCPUAsmBackend(const Target &T,$/;"	kind:p	namespace:llvm	typeref:typename:MCAsmBackend *	signature:(const Target & T,const MCRegisterInfo & MRI,const Triple & TT,StringRef CPU,const MCTargetOptions & Options)
llvm::createSPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^MCObjectWriter *llvm::createSPCPUELFObjectWriter(raw_pwrite_stream &OS, uint8_t OSABI) {$/;"	kind:f	class:llvm	typeref:typename:MCObjectWriter *	signature:(raw_pwrite_stream & OS,uint8_t OSABI)
llvm::createSPCPUELFObjectWriter	MCTargetDesc/SPCPUMCTargetDesc.h	/^MCObjectWriter *createSPCPUELFObjectWriter(raw_pwrite_stream &OS, uint8_t OSABI);$/;"	kind:p	namespace:llvm	typeref:typename:MCObjectWriter *	signature:(raw_pwrite_stream & OS,uint8_t OSABI)
llvm::createSPCPUISelDag	SPCPU.h	/^FunctionPass *createSPCPUISelDag(SPCPUTargetMachine &TM,$/;"	kind:p	namespace:llvm	typeref:typename:FunctionPass *	signature:(SPCPUTargetMachine & TM,CodeGenOpt::Level OptLevel)
llvm::createSPCPUISelDag	SPCPUISelDAGToDAG.cpp	/^FunctionPass *llvm::createSPCPUISelDag(SPCPUTargetMachine &TM,$/;"	kind:f	class:llvm	typeref:typename:FunctionPass *	signature:(SPCPUTargetMachine & TM,CodeGenOpt::Level OptLevel)
llvm::createSPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^MCCodeEmitter *llvm::createSPCPUMCCodeEmitter(const MCInstrInfo &MCII,$/;"	kind:f	class:llvm	typeref:typename:MCCodeEmitter *	signature:(const MCInstrInfo & MCII,const MCRegisterInfo & MRI,MCContext & Ctx)
llvm::createSPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCTargetDesc.h	/^MCCodeEmitter *createSPCPUMCCodeEmitter(const MCInstrInfo &MCII,$/;"	kind:p	namespace:llvm	typeref:typename:MCCodeEmitter *	signature:(const MCInstrInfo & MCII,const MCRegisterInfo & MRI,MCContext & Ctx)
loadRegFromStackSlot	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::loadRegFromStackSlot(MachineBasicBlock &MBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,unsigned DestReg,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
loadRegFromStackSlot	SPCPUInstrInfo.h	/^  virtual void loadRegFromStackSlot(MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator MI,unsigned DestReg,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
mayNeedRelaxation	MCTargetDesc/SPCPUAsmBackend.cpp	/^  bool mayNeedRelaxation(const MCInst &Inst) const override { return false; }$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:bool	file:	access:public	signature:(const MCInst & Inst) const
operator =	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  void operator=(const SPCPUMCCodeEmitter &) = delete;$/;"	kind:p	class:__anon7af9528b0110::SPCPUMCCodeEmitter	typeref:typename:void	file:	access:private	signature:(const SPCPUMCCodeEmitter &)
printAddrModeMemSrc	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printAddrModeMemSrc(const MCInst *MI, unsigned OpNum,$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(const MCInst * MI,unsigned OpNum,raw_ostream & O)
printAddrModeMemSrc	InstPrinter/SPCPUInstPrinter.h	/^  void printAddrModeMemSrc(const MCInst *MI, unsigned OpNum, raw_ostream &O);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:private	signature:(const MCInst * MI,unsigned OpNum,raw_ostream & O)
printExpr	InstPrinter/SPCPUInstPrinter.cpp	/^static void printExpr(const MCExpr *Expr, raw_ostream &OS) {$/;"	kind:f	typeref:typename:void	file:	signature:(const MCExpr * Expr,raw_ostream & OS)
printInst	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printInst(const MCInst *MI, raw_ostream &O,$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(const MCInst * MI,raw_ostream & O,StringRef Annot,const MCSubtargetInfo & STI)
printInst	InstPrinter/SPCPUInstPrinter.h	/^  virtual void printInst(const MCInst *MI, raw_ostream &OS, StringRef Annot,$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:public	signature:(const MCInst * MI,raw_ostream & OS,StringRef Annot,const MCSubtargetInfo & STI)
printInstruction	InstPrinter/SPCPUInstPrinter.h	/^  void printInstruction(const MCInst *MI, raw_ostream &O);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:public	signature:(const MCInst * MI,raw_ostream & O)
printOperand	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printOperand(const MCInst *MI, unsigned OpNo,$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(const MCInst * MI,unsigned OpNo,raw_ostream & O)
printOperand	InstPrinter/SPCPUInstPrinter.h	/^  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:private	signature:(const MCInst * MI,unsigned OpNo,raw_ostream & O)
printRegName	InstPrinter/SPCPUInstPrinter.cpp	/^void SPCPUInstPrinter::printRegName(raw_ostream &OS, unsigned RegNo) const {$/;"	kind:f	class:SPCPUInstPrinter	typeref:typename:void	signature:(raw_ostream & OS,unsigned RegNo) const
printRegName	InstPrinter/SPCPUInstPrinter.h	/^  virtual void printRegName(raw_ostream &OS, unsigned RegNo) const override;$/;"	kind:p	class:llvm::SPCPUInstPrinter	typeref:typename:void	access:public	signature:(raw_ostream & OS,unsigned RegNo) const
processFixupValue	MCTargetDesc/SPCPUAsmBackend.cpp	/^  void processFixupValue(const MCAssembler &Asm, const MCAsmLayout &Layout,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:void	file:	access:public	signature:(const MCAssembler & Asm,const MCAsmLayout & Layout,const MCFixup & Fixup,const MCFragment * DF,const MCValue & Target,uint64_t & Value,bool & IsResolved)
relaxInstruction	MCTargetDesc/SPCPUAsmBackend.cpp	/^  void relaxInstruction(const MCInst &Inst, const MCSubtargetInfo &STI,$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:void	file:	access:public	signature:(const MCInst & Inst,const MCSubtargetInfo & STI,MCInst & Res) const
removeBranch	SPCPUInstrInfo.cpp	/^unsigned SPCPUInstrInfo::removeBranch(MachineBasicBlock &MBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:unsigned	signature:(MachineBasicBlock & MBB,int * BytesRemoved) const
removeBranch	SPCPUInstrInfo.h	/^  unsigned removeBranch(MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:unsigned	access:public	signature:(MachineBasicBlock & MBB,int * BytesRemoved=nullptr) const
requiresRegisterScavenging	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::requiresRegisterScavenging(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:bool	signature:(const MachineFunction & MF) const
requiresRegisterScavenging	SPCPURegisterInfo.h	/^  bool requiresRegisterScavenging(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
stackSlotSize	SPCPUFrameLowering.h	/^  static int stackSlotSize() { return 4; }$/;"	kind:f	class:llvm::SPCPUFrameLowering	typeref:typename:int	access:public	signature:()
storeRegToStackSlot	SPCPUInstrInfo.cpp	/^void SPCPUInstrInfo::storeRegToStackSlot(MachineBasicBlock &MBB,$/;"	kind:f	class:SPCPUInstrInfo	typeref:typename:void	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator I,unsigned SrcReg,bool isKill,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
storeRegToStackSlot	SPCPUInstrInfo.h	/^  virtual void storeRegToStackSlot(MachineBasicBlock &MBB,$/;"	kind:p	class:llvm::SPCPUInstrInfo	typeref:typename:void	access:public	signature:(MachineBasicBlock & MBB,MachineBasicBlock::iterator MI,unsigned SrcReg,bool isKill,int FrameIndex,const TargetRegisterClass * RC,const TargetRegisterInfo * TRI) const
trackLivenessAfterRegAlloc	SPCPURegisterInfo.cpp	/^SPCPURegisterInfo::trackLivenessAfterRegAlloc(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:bool	signature:(const MachineFunction & MF) const
trackLivenessAfterRegAlloc	SPCPURegisterInfo.h	/^  bool trackLivenessAfterRegAlloc(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
useFPForScavengingIndex	SPCPURegisterInfo.cpp	/^bool SPCPURegisterInfo::useFPForScavengingIndex(const MachineFunction &MF) const {$/;"	kind:f	class:SPCPURegisterInfo	typeref:typename:bool	signature:(const MachineFunction & MF) const
useFPForScavengingIndex	SPCPURegisterInfo.h	/^  bool useFPForScavengingIndex(const MachineFunction &MF) const override;$/;"	kind:p	struct:llvm::SPCPURegisterInfo	typeref:typename:bool	access:public	signature:(const MachineFunction & MF) const
writeNopData	MCTargetDesc/SPCPUAsmBackend.cpp	/^  bool writeNopData(uint64_t Count, MCObjectWriter *OW) const override {$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	typeref:typename:bool	file:	access:public	signature:(uint64_t Count,MCObjectWriter * OW) const
~SPCPUAsmBackend	MCTargetDesc/SPCPUAsmBackend.cpp	/^  ~SPCPUAsmBackend() {}$/;"	kind:f	class:__anon3c7e6baf0110::SPCPUAsmBackend	file:	access:public	signature:()
~SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^    virtual ~SPCPUELFObjectWriter();$/;"	kind:p	class:__anon3589f0110110::SPCPUELFObjectWriter	file:	access:public	signature:()
~SPCPUELFObjectWriter	MCTargetDesc/SPCPUELFObjectWriter.cpp	/^SPCPUELFObjectWriter::~SPCPUELFObjectWriter() {}$/;"	kind:f	class:SPCPUELFObjectWriter	signature:()
~SPCPUFunctionInfo	SPCPUMachineFunctionInfo.h	/^  ~SPCPUFunctionInfo() {}$/;"	kind:f	class:llvm::SPCPUFunctionInfo	access:public	signature:()
~SPCPUMCCodeEmitter	MCTargetDesc/SPCPUMCCodeEmitter.cpp	/^  ~SPCPUMCCodeEmitter() {}$/;"	kind:f	class:__anon7af9528b0110::SPCPUMCCodeEmitter	file:	access:public	signature:()
~SPCPUSelectionDAGInfo	SPCPUSelectionDAGInfo.cpp	/^SPCPUSelectionDAGInfo::~SPCPUSelectionDAGInfo() {}$/;"	kind:f	class:SPCPUSelectionDAGInfo	signature:()
~SPCPUSelectionDAGInfo	SPCPUSelectionDAGInfo.h	/^  ~SPCPUSelectionDAGInfo();$/;"	kind:p	class:llvm::SPCPUSelectionDAGInfo	access:public	signature:()
